
/Users/raventt/MBP_Projects/arduino/maxPhoton5Mqtt/target/maxPhoton5Mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a20e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000070  20000300  080a20e4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000001b4  20000370  20000370  00030370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a2154  080a2154  00022154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a217c  080a217c  0002217c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009779b  00000000  00000000  00022180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000da93  00000000  00000000  000b991b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014943  00000000  00000000  000c73ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002008  00000000  00000000  000dbcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033e8  00000000  00000000  000ddcf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022d0d  00000000  00000000  000e10e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001eb7e  00000000  00000000  00103dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b4fc  00000000  00000000  0012296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b9dc  00000000  00000000  001bde68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a4 1c 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fd5d 	bl	80a1aec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fd62 	bl	80a1b02 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a20e4 	.word	0x080a20e4
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	20000524 	.word	0x20000524
 80a0058:	20000524 	.word	0x20000524

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb7f 	bl	80a1760 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a20a8 	.word	0x080a20a8
 80a0084:	080a20dc 	.word	0x080a20dc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b818 	b.w	80a00bc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f87b 	bl	80a0188 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb25 	b.w	80a16e4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bcc9 	b.w	80a0a30 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f000 bcc7 	b.w	80a0a30 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bccd 	b.w	80a0a40 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f000 bccb 	b.w	80a0a40 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z8callbackPcPhj>:

#include "MQTT.h"

byte server1[] = {192,168,0,103};

void callback(char* topic, byte* payload, unsigned int length){}
 80a00ba:	4770      	bx	lr

080a00bc <setup>:
 * MQTT client("www.sample.com", 1883, callback);
 **/
MQTT client(server1, 1883, callback);

void setup()
{
 80a00bc:	b508      	push	{r3, lr}
  Serial.begin(57600);
 80a00be:	f001 fa25 	bl	80a150c <_Z16_fetch_usbserialv>
 80a00c2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80a00c6:	f001 fa0f 	bl	80a14e8 <_ZN9USBSerial5beginEl>
  while (!Serial)
 80a00ca:	f001 fa1f 	bl	80a150c <_Z16_fetch_usbserialv>
 80a00ce:	f001 fa12 	bl	80a14f6 <_ZN9USBSerialcvbEv>
 80a00d2:	2800      	cmp	r0, #0
 80a00d4:	d0f9      	beq.n	80a00ca <setup+0xe>
  {
    ; // wait for serial port to connect.
  }
  Serial.println("Serial open");
 80a00d6:	f001 fa19 	bl	80a150c <_Z16_fetch_usbserialv>
 80a00da:	490d      	ldr	r1, [pc, #52]	; (80a0110 <setup+0x54>)
 80a00dc:	f000 fd6b 	bl	80a0bb6 <_ZN5Print7printlnEPKc>
  // set the data rate from the sensor
  Serial1.begin(9600, SERIAL_8N1); // Default but set explicitly anyway
 80a00e0:	f001 f984 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a00e4:	2200      	movs	r2, #0
 80a00e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ea:	f001 f979 	bl	80a13e0 <_ZN11USARTSerial5beginEmm>
  while (!Serial1)
 80a00ee:	f001 f97d 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a00f2:	f001 f979 	bl	80a13e8 <_ZN11USARTSerialcvbEv>
 80a00f6:	2800      	cmp	r0, #0
 80a00f8:	d0f9      	beq.n	80a00ee <setup+0x32>
  {
    ; // wait for Serial1 port to connect.
  }
  Serial.println("Sensor connected");
 80a00fa:	f001 fa07 	bl	80a150c <_Z16_fetch_usbserialv>
 80a00fe:	4905      	ldr	r1, [pc, #20]	; (80a0114 <setup+0x58>)
 80a0100:	f000 fd59 	bl	80a0bb6 <_ZN5Print7printlnEPKc>
  client.connect("maxphoton5");

}
 80a0104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (!Serial1)
  {
    ; // wait for Serial1 port to connect.
  }
  Serial.println("Sensor connected");
  client.connect("maxphoton5");
 80a0108:	4903      	ldr	r1, [pc, #12]	; (80a0118 <setup+0x5c>)
 80a010a:	4804      	ldr	r0, [pc, #16]	; (80a011c <setup+0x60>)
 80a010c:	f000 baaa 	b.w	80a0664 <_ZN4MQTT7connectEPKc>
 80a0110:	080a1cb8 	.word	0x080a1cb8
 80a0114:	080a1cc4 	.word	0x080a1cc4
 80a0118:	080a1cd5 	.word	0x080a1cd5
 80a011c:	20000374 	.word	0x20000374

080a0120 <_Z7maxReadv>:

  delay(5000);
}

// uint16_t maxRead() {
  String maxRead() {             // get a data string back from reading sensor
 80a0120:	b538      	push	{r3, r4, r5, lr}
char inChar;                     // type for data read
const uint8_t length = 3;        // number of ascii numeric characters in sensor data
// char charArray[length];       // array to store range data
String reading = "";             // empty string to add data
 80a0122:	4917      	ldr	r1, [pc, #92]	; (80a0180 <_Z7maxReadv+0x60>)

  delay(5000);
}

// uint16_t maxRead() {
  String maxRead() {             // get a data string back from reading sensor
 80a0124:	4605      	mov	r5, r0
char inChar;                     // type for data read
const uint8_t length = 3;        // number of ascii numeric characters in sensor data
// char charArray[length];       // array to store range data
String reading = "";             // empty string to add data
 80a0126:	f000 fe20 	bl	80a0d6a <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t i = 0;                   // initialize counter
 80a012a:	2400      	movs	r4, #0

  while (Serial1.available()) {
 80a012c:	f001 f95e 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a0130:	6803      	ldr	r3, [r0, #0]
 80a0132:	691b      	ldr	r3, [r3, #16]
 80a0134:	4798      	blx	r3
 80a0136:	b300      	cbz	r0, 80a017a <_Z7maxReadv+0x5a>
    inChar = Serial1.read();        // continuously read sensor input in while loop
 80a0138:	f001 f958 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a013c:	6803      	ldr	r3, [r0, #0]
 80a013e:	695b      	ldr	r3, [r3, #20]
 80a0140:	4798      	blx	r3
    if (inChar == 'R') {            // test if char == R for beginning data
 80a0142:	b2c0      	uxtb	r0, r0
 80a0144:	2852      	cmp	r0, #82	; 0x52
 80a0146:	d1f1      	bne.n	80a012c <_Z7maxReadv+0xc>
    // Serial.println("Got an R");  // Debug
      while (i < length) {
 80a0148:	2c03      	cmp	r4, #3
 80a014a:	d0ef      	beq.n	80a012c <_Z7maxReadv+0xc>
        // charArray[i] = Serial1.read(); // assign input char to charArray index
                reading += (Serial1.read() - '0'); // assign input char to reading string
 80a014c:	f001 f94e 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a0150:	6803      	ldr	r3, [r0, #0]
        // Serial.print("char: ");        // debug
                Serial.print("reading: ");        // debug
        // Serial.println(charArray[i]);
            Serial.println(reading);
        i++;
 80a0152:	3401      	adds	r4, #1
    inChar = Serial1.read();        // continuously read sensor input in while loop
    if (inChar == 'R') {            // test if char == R for beginning data
    // Serial.println("Got an R");  // Debug
      while (i < length) {
        // charArray[i] = Serial1.read(); // assign input char to charArray index
                reading += (Serial1.read() - '0'); // assign input char to reading string
 80a0154:	695b      	ldr	r3, [r3, #20]
 80a0156:	4798      	blx	r3
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
 80a0158:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80a015c:	4628      	mov	r0, r5
 80a015e:	f000 fe59 	bl	80a0e14 <_ZN6String6concatEi>
        // Serial.print("char: ");        // debug
                Serial.print("reading: ");        // debug
 80a0162:	f001 f9d3 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0166:	4907      	ldr	r1, [pc, #28]	; (80a0184 <_Z7maxReadv+0x64>)
 80a0168:	f000 fd12 	bl	80a0b90 <_ZN5Print5printEPKc>
        // Serial.println(charArray[i]);
            Serial.println(reading);
 80a016c:	f001 f9ce 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0170:	6829      	ldr	r1, [r5, #0]
 80a0172:	f000 fd20 	bl	80a0bb6 <_ZN5Print7printlnEPKc>
        i++;
 80a0176:	b2e4      	uxtb	r4, r4

  while (Serial1.available()) {
    inChar = Serial1.read();        // continuously read sensor input in while loop
    if (inChar == 'R') {            // test if char == R for beginning data
    // Serial.println("Got an R");  // Debug
      while (i < length) {
 80a0178:	e7e6      	b.n	80a0148 <_Z7maxReadv+0x28>
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
    return reading;            // return range reading as a string
 80a017a:	4628      	mov	r0, r5
 80a017c:	bd38      	pop	{r3, r4, r5, pc}
 80a017e:	bf00      	nop
 80a0180:	080a1d46 	.word	0x080a1d46
 80a0184:	080a1ce0 	.word	0x080a1ce0

080a0188 <loop>:
  client.connect("maxphoton5");

}

void loop()
{
 80a0188:	b510      	push	{r4, lr}
 80a018a:	b088      	sub	sp, #32
  // uint16_t range = maxRead();
    String range = maxRead();
 80a018c:	4668      	mov	r0, sp
 80a018e:	f7ff ffc7 	bl	80a0120 <_Z7maxReadv>
  Serial.print("Distance: ");
 80a0192:	f001 f9bb 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0196:	4918      	ldr	r1, [pc, #96]	; (80a01f8 <loop+0x70>)
 80a0198:	f000 fcfa 	bl	80a0b90 <_ZN5Print5printEPKc>
  Serial.println(range);
 80a019c:	f001 f9b6 	bl	80a150c <_Z16_fetch_usbserialv>
 80a01a0:	9900      	ldr	r1, [sp, #0]
 80a01a2:	f000 fd08 	bl	80a0bb6 <_ZN5Print7printlnEPKc>
  String payload = range;
 80a01a6:	4669      	mov	r1, sp
 80a01a8:	a804      	add	r0, sp, #16
 80a01aa:	f000 fe00 	bl	80a0dae <_ZN6StringC1ERKS_>
  if (client.isConnected()) {
 80a01ae:	4813      	ldr	r0, [pc, #76]	; (80a01fc <loop+0x74>)
 80a01b0:	f000 f973 	bl	80a049a <_ZN4MQTT11isConnectedEv>
 80a01b4:	b120      	cbz	r0, 80a01c0 <loop+0x38>
    client.publish("distance", payload);
 80a01b6:	9a04      	ldr	r2, [sp, #16]
 80a01b8:	4911      	ldr	r1, [pc, #68]	; (80a0200 <loop+0x78>)
 80a01ba:	4810      	ldr	r0, [pc, #64]	; (80a01fc <loop+0x74>)
 80a01bc:	f000 fad1 	bl	80a0762 <_ZN4MQTT7publishEPKcS1_>
  }
  Serial.print("Int range: ");
 80a01c0:	f001 f9a4 	bl	80a150c <_Z16_fetch_usbserialv>
 80a01c4:	490f      	ldr	r1, [pc, #60]	; (80a0204 <loop+0x7c>)
 80a01c6:	f000 fce3 	bl	80a0b90 <_ZN5Print5printEPKc>
  Serial.println((range).toInt());
 80a01ca:	f001 f99f 	bl	80a150c <_Z16_fetch_usbserialv>
 80a01ce:	4604      	mov	r4, r0
 80a01d0:	4668      	mov	r0, sp
 80a01d2:	f000 fe30 	bl	80a0e36 <_ZNK6String5toIntEv>
 80a01d6:	220a      	movs	r2, #10
 80a01d8:	4601      	mov	r1, r0
 80a01da:	4620      	mov	r0, r4
 80a01dc:	f000 fd43 	bl	80a0c66 <_ZN5Print7printlnEli>

  delay(5000);
 80a01e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80a01e4:	f000 fc3c 	bl	80a0a60 <delay>
{
  // uint16_t range = maxRead();
    String range = maxRead();
  Serial.print("Distance: ");
  Serial.println(range);
  String payload = range;
 80a01e8:	a804      	add	r0, sp, #16
 80a01ea:	f000 fd77 	bl	80a0cdc <_ZN6StringD1Ev>
}

void loop()
{
  // uint16_t range = maxRead();
    String range = maxRead();
 80a01ee:	4668      	mov	r0, sp
 80a01f0:	f000 fd74 	bl	80a0cdc <_ZN6StringD1Ev>
  }
  Serial.print("Int range: ");
  Serial.println((range).toInt());

  delay(5000);
}
 80a01f4:	b008      	add	sp, #32
 80a01f6:	bd10      	pop	{r4, pc}
 80a01f8:	080a1cea 	.word	0x080a1cea
 80a01fc:	20000374 	.word	0x20000374
 80a0200:	080a1cf5 	.word	0x080a1cf5
 80a0204:	080a1cfe 	.word	0x080a1cfe

080a0208 <_GLOBAL__sub_I_server1>:
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
    return reading;            // return range reading as a string
 80a0208:	b510      	push	{r4, lr}
 * byte server[] = { XXX,XXX,XXX,XXX };
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/
MQTT client(server1, 1883, callback);
 80a020a:	4c08      	ldr	r4, [pc, #32]	; (80a022c <_GLOBAL__sub_I_server1+0x24>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a020c:	f000 faf4 	bl	80a07f8 <HAL_Pin_Map>
 80a0210:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0214:	4906      	ldr	r1, [pc, #24]	; (80a0230 <_GLOBAL__sub_I_server1+0x28>)
 80a0216:	4620      	mov	r0, r4
 80a0218:	4b06      	ldr	r3, [pc, #24]	; (80a0234 <_GLOBAL__sub_I_server1+0x2c>)
 80a021a:	f000 f857 	bl	80a02cc <_ZN4MQTTC1EPhtPFvPcS0_jE>
 80a021e:	4620      	mov	r0, r4
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
    return reading;            // return range reading as a string
 80a0220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * byte server[] = { XXX,XXX,XXX,XXX };
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/
MQTT client(server1, 1883, callback);
 80a0224:	4a04      	ldr	r2, [pc, #16]	; (80a0238 <_GLOBAL__sub_I_server1+0x30>)
 80a0226:	4905      	ldr	r1, [pc, #20]	; (80a023c <_GLOBAL__sub_I_server1+0x34>)
 80a0228:	f001 bb00 	b.w	80a182c <__aeabi_atexit>
 80a022c:	20000374 	.word	0x20000374
 80a0230:	20000300 	.word	0x20000300
 80a0234:	080a00bb 	.word	0x080a00bb
 80a0238:	20000370 	.word	0x20000370
 80a023c:	080a0789 	.word	0x080a0789

080a0240 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0240:	b538      	push	{r3, r4, r5, lr}
 80a0242:	4b0b      	ldr	r3, [pc, #44]	; (80a0270 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0244:	6984      	ldr	r4, [r0, #24]
 80a0246:	4605      	mov	r5, r0
 80a0248:	6003      	str	r3, [r0, #0]
 80a024a:	b17c      	cbz	r4, 80a026c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a024c:	6863      	ldr	r3, [r4, #4]
 80a024e:	3b01      	subs	r3, #1
 80a0250:	6063      	str	r3, [r4, #4]
 80a0252:	b95b      	cbnz	r3, 80a026c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0254:	6823      	ldr	r3, [r4, #0]
 80a0256:	4620      	mov	r0, r4
 80a0258:	689b      	ldr	r3, [r3, #8]
 80a025a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a025c:	68a3      	ldr	r3, [r4, #8]
 80a025e:	3b01      	subs	r3, #1
 80a0260:	60a3      	str	r3, [r4, #8]
 80a0262:	b91b      	cbnz	r3, 80a026c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0264:	6823      	ldr	r3, [r4, #0]
 80a0266:	4620      	mov	r0, r4
 80a0268:	68db      	ldr	r3, [r3, #12]
 80a026a:	4798      	blx	r3
 80a026c:	4628      	mov	r0, r5
 80a026e:	bd38      	pop	{r3, r4, r5, pc}
 80a0270:	080a1e48 	.word	0x080a1e48

080a0274 <_ZN9TCPClientD0Ev>:
 80a0274:	b510      	push	{r4, lr}
 80a0276:	4604      	mov	r4, r0
 80a0278:	f7ff ffe2 	bl	80a0240 <_ZN9TCPClientD1Ev>
 80a027c:	4620      	mov	r0, r4
 80a027e:	f7ff ff10 	bl	80a00a2 <_ZdlPv>
 80a0282:	4620      	mov	r0, r4
 80a0284:	bd10      	pop	{r4, pc}

080a0286 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0286:	b538      	push	{r3, r4, r5, lr}
 80a0288:	461d      	mov	r5, r3
    this->callback = callback;
 80a028a:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a028c:	4604      	mov	r4, r0
    this->callback = callback;
 80a028e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0290:	2300      	movs	r3, #0
 80a0292:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0294:	b102      	cbz	r2, 80a0298 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0296:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0298:	b119      	cbz	r1, 80a02a2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a029a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a029e:	f000 fd91 	bl	80a0dc4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a02a2:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a02a4:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a02a6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02a8:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a02aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02ae:	2bff      	cmp	r3, #255	; 0xff
 80a02b0:	bfb8      	it	lt
 80a02b2:	23ff      	movlt	r3, #255	; 0xff
 80a02b4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a02b8:	b108      	cbz	r0, 80a02be <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a02ba:	f7ff fef4 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a02be:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a02c2:	f7ff feec 	bl	80a009e <_Znaj>
 80a02c6:	61e0      	str	r0, [r4, #28]
 80a02c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02cc <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a02cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a02d0:	4604      	mov	r4, r0
 80a02d2:	4617      	mov	r7, r2
 80a02d4:	4698      	mov	r8, r3
 80a02d6:	460e      	mov	r6, r1
 80a02d8:	2500      	movs	r5, #0
 80a02da:	f000 ff55 	bl	80a1188 <_ZN9TCPClientC1Ev>
 80a02de:	61e5      	str	r5, [r4, #28]
 80a02e0:	490a      	ldr	r1, [pc, #40]	; (80a030c <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
 80a02e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a02e6:	f000 fd40 	bl	80a0d6a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02ea:	23ff      	movs	r3, #255	; 0xff
 80a02ec:	9302      	str	r3, [sp, #8]
 80a02ee:	230f      	movs	r3, #15
 80a02f0:	9300      	str	r3, [sp, #0]
 80a02f2:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a02f4:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80a02fa:	463b      	mov	r3, r7
 80a02fc:	4632      	mov	r2, r6
 80a02fe:	4629      	mov	r1, r5
 80a0300:	f7ff ffc1 	bl	80a0286 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0304:	4620      	mov	r0, r4
 80a0306:	b004      	add	sp, #16
 80a0308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a030c:	080a1d46 	.word	0x080a1d46

080a0310 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0310:	b510      	push	{r4, lr}
 80a0312:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0314:	4620      	mov	r0, r4
 80a0316:	f000 fea7 	bl	80a1068 <_ZN9TCPClient9availableEv>
 80a031a:	2800      	cmp	r0, #0
 80a031c:	d0fa      	beq.n	80a0314 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a031e:	4620      	mov	r0, r4
 80a0320:	f000 fe49 	bl	80a0fb6 <_ZN9TCPClient4readEv>
}
 80a0324:	b2c0      	uxtb	r0, r0
 80a0326:	bd10      	pop	{r4, pc}

080a0328 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a032c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a032e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0330:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0332:	f7ff ffed 	bl	80a0310 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0336:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a033a:	4646      	mov	r6, r8
 80a033c:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a033e:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0340:	2700      	movs	r7, #0
 80a0342:	f893 9000 	ldrb.w	r9, [r3]
 80a0346:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a034a:	4628      	mov	r0, r5
 80a034c:	f7ff ffe0 	bl	80a0310 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0350:	69eb      	ldr	r3, [r5, #28]
 80a0352:	1c74      	adds	r4, r6, #1
 80a0354:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0356:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a035a:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a035e:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0360:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0362:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0364:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0368:	d501      	bpl.n	80a036e <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a036a:	4626      	mov	r6, r4
 80a036c:	e7ed      	b.n	80a034a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a036e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0370:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0374:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0378:	d113      	bne.n	80a03a2 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a037a:	4628      	mov	r0, r5
 80a037c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0380:	f7ff ffc6 	bl	80a0310 <_ZN4MQTT8readByteEv>
 80a0384:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0388:	4628      	mov	r0, r5
 80a038a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a038e:	f7ff ffbf 	bl	80a0310 <_ZN4MQTT8readByteEv>
 80a0392:	1cf4      	adds	r4, r6, #3
 80a0394:	3602      	adds	r6, #2
 80a0396:	b2b6      	uxth	r6, r6
 80a0398:	b2a4      	uxth	r4, r4
 80a039a:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a039e:	2302      	movs	r3, #2
 80a03a0:	e000      	b.n	80a03a4 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a03a2:	2300      	movs	r3, #0
 80a03a4:	1b1b      	subs	r3, r3, r4
 80a03a6:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a03a8:	19a3      	adds	r3, r4, r6
 80a03aa:	b29b      	uxth	r3, r3
 80a03ac:	429f      	cmp	r7, r3
 80a03ae:	d90b      	bls.n	80a03c8 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a03b0:	4628      	mov	r0, r5
 80a03b2:	f7ff ffad 	bl	80a0310 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a03b6:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a03ba:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a03bc:	bf84      	itt	hi
 80a03be:	69eb      	ldrhi	r3, [r5, #28]
 80a03c0:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a03c2:	3401      	adds	r4, #1
 80a03c4:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a03c6:	e7ef      	b.n	80a03a8 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a03c8:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a03cc:	42a0      	cmp	r0, r4
 80a03ce:	bf2c      	ite	cs
 80a03d0:	4620      	movcs	r0, r4
 80a03d2:	2000      	movcc	r0, #0
 80a03d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a03d8 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a03d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a03da:	4607      	mov	r7, r0
 80a03dc:	468e      	mov	lr, r1
 80a03de:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a03e0:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a03e2:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a03e4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a03e8:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a03ea:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a03ec:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a03ee:	bf18      	it	ne
 80a03f0:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a03f4:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a03f6:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a03fa:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a03fc:	2d00      	cmp	r5, #0
 80a03fe:	d1f1      	bne.n	80a03e4 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0400:	f1c4 0304 	rsb	r3, r4, #4
 80a0404:	18d1      	adds	r1, r2, r3
 80a0406:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a040a:	42a5      	cmp	r5, r4
 80a040c:	da06      	bge.n	80a041c <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a040e:	a801      	add	r0, sp, #4
 80a0410:	1b2b      	subs	r3, r5, r4
 80a0412:	5c28      	ldrb	r0, [r5, r0]
 80a0414:	4413      	add	r3, r2
 80a0416:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0418:	3501      	adds	r5, #1
 80a041a:	e7f6      	b.n	80a040a <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a041c:	1c72      	adds	r2, r6, #1
 80a041e:	4422      	add	r2, r4
 80a0420:	4638      	mov	r0, r7
 80a0422:	f000 fd3a 	bl	80a0e9a <_ZN9TCPClient5writeEPKhj>
 80a0426:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0428:	f000 f9de 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a042c:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a042e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0430:	4434      	add	r4, r6
 80a0432:	b2a8      	uxth	r0, r5
}
 80a0434:	1a23      	subs	r3, r4, r0
 80a0436:	4258      	negs	r0, r3
 80a0438:	4158      	adcs	r0, r3
 80a043a:	b003      	add	sp, #12
 80a043c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a043e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a043e:	b510      	push	{r4, lr}
 80a0440:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0442:	69c3      	ldr	r3, [r0, #28]
 80a0444:	22e0      	movs	r2, #224	; 0xe0
 80a0446:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0448:	69c3      	ldr	r3, [r0, #28]
 80a044a:	2200      	movs	r2, #0
 80a044c:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a044e:	69c1      	ldr	r1, [r0, #28]
 80a0450:	2202      	movs	r2, #2
 80a0452:	f000 fd22 	bl	80a0e9a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0456:	4620      	mov	r0, r4
 80a0458:	f000 fe44 	bl	80a10e4 <_ZN9TCPClient4stopEv>
 80a045c:	f000 f9c4 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0460:	6260      	str	r0, [r4, #36]	; 0x24
 80a0462:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0464:	bd10      	pop	{r4, pc}

080a0466 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0466:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0468:	460d      	mov	r5, r1
 80a046a:	3302      	adds	r3, #2
 80a046c:	b29b      	uxth	r3, r3
 80a046e:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0470:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0474:	b2a4      	uxth	r4, r4
 80a0476:	b13e      	cbz	r6, 80a0488 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0478:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a047c:	429f      	cmp	r7, r3
 80a047e:	d903      	bls.n	80a0488 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0480:	1c5c      	adds	r4, r3, #1
 80a0482:	54d6      	strb	r6, [r2, r3]
 80a0484:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0486:	e7f2      	b.n	80a046e <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0488:	1b19      	subs	r1, r3, r4
 80a048a:	440a      	add	r2, r1
 80a048c:	1221      	asrs	r1, r4, #8
 80a048e:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0492:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0496:	4618      	mov	r0, r3
 80a0498:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a049a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a049a:	b538      	push	{r3, r4, r5, lr}
 80a049c:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a049e:	f000 ff25 	bl	80a12ec <_ZN9TCPClient9connectedEv>
 80a04a2:	2800      	cmp	r0, #0
 80a04a4:	bf14      	ite	ne
 80a04a6:	2401      	movne	r4, #1
 80a04a8:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a04aa:	d102      	bne.n	80a04b2 <_ZN4MQTT11isConnectedEv+0x18>
 80a04ac:	4628      	mov	r0, r5
 80a04ae:	f000 fe19 	bl	80a10e4 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a04b2:	4620      	mov	r0, r4
 80a04b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a04b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a04b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a04bc:	b087      	sub	sp, #28
 80a04be:	4604      	mov	r4, r0
 80a04c0:	4689      	mov	r9, r1
 80a04c2:	4617      	mov	r7, r2
 80a04c4:	461e      	mov	r6, r3
 80a04c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a04ca:	f7ff ffe6 	bl	80a049a <_ZN4MQTT11isConnectedEv>
 80a04ce:	4605      	mov	r5, r0
 80a04d0:	2800      	cmp	r0, #0
 80a04d2:	f040 80bd 	bne.w	80a0650 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a04d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a04d8:	b939      	cbnz	r1, 80a04ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a04da:	4603      	mov	r3, r0
 80a04dc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a04e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a04e2:	4620      	mov	r0, r4
 80a04e4:	f000 fcfa 	bl	80a0edc <_ZN9TCPClient7connectEPKctm>
 80a04e8:	e009      	b.n	80a04fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a04ea:	4668      	mov	r0, sp
 80a04ec:	f000 fb18 	bl	80a0b20 <_ZN9IPAddressC1EPKh>
 80a04f0:	462b      	mov	r3, r5
 80a04f2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a04f6:	4669      	mov	r1, sp
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f000 fe4f 	bl	80a119c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a04fe:	2800      	cmp	r0, #0
 80a0500:	f000 80a2 	beq.w	80a0648 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0504:	2301      	movs	r3, #1
 80a0506:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0508:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a050c:	2b04      	cmp	r3, #4
 80a050e:	d115      	bne.n	80a053c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0510:	4b52      	ldr	r3, [pc, #328]	; (80a065c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0512:	6818      	ldr	r0, [r3, #0]
 80a0514:	889a      	ldrh	r2, [r3, #4]
 80a0516:	9000      	str	r0, [sp, #0]
 80a0518:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a051c:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a051e:	69e2      	ldr	r2, [r4, #28]
 80a0520:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0522:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0526:	f8c2 0005 	str.w	r0, [r2, #5]
 80a052a:	1d53      	adds	r3, r2, #5
 80a052c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0530:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0534:	8099      	strh	r1, [r3, #4]
 80a0536:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0538:	230c      	movs	r3, #12
 80a053a:	e012      	b.n	80a0562 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a053c:	466a      	mov	r2, sp
 80a053e:	4b48      	ldr	r3, [pc, #288]	; (80a0660 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0540:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0544:	6818      	ldr	r0, [r3, #0]
 80a0546:	6859      	ldr	r1, [r3, #4]
 80a0548:	7a1b      	ldrb	r3, [r3, #8]
 80a054a:	c203      	stmia	r2!, {r0, r1}
 80a054c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a054e:	466b      	mov	r3, sp
 80a0550:	cb03      	ldmia	r3!, {r0, r1}
 80a0552:	f8cc 0005 	str.w	r0, [ip, #5]
 80a0556:	f8cc 1009 	str.w	r1, [ip, #9]
 80a055a:	7813      	ldrb	r3, [r2, #0]
 80a055c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0560:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0562:	f1b8 0f00 	cmp.w	r8, #0
 80a0566:	d00a      	beq.n	80a057e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0568:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a056c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0570:	0152      	lsls	r2, r2, #5
 80a0572:	f042 0206 	orr.w	r2, r2, #6
 80a0576:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a057a:	b2d2      	uxtb	r2, r2
 80a057c:	e000      	b.n	80a0580 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a057e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0580:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a0584:	b909      	cbnz	r1, 80a058a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a0586:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a058a:	b12f      	cbz	r7, 80a0598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a058c:	b916      	cbnz	r6, 80a0594 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a058e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0592:	e001      	b.n	80a0598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0594:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0598:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a059a:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a059c:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a059e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a05a0:	69e1      	ldr	r1, [r4, #28]
 80a05a2:	1212      	asrs	r2, r2, #8
 80a05a4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a05a6:	69e1      	ldr	r1, [r4, #28]
 80a05a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a05aa:	1c9a      	adds	r2, r3, #2
 80a05ac:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a05ae:	3303      	adds	r3, #3
 80a05b0:	69e2      	ldr	r2, [r4, #28]
 80a05b2:	4649      	mov	r1, r9
 80a05b4:	4620      	mov	r0, r4
 80a05b6:	f7ff ff56 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a05ba:	f1b8 0f00 	cmp.w	r8, #0
 80a05be:	d00b      	beq.n	80a05d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a05c0:	4603      	mov	r3, r0
 80a05c2:	69e2      	ldr	r2, [r4, #28]
 80a05c4:	4641      	mov	r1, r8
 80a05c6:	4620      	mov	r0, r4
 80a05c8:	f7ff ff4d 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a05cc:	69e2      	ldr	r2, [r4, #28]
 80a05ce:	4603      	mov	r3, r0
 80a05d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	f7ff ff47 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a05d8:	b167      	cbz	r7, 80a05f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a05da:	4603      	mov	r3, r0
 80a05dc:	69e2      	ldr	r2, [r4, #28]
 80a05de:	4639      	mov	r1, r7
 80a05e0:	4620      	mov	r0, r4
 80a05e2:	f7ff ff40 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a05e6:	b12e      	cbz	r6, 80a05f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a05e8:	4603      	mov	r3, r0
 80a05ea:	69e2      	ldr	r2, [r4, #28]
 80a05ec:	4631      	mov	r1, r6
 80a05ee:	4620      	mov	r0, r4
 80a05f0:	f7ff ff39 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a05f4:	1f43      	subs	r3, r0, #5
 80a05f6:	b29b      	uxth	r3, r3
 80a05f8:	69e2      	ldr	r2, [r4, #28]
 80a05fa:	2110      	movs	r1, #16
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	f7ff feeb 	bl	80a03d8 <_ZN4MQTT5writeEhPht>
 80a0602:	f000 f8f1 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0606:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a060a:	6260      	str	r0, [r4, #36]	; 0x24
 80a060c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a060e:	4620      	mov	r0, r4
 80a0610:	f000 fd2a 	bl	80a1068 <_ZN9TCPClient9availableEv>
 80a0614:	b940      	cbnz	r0, 80a0628 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a0616:	f000 f8e7 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a061a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a061c:	1ac0      	subs	r0, r0, r3
 80a061e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0620:	4373      	muls	r3, r6
 80a0622:	4298      	cmp	r0, r3
 80a0624:	d9f3      	bls.n	80a060e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a0626:	e00f      	b.n	80a0648 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0628:	4669      	mov	r1, sp
 80a062a:	4620      	mov	r0, r4
 80a062c:	f7ff fe7c 	bl	80a0328 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0630:	2804      	cmp	r0, #4
 80a0632:	d109      	bne.n	80a0648 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0634:	69e3      	ldr	r3, [r4, #28]
 80a0636:	78de      	ldrb	r6, [r3, #3]
 80a0638:	b936      	cbnz	r6, 80a0648 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a063a:	f000 f8d5 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a063e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0640:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0642:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a0646:	e004      	b.n	80a0652 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0648:	4620      	mov	r0, r4
 80a064a:	f000 fd4b 	bl	80a10e4 <_ZN9TCPClient4stopEv>
 80a064e:	e000      	b.n	80a0652 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0650:	2500      	movs	r5, #0
}
 80a0652:	4628      	mov	r0, r5
 80a0654:	b007      	add	sp, #28
 80a0656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a065a:	bf00      	nop
 80a065c:	080a1d0a 	.word	0x080a1d0a
 80a0660:	080a1d11 	.word	0x080a1d11

080a0664 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0666:	2304      	movs	r3, #4
 80a0668:	9305      	str	r3, [sp, #20]
 80a066a:	2301      	movs	r3, #1
 80a066c:	9304      	str	r3, [sp, #16]
 80a066e:	2300      	movs	r3, #0
 80a0670:	9303      	str	r3, [sp, #12]
 80a0672:	9302      	str	r3, [sp, #8]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	9300      	str	r3, [sp, #0]
 80a0678:	461a      	mov	r2, r3
 80a067a:	f7ff ff1d 	bl	80a04b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a067e:	b007      	add	sp, #28
 80a0680:	f85d fb04 	ldr.w	pc, [sp], #4

080a0684 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0684:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0688:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a068a:	4604      	mov	r4, r0
 80a068c:	468b      	mov	fp, r1
 80a068e:	4691      	mov	r9, r2
 80a0690:	469a      	mov	sl, r3
 80a0692:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0696:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a069a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a069e:	f7ff fefc 	bl	80a049a <_ZN4MQTT11isConnectedEv>
 80a06a2:	2800      	cmp	r0, #0
 80a06a4:	d04b      	beq.n	80a073e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a06a6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a06aa:	2100      	movs	r1, #0
 80a06ac:	69e0      	ldr	r0, [r4, #28]
 80a06ae:	f001 fa28 	bl	80a1b02 <memset>

        length = writeString(topic, buffer, length);
 80a06b2:	2305      	movs	r3, #5
 80a06b4:	69e2      	ldr	r2, [r4, #28]
 80a06b6:	4659      	mov	r1, fp
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	f7ff fed4 	bl	80a0466 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a06be:	1e6b      	subs	r3, r5, #1
 80a06c0:	2b01      	cmp	r3, #1
 80a06c2:	d812      	bhi.n	80a06ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a06c4:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a06c6:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a06c8:	3301      	adds	r3, #1
 80a06ca:	b29b      	uxth	r3, r3
 80a06cc:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a06ce:	121b      	asrs	r3, r3, #8
 80a06d0:	5413      	strb	r3, [r2, r0]
 80a06d2:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a06d4:	69e3      	ldr	r3, [r4, #28]
 80a06d6:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a06d8:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a06da:	3002      	adds	r0, #2
 80a06dc:	b280      	uxth	r0, r0
 80a06de:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a06e0:	b11e      	cbz	r6, 80a06ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a06e2:	8c23      	ldrh	r3, [r4, #32]
 80a06e4:	1c5a      	adds	r2, r3, #1
 80a06e6:	8422      	strh	r2, [r4, #32]
 80a06e8:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a06ea:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a06ec:	b291      	uxth	r1, r2
 80a06ee:	1883      	adds	r3, r0, r2
 80a06f0:	458a      	cmp	sl, r1
 80a06f2:	b29b      	uxth	r3, r3
 80a06f4:	d909      	bls.n	80a070a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a06f6:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a06fa:	3201      	adds	r2, #1
 80a06fc:	429e      	cmp	r6, r3
 80a06fe:	d904      	bls.n	80a070a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0700:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a0704:	69e1      	ldr	r1, [r4, #28]
 80a0706:	54ce      	strb	r6, [r1, r3]
 80a0708:	e7f0      	b.n	80a06ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a070a:	f1b8 0f00 	cmp.w	r8, #0
 80a070e:	bf0c      	ite	eq
 80a0710:	2130      	moveq	r1, #48	; 0x30
 80a0712:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a0714:	b10f      	cbz	r7, 80a071a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a0716:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a071a:	2d02      	cmp	r5, #2
 80a071c:	d102      	bne.n	80a0724 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a071e:	f041 0104 	orr.w	r1, r1, #4
 80a0722:	e003      	b.n	80a072c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a0724:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0726:	bf08      	it	eq
 80a0728:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a072c:	4620      	mov	r0, r4
 80a072e:	3b05      	subs	r3, #5
 80a0730:	69e2      	ldr	r2, [r4, #28]
 80a0732:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a0734:	b001      	add	sp, #4
 80a0736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a073a:	f7ff be4d 	b.w	80a03d8 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a073e:	b001      	add	sp, #4
 80a0740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0744 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0746:	9c08      	ldr	r4, [sp, #32]
 80a0748:	9403      	str	r4, [sp, #12]
 80a074a:	2400      	movs	r4, #0
 80a074c:	9402      	str	r4, [sp, #8]
 80a074e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0752:	9401      	str	r4, [sp, #4]
 80a0754:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0758:	9400      	str	r4, [sp, #0]
 80a075a:	f7ff ff93 	bl	80a0684 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a075e:	b004      	add	sp, #16
 80a0760:	bd10      	pop	{r4, pc}

080a0762 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0762:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0764:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0766:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0768:	460e      	mov	r6, r1
 80a076a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a076c:	f001 fa02 	bl	80a1b74 <strlen>
 80a0770:	2300      	movs	r3, #0
 80a0772:	9302      	str	r3, [sp, #8]
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	9300      	str	r3, [sp, #0]
 80a0778:	4622      	mov	r2, r4
 80a077a:	4603      	mov	r3, r0
 80a077c:	4631      	mov	r1, r6
 80a077e:	4628      	mov	r0, r5
 80a0780:	f7ff ffe0 	bl	80a0744 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0784:	b004      	add	sp, #16
 80a0786:	bd70      	pop	{r4, r5, r6, pc}

080a0788 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0788:	b510      	push	{r4, lr}
 80a078a:	4604      	mov	r4, r0
    if (isConnected()) {
 80a078c:	f7ff fe85 	bl	80a049a <_ZN4MQTT11isConnectedEv>
 80a0790:	b110      	cbz	r0, 80a0798 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a0792:	4620      	mov	r0, r4
 80a0794:	f7ff fe53 	bl	80a043e <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a0798:	69e0      	ldr	r0, [r4, #28]
 80a079a:	b108      	cbz	r0, 80a07a0 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a079c:	f7ff fc83 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a07a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a07a4:	f000 fa9a 	bl	80a0cdc <_ZN6StringD1Ev>
 80a07a8:	4620      	mov	r0, r4
 80a07aa:	f7ff fd49 	bl	80a0240 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	bd10      	pop	{r4, pc}

080a07b2 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a07b2:	f000 b821 	b.w	80a07f8 <HAL_Pin_Map>
	...

080a07b8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <os_mutex_create+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601d0 	.word	0x080601d0

080a07c8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601b8 	.word	0x080601b8

080a07d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <HAL_RNG_GetRandomNumber+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	685b      	ldr	r3, [r3, #4]
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	0806019c 	.word	0x0806019c

080a07e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	695b      	ldr	r3, [r3, #20]
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	0806019c 	.word	0x0806019c

080a07f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <HAL_Pin_Map+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	681b      	ldr	r3, [r3, #0]
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601b0 	.word	0x080601b0

080a0808 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <socket_active_status+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	681b      	ldr	r3, [r3, #0]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601bc 	.word	0x080601bc

080a0818 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <socket_handle_valid+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	685b      	ldr	r3, [r3, #4]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601bc 	.word	0x080601bc

080a0828 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <socket_create+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	689b      	ldr	r3, [r3, #8]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601bc 	.word	0x080601bc

080a0838 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <socket_connect+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	68db      	ldr	r3, [r3, #12]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601bc 	.word	0x080601bc

080a0848 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <socket_receive+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	691b      	ldr	r3, [r3, #16]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601bc 	.word	0x080601bc

080a0858 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <socket_close+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6a1b      	ldr	r3, [r3, #32]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601bc 	.word	0x080601bc

080a0868 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <socket_handle_invalid+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601bc 	.word	0x080601bc

080a0878 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <socket_send_ex+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601bc 	.word	0x080601bc

080a0888 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_SPI_Init+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	69db      	ldr	r3, [r3, #28]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601b4 	.word	0x080601b4

080a0898 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_USART_Init+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	699b      	ldr	r3, [r3, #24]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c4 	.word	0x080601c4

080a08a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_USART_Write_Data+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c4 	.word	0x080601c4

080a08b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_USART_Available_Data+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601c4 	.word	0x080601c4

080a08c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <HAL_USART_Read_Data+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601c4 	.word	0x080601c4

080a08d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <HAL_USART_Peek_Data+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601c4 	.word	0x080601c4

080a08e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <HAL_USART_Flush_Data+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601c4 	.word	0x080601c4

080a08f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <HAL_USART_Available_Data_For_Write+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601c4 	.word	0x080601c4

080a0908 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <HAL_USART_BeginConfig+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601c4 	.word	0x080601c4

080a0918 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <HAL_USB_USART_Init+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	681b      	ldr	r3, [r3, #0]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601d8 	.word	0x080601d8

080a0928 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <HAL_USB_USART_Begin+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	685b      	ldr	r3, [r3, #4]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601d8 	.word	0x080601d8

080a0938 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <HAL_USB_USART_Available_Data+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	691b      	ldr	r3, [r3, #16]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601d8 	.word	0x080601d8

080a0948 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	695b      	ldr	r3, [r3, #20]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601d8 	.word	0x080601d8

080a0958 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <HAL_USB_USART_Receive_Data+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	699b      	ldr	r3, [r3, #24]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601d8 	.word	0x080601d8

080a0968 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <HAL_USB_USART_Send_Data+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	69db      	ldr	r3, [r3, #28]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601d8 	.word	0x080601d8

080a0978 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <HAL_USB_USART_Flush_Data+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6a1b      	ldr	r3, [r3, #32]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601d8 	.word	0x080601d8

080a0988 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <HAL_USB_USART_Is_Enabled+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601d8 	.word	0x080601d8

080a0998 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <HAL_NET_SetNetWatchDog+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c0 	.word	0x080601c0

080a09a8 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <inet_gethostbyname+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601c0 	.word	0x080601c0

080a09b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <log_message+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080201a8 	.word	0x080201a8

080a09c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <set_system_mode+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	685b      	ldr	r3, [r3, #4]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601a4 	.word	0x080601a4

080a09d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <system_delay_ms+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	695b      	ldr	r3, [r3, #20]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601a4 	.word	0x080601a4

080a09e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b03      	ldr	r3, [pc, #12]	; (80a09f8 <system_ctrl_set_app_request_handler+0x10>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a09f2:	9301      	str	r3, [sp, #4]
 80a09f4:	bd08      	pop	{r3, pc}
 80a09f6:	0000      	.short	0x0000
 80a09f8:	080601a4 	.word	0x080601a4

080a09fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b03      	ldr	r3, [pc, #12]	; (80a0a0c <system_ctrl_set_result+0x10>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0a06:	9301      	str	r3, [sp, #4]
 80a0a08:	bd08      	pop	{r3, pc}
 80a0a0a:	0000      	.short	0x0000
 80a0a0c:	080601a4 	.word	0x080601a4

080a0a10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601cc 	.word	0x080601cc

080a0a20 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <network_ready+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	691b      	ldr	r3, [r3, #16]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601c8 	.word	0x080601c8

080a0a30 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <malloc+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	681b      	ldr	r3, [r3, #0]
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601a0 	.word	0x080601a0

080a0a40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <free+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	685b      	ldr	r3, [r3, #4]
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601a0 	.word	0x080601a0

080a0a50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <realloc+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	689b      	ldr	r3, [r3, #8]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601a0 	.word	0x080601a0

080a0a60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a60:	2100      	movs	r1, #0
 80a0a62:	f7ff bfb9 	b.w	80a09d8 <system_delay_ms>

080a0a66 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a66:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a68:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a6a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a6c:	b113      	cbz	r3, 80a0a74 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a6e:	2203      	movs	r2, #3
 80a0a70:	4601      	mov	r1, r0
 80a0a72:	4798      	blx	r3
    }
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	bd10      	pop	{r4, pc}

080a0a78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0a78:	4770      	bx	lr

080a0a7a <_ZN9IPAddressD0Ev>:
 80a0a7a:	b510      	push	{r4, lr}
 80a0a7c:	4604      	mov	r4, r0
 80a0a7e:	f7ff fb10 	bl	80a00a2 <_ZdlPv>
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	bd10      	pop	{r4, pc}

080a0a86 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a88:	460f      	mov	r7, r1
 80a0a8a:	f100 0608 	add.w	r6, r0, #8
 80a0a8e:	1d05      	adds	r5, r0, #4
 80a0a90:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0a96:	220a      	movs	r2, #10
 80a0a98:	4638      	mov	r0, r7
 80a0a9a:	f000 f8c0 	bl	80a0c1e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a9e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0aa0:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0aa2:	d007      	beq.n	80a0ab4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0aa4:	2c00      	cmp	r4, #0
 80a0aa6:	d0f4      	beq.n	80a0a92 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0aa8:	212e      	movs	r1, #46	; 0x2e
 80a0aaa:	4638      	mov	r0, r7
 80a0aac:	f000 f874 	bl	80a0b98 <_ZN5Print5printEc>
 80a0ab0:	4404      	add	r4, r0
 80a0ab2:	e7ee      	b.n	80a0a92 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0ab4:	4620      	mov	r0, r4
 80a0ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ab8 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a0ab8:	b510      	push	{r4, lr}
 80a0aba:	4604      	mov	r4, r0
 80a0abc:	4b04      	ldr	r3, [pc, #16]	; (80a0ad0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0abe:	2211      	movs	r2, #17
 80a0ac0:	f840 3b04 	str.w	r3, [r0], #4
 80a0ac4:	2100      	movs	r1, #0
 80a0ac6:	f001 f81c 	bl	80a1b02 <memset>
{
    clear();
}
 80a0aca:	4620      	mov	r0, r4
 80a0acc:	bd10      	pop	{r4, pc}
 80a0ace:	bf00      	nop
 80a0ad0:	080a1d24 	.word	0x080a1d24

080a0ad4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0ad4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ad6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0ada:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0ade:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0ae2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0ae6:	2304      	movs	r3, #4
 80a0ae8:	6041      	str	r1, [r0, #4]
 80a0aea:	7503      	strb	r3, [r0, #20]
 80a0aec:	bd10      	pop	{r4, pc}
	...

080a0af0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0af2:	4d04      	ldr	r5, [pc, #16]	; (80a0b04 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0af4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0af6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0afa:	9500      	str	r5, [sp, #0]
 80a0afc:	f7ff ffea 	bl	80a0ad4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b00:	b003      	add	sp, #12
 80a0b02:	bd30      	pop	{r4, r5, pc}
 80a0b04:	080a1d24 	.word	0x080a1d24

080a0b08 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0b0a:	780d      	ldrb	r5, [r1, #0]
 80a0b0c:	788b      	ldrb	r3, [r1, #2]
 80a0b0e:	784a      	ldrb	r2, [r1, #1]
 80a0b10:	78c9      	ldrb	r1, [r1, #3]
 80a0b12:	9100      	str	r1, [sp, #0]
 80a0b14:	4629      	mov	r1, r5
 80a0b16:	f7ff ffdd 	bl	80a0ad4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0b1a:	b003      	add	sp, #12
 80a0b1c:	bd30      	pop	{r4, r5, pc}
	...

080a0b20 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a0b20:	b510      	push	{r4, lr}
 80a0b22:	4604      	mov	r4, r0
 80a0b24:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <_ZN9IPAddressC1EPKh+0x10>)
 80a0b26:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a0b28:	f7ff ffee 	bl	80a0b08 <_ZN9IPAddressaSEPKh>
}
 80a0b2c:	4620      	mov	r0, r4
 80a0b2e:	bd10      	pop	{r4, pc}
 80a0b30:	080a1d24 	.word	0x080a1d24

080a0b34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b34:	4a01      	ldr	r2, [pc, #4]	; (80a0b3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b38:	601a      	str	r2, [r3, #0]
 80a0b3a:	4770      	bx	lr
 80a0b3c:	080a1deb 	.word	0x080a1deb
 80a0b40:	200003cc 	.word	0x200003cc

080a0b44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b46:	4606      	mov	r6, r0
 80a0b48:	460d      	mov	r5, r1
 80a0b4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0b4c:	2400      	movs	r4, #0
  while (size--) {
 80a0b4e:	42bd      	cmp	r5, r7
 80a0b50:	d00c      	beq.n	80a0b6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b52:	6833      	ldr	r3, [r6, #0]
 80a0b54:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0b58:	689b      	ldr	r3, [r3, #8]
 80a0b5a:	4630      	mov	r0, r6
 80a0b5c:	4798      	blx	r3
     if (chunk>=0)
 80a0b5e:	2800      	cmp	r0, #0
 80a0b60:	db01      	blt.n	80a0b66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0b62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0b64:	e7f3      	b.n	80a0b4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0b66:	2c00      	cmp	r4, #0
 80a0b68:	bf08      	it	eq
 80a0b6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0b70:	b570      	push	{r4, r5, r6, lr}
 80a0b72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0b74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0b76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0b78:	b149      	cbz	r1, 80a0b8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0b7a:	f000 fffb 	bl	80a1b74 <strlen>
 80a0b7e:	682b      	ldr	r3, [r5, #0]
 80a0b80:	4602      	mov	r2, r0
 80a0b82:	4621      	mov	r1, r4
 80a0b84:	4628      	mov	r0, r5
    }
 80a0b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0b8a:	68db      	ldr	r3, [r3, #12]
 80a0b8c:	4718      	bx	r3
    }
 80a0b8e:	bd70      	pop	{r4, r5, r6, pc}

080a0b90 <_ZN5Print5printEPKc>:
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	f7ff ffed 	bl	80a0b70 <_ZN5Print5writeEPKc>
 80a0b96:	bd08      	pop	{r3, pc}

080a0b98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0b98:	6803      	ldr	r3, [r0, #0]
 80a0b9a:	689b      	ldr	r3, [r3, #8]
 80a0b9c:	4718      	bx	r3

080a0b9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0ba0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0ba2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0ba4:	f7ff fff8 	bl	80a0b98 <_ZN5Print5printEc>
  n += print('\n');
 80a0ba8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0baa:	4604      	mov	r4, r0
  n += print('\n');
 80a0bac:	4628      	mov	r0, r5
 80a0bae:	f7ff fff3 	bl	80a0b98 <_ZN5Print5printEc>
  return n;
}
 80a0bb2:	4420      	add	r0, r4
 80a0bb4:	bd38      	pop	{r3, r4, r5, pc}

080a0bb6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0bb6:	b538      	push	{r3, r4, r5, lr}
 80a0bb8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0bba:	f7ff ffd9 	bl	80a0b70 <_ZN5Print5writeEPKc>
 80a0bbe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0bc0:	4628      	mov	r0, r5
 80a0bc2:	f7ff ffec 	bl	80a0b9e <_ZN5Print7printlnEv>
  return n;
}
 80a0bc6:	4420      	add	r0, r4
 80a0bc8:	bd38      	pop	{r3, r4, r5, pc}

080a0bca <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0bca:	2a01      	cmp	r2, #1
 80a0bcc:	bf98      	it	ls
 80a0bce:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0bd0:	b530      	push	{r4, r5, lr}
 80a0bd2:	460b      	mov	r3, r1
 80a0bd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0bdc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0be0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0be4:	fb05 3312 	mls	r3, r5, r2, r3
 80a0be8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0bea:	2b09      	cmp	r3, #9
 80a0bec:	bf94      	ite	ls
 80a0bee:	3330      	addls	r3, #48	; 0x30
 80a0bf0:	3337      	addhi	r3, #55	; 0x37
 80a0bf2:	b2db      	uxtb	r3, r3
 80a0bf4:	4621      	mov	r1, r4
 80a0bf6:	f804 3901 	strb.w	r3, [r4], #-1
 80a0bfa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0bfc:	2d00      	cmp	r5, #0
 80a0bfe:	d1ef      	bne.n	80a0be0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0c00:	f7ff ffb6 	bl	80a0b70 <_ZN5Print5writeEPKc>
}
 80a0c04:	b00b      	add	sp, #44	; 0x2c
 80a0c06:	bd30      	pop	{r4, r5, pc}

080a0c08 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0c08:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0c0a:	b922      	cbnz	r2, 80a0c16 <_ZN5Print5printEmi+0xe>
 80a0c0c:	6803      	ldr	r3, [r0, #0]
 80a0c0e:	b2c9      	uxtb	r1, r1
 80a0c10:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0c12:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0c14:	4718      	bx	r3
  else return printNumber(n, base);
 80a0c16:	b2d2      	uxtb	r2, r2
}
 80a0c18:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0c1a:	f7ff bfd6 	b.w	80a0bca <_ZN5Print11printNumberEmh>

080a0c1e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0c1e:	f7ff bff3 	b.w	80a0c08 <_ZN5Print5printEmi>

080a0c22 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c26:	4607      	mov	r7, r0
 80a0c28:	460e      	mov	r6, r1
  if (base == 0) {
 80a0c2a:	4615      	mov	r5, r2
 80a0c2c:	b92a      	cbnz	r2, 80a0c3a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0c32:	6803      	ldr	r3, [r0, #0]
 80a0c34:	b2c9      	uxtb	r1, r1
 80a0c36:	689b      	ldr	r3, [r3, #8]
 80a0c38:	4718      	bx	r3
  } else if (base == 10) {
 80a0c3a:	2a0a      	cmp	r2, #10
 80a0c3c:	d102      	bne.n	80a0c44 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0c3e:	2900      	cmp	r1, #0
 80a0c40:	da01      	bge.n	80a0c46 <_ZN5Print5printEli+0x24>
 80a0c42:	e004      	b.n	80a0c4e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0c44:	b2d2      	uxtb	r2, r2
  }
}
 80a0c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0c4a:	f7ff bfbe 	b.w	80a0bca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0c4e:	212d      	movs	r1, #45	; 0x2d
 80a0c50:	f7ff ffa2 	bl	80a0b98 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0c54:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0c56:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0c58:	4271      	negs	r1, r6
 80a0c5a:	4638      	mov	r0, r7
 80a0c5c:	f7ff ffb5 	bl	80a0bca <_ZN5Print11printNumberEmh>
 80a0c60:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0c66 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
 80a0c66:	b538      	push	{r3, r4, r5, lr}
 80a0c68:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a0c6a:	f7ff ffda 	bl	80a0c22 <_ZN5Print5printEli>
 80a0c6e:	4604      	mov	r4, r0
  n += println();
 80a0c70:	4628      	mov	r0, r5
 80a0c72:	f7ff ff94 	bl	80a0b9e <_ZN5Print7printlnEv>
  return n;
}
 80a0c76:	4420      	add	r0, r4
 80a0c78:	bd38      	pop	{r3, r4, r5, pc}

080a0c7a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0c7a:	b510      	push	{r4, lr}
 80a0c7c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c7e:	f7ff fef2 	bl	80a0a66 <_ZNSt14_Function_baseD1Ev>
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	bd10      	pop	{r4, pc}
	...

080a0c88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c88:	4803      	ldr	r0, [pc, #12]	; (80a0c98 <_GLOBAL__sub_I_RGB+0x10>)
 80a0c8a:	2300      	movs	r3, #0
 80a0c8c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0c8e:	4a03      	ldr	r2, [pc, #12]	; (80a0c9c <_GLOBAL__sub_I_RGB+0x14>)
 80a0c90:	4903      	ldr	r1, [pc, #12]	; (80a0ca0 <_GLOBAL__sub_I_RGB+0x18>)
 80a0c92:	f000 bdcb 	b.w	80a182c <__aeabi_atexit>
 80a0c96:	bf00      	nop
 80a0c98:	200003d0 	.word	0x200003d0
 80a0c9c:	20000370 	.word	0x20000370
 80a0ca0:	080a0c7b 	.word	0x080a0c7b

080a0ca4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0ca4:	4770      	bx	lr

080a0ca6 <_ZN8SPIClassD0Ev>:
 80a0ca6:	b510      	push	{r4, lr}
 80a0ca8:	4604      	mov	r4, r0
 80a0caa:	f7ff f9fa 	bl	80a00a2 <_ZdlPv>
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	bd10      	pop	{r4, pc}
	...

080a0cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0cb4:	b570      	push	{r4, r5, r6, lr}
 80a0cb6:	4604      	mov	r4, r0
 80a0cb8:	460e      	mov	r6, r1
 80a0cba:	4b07      	ldr	r3, [pc, #28]	; (80a0cd8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0cbc:	2500      	movs	r5, #0
 80a0cbe:	6003      	str	r3, [r0, #0]
 80a0cc0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0cc4:	f7ff fd78 	bl	80a07b8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0cc8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0cca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0ccc:	f7ff fddc 	bl	80a0888 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0cd0:	60a5      	str	r5, [r4, #8]
}
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	bd70      	pop	{r4, r5, r6, pc}
 80a0cd6:	bf00      	nop
 80a0cd8:	080a1e1c 	.word	0x080a1e1c

080a0cdc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0cdc:	b510      	push	{r4, lr}
 80a0cde:	4604      	mov	r4, r0
{
	free(buffer);
 80a0ce0:	6800      	ldr	r0, [r0, #0]
 80a0ce2:	f7ff fead 	bl	80a0a40 <free>
}
 80a0ce6:	4620      	mov	r0, r4
 80a0ce8:	bd10      	pop	{r4, pc}

080a0cea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0cea:	b510      	push	{r4, lr}
 80a0cec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0cee:	6800      	ldr	r0, [r0, #0]
 80a0cf0:	b108      	cbz	r0, 80a0cf6 <_ZN6String10invalidateEv+0xc>
 80a0cf2:	f7ff fea5 	bl	80a0a40 <free>
	buffer = NULL;
 80a0cf6:	2300      	movs	r3, #0
 80a0cf8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0cfa:	60a3      	str	r3, [r4, #8]
 80a0cfc:	6063      	str	r3, [r4, #4]
 80a0cfe:	bd10      	pop	{r4, pc}

080a0d00 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0d00:	b538      	push	{r3, r4, r5, lr}
 80a0d02:	4604      	mov	r4, r0
 80a0d04:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0d06:	6800      	ldr	r0, [r0, #0]
 80a0d08:	3101      	adds	r1, #1
 80a0d0a:	f7ff fea1 	bl	80a0a50 <realloc>
	if (newbuffer) {
 80a0d0e:	b110      	cbz	r0, 80a0d16 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0d10:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0d14:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0d16:	bd38      	pop	{r3, r4, r5, pc}

080a0d18 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d18:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0d1a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d1c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0d1e:	b113      	cbz	r3, 80a0d26 <_ZN6String7reserveEj+0xe>
 80a0d20:	6843      	ldr	r3, [r0, #4]
 80a0d22:	428b      	cmp	r3, r1
 80a0d24:	d207      	bcs.n	80a0d36 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0d26:	4620      	mov	r0, r4
 80a0d28:	f7ff ffea 	bl	80a0d00 <_ZN6String12changeBufferEj>
 80a0d2c:	b120      	cbz	r0, 80a0d38 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0d2e:	68a3      	ldr	r3, [r4, #8]
 80a0d30:	b90b      	cbnz	r3, 80a0d36 <_ZN6String7reserveEj+0x1e>
 80a0d32:	6822      	ldr	r2, [r4, #0]
 80a0d34:	7013      	strb	r3, [r2, #0]
 80a0d36:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0d38:	bd10      	pop	{r4, pc}

080a0d3a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d3a:	b570      	push	{r4, r5, r6, lr}
 80a0d3c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0d3e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d40:	4604      	mov	r4, r0
 80a0d42:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0d44:	f7ff ffe8 	bl	80a0d18 <_ZN6String7reserveEj>
 80a0d48:	b918      	cbnz	r0, 80a0d52 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0d4a:	4620      	mov	r0, r4
 80a0d4c:	f7ff ffcd 	bl	80a0cea <_ZN6String10invalidateEv>
		return *this;
 80a0d50:	e009      	b.n	80a0d66 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0d52:	462a      	mov	r2, r5
 80a0d54:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0d56:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0d58:	6820      	ldr	r0, [r4, #0]
 80a0d5a:	f000 fec7 	bl	80a1aec <memcpy>
	buffer[len] = 0;
 80a0d5e:	6822      	ldr	r2, [r4, #0]
 80a0d60:	68a3      	ldr	r3, [r4, #8]
 80a0d62:	2100      	movs	r1, #0
 80a0d64:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	bd70      	pop	{r4, r5, r6, pc}

080a0d6a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d6a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d6c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d6e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d70:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0d72:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0d74:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0d76:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0d78:	460d      	mov	r5, r1
 80a0d7a:	b139      	cbz	r1, 80a0d8c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0d7c:	4608      	mov	r0, r1
 80a0d7e:	f000 fef9 	bl	80a1b74 <strlen>
 80a0d82:	4629      	mov	r1, r5
 80a0d84:	4602      	mov	r2, r0
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	f7ff ffd7 	bl	80a0d3a <_ZN6String4copyEPKcj>
}
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	bd38      	pop	{r3, r4, r5, pc}

080a0d90 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0d90:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0d92:	b510      	push	{r4, lr}
 80a0d94:	460b      	mov	r3, r1
 80a0d96:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0d98:	d007      	beq.n	80a0daa <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0d9a:	6809      	ldr	r1, [r1, #0]
 80a0d9c:	b119      	cbz	r1, 80a0da6 <_ZN6StringaSERKS_+0x16>
 80a0d9e:	689a      	ldr	r2, [r3, #8]
 80a0da0:	f7ff ffcb 	bl	80a0d3a <_ZN6String4copyEPKcj>
 80a0da4:	e001      	b.n	80a0daa <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0da6:	f7ff ffa0 	bl	80a0cea <_ZN6String10invalidateEv>

	return *this;
}
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	bd10      	pop	{r4, pc}

080a0dae <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0dae:	b510      	push	{r4, lr}
 80a0db0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0db2:	2300      	movs	r3, #0
 80a0db4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0db6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0db8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0dba:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0dbc:	f7ff ffe8 	bl	80a0d90 <_ZN6StringaSERKS_>
}
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	bd10      	pop	{r4, pc}

080a0dc4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0dc4:	b538      	push	{r3, r4, r5, lr}
 80a0dc6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0dc8:	460c      	mov	r4, r1
 80a0dca:	b141      	cbz	r1, 80a0dde <_ZN6StringaSEPKc+0x1a>
 80a0dcc:	4608      	mov	r0, r1
 80a0dce:	f000 fed1 	bl	80a1b74 <strlen>
 80a0dd2:	4621      	mov	r1, r4
 80a0dd4:	4602      	mov	r2, r0
 80a0dd6:	4628      	mov	r0, r5
 80a0dd8:	f7ff ffaf 	bl	80a0d3a <_ZN6String4copyEPKcj>
 80a0ddc:	e001      	b.n	80a0de2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0dde:	f7ff ff84 	bl	80a0cea <_ZN6String10invalidateEv>

	return *this;
}
 80a0de2:	4628      	mov	r0, r5
 80a0de4:	bd38      	pop	{r3, r4, r5, pc}

080a0de6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a0de6:	b570      	push	{r4, r5, r6, lr}
 80a0de8:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a0dea:	460e      	mov	r6, r1
 80a0dec:	b909      	cbnz	r1, 80a0df2 <_ZN6String6concatEPKcj+0xc>
 80a0dee:	2000      	movs	r0, #0
 80a0df0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0df2:	b16a      	cbz	r2, 80a0e10 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a0df4:	6883      	ldr	r3, [r0, #8]
 80a0df6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a0df8:	4629      	mov	r1, r5
 80a0dfa:	f7ff ff8d 	bl	80a0d18 <_ZN6String7reserveEj>
 80a0dfe:	2800      	cmp	r0, #0
 80a0e00:	d0f5      	beq.n	80a0dee <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0e02:	6820      	ldr	r0, [r4, #0]
 80a0e04:	68a3      	ldr	r3, [r4, #8]
 80a0e06:	4631      	mov	r1, r6
 80a0e08:	4418      	add	r0, r3
 80a0e0a:	f000 feab 	bl	80a1b64 <strcpy>
	len = newlen;
 80a0e0e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a0e10:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0e12:	bd70      	pop	{r4, r5, r6, pc}

080a0e14 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a0e14:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a0e16:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a0e18:	4604      	mov	r4, r0
 80a0e1a:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 80a0e1c:	4669      	mov	r1, sp
 80a0e1e:	f000 fc18 	bl	80a1652 <itoa>
	return concat(buf, strlen(buf));
 80a0e22:	4668      	mov	r0, sp
 80a0e24:	f000 fea6 	bl	80a1b74 <strlen>
 80a0e28:	4669      	mov	r1, sp
 80a0e2a:	4602      	mov	r2, r0
 80a0e2c:	4620      	mov	r0, r4
 80a0e2e:	f7ff ffda 	bl	80a0de6 <_ZN6String6concatEPKcj>
}
 80a0e32:	b002      	add	sp, #8
 80a0e34:	bd10      	pop	{r4, pc}

080a0e36 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0e36:	6800      	ldr	r0, [r0, #0]
 80a0e38:	b108      	cbz	r0, 80a0e3e <_ZNK6String5toIntEv+0x8>
 80a0e3a:	f000 be45 	b.w	80a1ac8 <atol>
	return 0;
}
 80a0e3e:	4770      	bx	lr

080a0e40 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0e40:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e46:	4c0d      	ldr	r4, [pc, #52]	; (80a0e7c <_GLOBAL__sub_I_System+0x3c>)
 80a0e48:	2500      	movs	r5, #0
 80a0e4a:	8063      	strh	r3, [r4, #2]
 80a0e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e50:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0e52:	80a3      	strh	r3, [r4, #4]
 80a0e54:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e56:	f7ff fdb7 	bl	80a09c8 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0e5a:	a802      	add	r0, sp, #8
 80a0e5c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0e60:	462a      	mov	r2, r5
 80a0e62:	4629      	mov	r1, r5
 80a0e64:	f7ff fcb0 	bl	80a07c8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0e68:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0e6a:	2b1e      	cmp	r3, #30
 80a0e6c:	d104      	bne.n	80a0e78 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0e6e:	2303      	movs	r3, #3
 80a0e70:	7023      	strb	r3, [r4, #0]
 80a0e72:	2311      	movs	r3, #17
 80a0e74:	8065      	strh	r5, [r4, #2]
 80a0e76:	80a3      	strh	r3, [r4, #4]
 80a0e78:	b003      	add	sp, #12
 80a0e7a:	bd30      	pop	{r4, r5, pc}
 80a0e7c:	200003e0 	.word	0x200003e0

080a0e80 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e82:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0e84:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0e86:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0e8a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0e8c:	2201      	movs	r2, #1
 80a0e8e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0e92:	4621      	mov	r1, r4
 80a0e94:	47a8      	blx	r5
}
 80a0e96:	b003      	add	sp, #12
 80a0e98:	bd30      	pop	{r4, r5, pc}

080a0e9a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a0e9a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0e9c:	6803      	ldr	r3, [r0, #0]
 80a0e9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0ea0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0ea4:	46a4      	mov	ip, r4
}
 80a0ea6:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ea8:	4760      	bx	ip

080a0eaa <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0eaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eac:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a0eae:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0eb0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a0eb4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0eb6:	4621      	mov	r1, r4
 80a0eb8:	4613      	mov	r3, r2
 80a0eba:	2201      	movs	r2, #1
 80a0ebc:	47a8      	blx	r5
}
 80a0ebe:	b003      	add	sp, #12
 80a0ec0:	bd30      	pop	{r4, r5, pc}

080a0ec2 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a0ec2:	4770      	bx	lr

080a0ec4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0ec4:	4770      	bx	lr

080a0ec6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a0ec6:	2000      	movs	r0, #0
 80a0ec8:	4770      	bx	lr

080a0eca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0eca:	b510      	push	{r4, lr}
 80a0ecc:	4604      	mov	r4, r0
 80a0ece:	f7ff f8e8 	bl	80a00a2 <_ZdlPv>
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	bd10      	pop	{r4, pc}

080a0ed6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0ed6:	f7ff b8e4 	b.w	80a00a2 <_ZdlPv>
	...

080a0edc <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0ee0:	461f      	mov	r7, r3
    stop();
 80a0ee2:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0ee4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a0ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0ee8:	4606      	mov	r6, r0
 80a0eea:	460c      	mov	r4, r1
 80a0eec:	4690      	mov	r8, r2
    stop();
 80a0eee:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a0ef0:	4b13      	ldr	r3, [pc, #76]	; (80a0f40 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a0ef2:	6818      	ldr	r0, [r3, #0]
 80a0ef4:	6803      	ldr	r3, [r0, #0]
 80a0ef6:	681b      	ldr	r3, [r3, #0]
 80a0ef8:	4798      	blx	r3
 80a0efa:	b1f0      	cbz	r0, 80a0f3a <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a0efc:	a802      	add	r0, sp, #8
 80a0efe:	f7ff fddb 	bl	80a0ab8 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a0f02:	4620      	mov	r0, r4
 80a0f04:	f000 fe36 	bl	80a1b74 <strlen>
 80a0f08:	2300      	movs	r3, #0
 80a0f0a:	9300      	str	r3, [sp, #0]
 80a0f0c:	b281      	uxth	r1, r0
 80a0f0e:	463b      	mov	r3, r7
 80a0f10:	aa03      	add	r2, sp, #12
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	f7ff fd48 	bl	80a09a8 <inet_gethostbyname>
 80a0f18:	b978      	cbnz	r0, 80a0f3a <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a0f1a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f1c:	ad09      	add	r5, sp, #36	; 0x24
 80a0f1e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a0f22:	4b08      	ldr	r3, [pc, #32]	; (80a0f44 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a0f24:	ac03      	add	r4, sp, #12
 80a0f26:	9308      	str	r3, [sp, #32]
 80a0f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0f2c:	6823      	ldr	r3, [r4, #0]
 80a0f2e:	4642      	mov	r2, r8
 80a0f30:	702b      	strb	r3, [r5, #0]
 80a0f32:	a908      	add	r1, sp, #32
 80a0f34:	463b      	mov	r3, r7
 80a0f36:	4630      	mov	r0, r6
 80a0f38:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a0f3a:	b00f      	add	sp, #60	; 0x3c
 80a0f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0f40:	080a1f3c 	.word	0x080a1f3c
 80a0f44:	080a1d24 	.word	0x080a1d24

080a0f48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0f48:	b510      	push	{r4, lr}
 80a0f4a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0f4c:	6803      	ldr	r3, [r0, #0]
 80a0f4e:	689b      	ldr	r3, [r3, #8]
 80a0f50:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0f52:	68a3      	ldr	r3, [r4, #8]
 80a0f54:	3b01      	subs	r3, #1
 80a0f56:	60a3      	str	r3, [r4, #8]
 80a0f58:	b92b      	cbnz	r3, 80a0f66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a0f5a:	6823      	ldr	r3, [r4, #0]
 80a0f5c:	4620      	mov	r0, r4
        }
    }
 80a0f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0f62:	68db      	ldr	r3, [r3, #12]
 80a0f64:	4718      	bx	r3
 80a0f66:	bd10      	pop	{r4, pc}

080a0f68 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a0f68:	b570      	push	{r4, r5, r6, lr}
 80a0f6a:	4604      	mov	r4, r0
 80a0f6c:	4606      	mov	r6, r0
 80a0f6e:	694d      	ldr	r5, [r1, #20]
 80a0f70:	4b04      	ldr	r3, [pc, #16]	; (80a0f84 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a0f72:	358c      	adds	r5, #140	; 0x8c
 80a0f74:	f844 3b04 	str.w	r3, [r4], #4
 80a0f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f7c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a0f7e:	4630      	mov	r0, r6
 80a0f80:	7023      	strb	r3, [r4, #0]
 80a0f82:	bd70      	pop	{r4, r5, r6, pc}
 80a0f84:	080a1d24 	.word	0x080a1d24

080a0f88 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a0f88:	b510      	push	{r4, lr}
 80a0f8a:	6943      	ldr	r3, [r0, #20]
 80a0f8c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0f8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0f92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0f96:	429a      	cmp	r2, r3
 80a0f98:	d005      	beq.n	80a0fa6 <_ZN9TCPClient4peekEv+0x1e>
 80a0f9a:	6962      	ldr	r2, [r4, #20]
 80a0f9c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0fa0:	4413      	add	r3, r2
 80a0fa2:	7918      	ldrb	r0, [r3, #4]
 80a0fa4:	bd10      	pop	{r4, pc}
 80a0fa6:	6803      	ldr	r3, [r0, #0]
 80a0fa8:	691b      	ldr	r3, [r3, #16]
 80a0faa:	4798      	blx	r3
 80a0fac:	2800      	cmp	r0, #0
 80a0fae:	d1f4      	bne.n	80a0f9a <_ZN9TCPClient4peekEv+0x12>
 80a0fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0fb4:	bd10      	pop	{r4, pc}

080a0fb6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a0fb6:	b510      	push	{r4, lr}
 80a0fb8:	6943      	ldr	r3, [r0, #20]
 80a0fba:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a0fbc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0fc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0fc4:	429a      	cmp	r2, r3
 80a0fc6:	d008      	beq.n	80a0fda <_ZN9TCPClient4readEv+0x24>
 80a0fc8:	6962      	ldr	r2, [r4, #20]
 80a0fca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0fce:	1c59      	adds	r1, r3, #1
 80a0fd0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a0fd4:	4413      	add	r3, r2
 80a0fd6:	7918      	ldrb	r0, [r3, #4]
 80a0fd8:	bd10      	pop	{r4, pc}
 80a0fda:	6803      	ldr	r3, [r0, #0]
 80a0fdc:	691b      	ldr	r3, [r3, #16]
 80a0fde:	4798      	blx	r3
 80a0fe0:	2800      	cmp	r0, #0
 80a0fe2:	d1f1      	bne.n	80a0fc8 <_ZN9TCPClient4readEv+0x12>
 80a0fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0fe8:	bd10      	pop	{r4, pc}

080a0fea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a0fea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a0fec:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a0fee:	6820      	ldr	r0, [r4, #0]
 80a0ff0:	f7ff fc12 	bl	80a0818 <socket_handle_valid>
 80a0ff4:	b110      	cbz	r0, 80a0ffc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a0ff6:	6820      	ldr	r0, [r4, #0]
 80a0ff8:	f7ff fc2e 	bl	80a0858 <socket_close>
 80a0ffc:	4620      	mov	r0, r4
 80a0ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1002:	f7ff b84e 	b.w	80a00a2 <_ZdlPv>

080a1006 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1008:	6943      	ldr	r3, [r0, #20]
 80a100a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a100c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1010:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1014:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1016:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1018:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a101a:	d106      	bne.n	80a102a <_ZN9TCPClient4readEPhj+0x24>
 80a101c:	6803      	ldr	r3, [r0, #0]
 80a101e:	691b      	ldr	r3, [r3, #16]
 80a1020:	4798      	blx	r3
 80a1022:	b910      	cbnz	r0, 80a102a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1028:	e014      	b.n	80a1054 <_ZN9TCPClient4readEPhj+0x4e>
 80a102a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a102c:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a102e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1032:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1036:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1038:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a103a:	42bc      	cmp	r4, r7
 80a103c:	bf28      	it	cs
 80a103e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1040:	3104      	adds	r1, #4
 80a1042:	4622      	mov	r2, r4
 80a1044:	f000 fd52 	bl	80a1aec <memcpy>
 80a1048:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a104a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a104e:	4423      	add	r3, r4
 80a1050:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1054:	4620      	mov	r0, r4
 80a1056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1058 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1058:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a105a:	2300      	movs	r3, #0
 80a105c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1060:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1062:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1066:	4770      	bx	lr

080a1068 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1068:	b538      	push	{r3, r4, r5, lr}
 80a106a:	6942      	ldr	r2, [r0, #20]
 80a106c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a106e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1072:	b11b      	cbz	r3, 80a107c <_ZN9TCPClient9availableEv+0x14>
 80a1074:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1078:	429a      	cmp	r2, r3
 80a107a:	d00b      	beq.n	80a1094 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a107c:	4b18      	ldr	r3, [pc, #96]	; (80a10e0 <_ZN9TCPClient9availableEv+0x78>)
 80a107e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1080:	6803      	ldr	r3, [r0, #0]
 80a1082:	681b      	ldr	r3, [r3, #0]
 80a1084:	4798      	blx	r3
 80a1086:	b318      	cbz	r0, 80a10d0 <_ZN9TCPClient9availableEv+0x68>
 80a1088:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a108a:	6818      	ldr	r0, [r3, #0]
 80a108c:	f7ff fbc4 	bl	80a0818 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1090:	b918      	cbnz	r0, 80a109a <_ZN9TCPClient9availableEv+0x32>
 80a1092:	e01d      	b.n	80a10d0 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1094:	f7ff ffe0 	bl	80a1058 <_ZN9TCPClient12flush_bufferEv>
 80a1098:	e7f0      	b.n	80a107c <_ZN9TCPClient9availableEv+0x14>
 80a109a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a109c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a10a0:	297f      	cmp	r1, #127	; 0x7f
 80a10a2:	d815      	bhi.n	80a10d0 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a10a4:	1d05      	adds	r5, r0, #4
 80a10a6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a10aa:	2300      	movs	r3, #0
 80a10ac:	4429      	add	r1, r5
 80a10ae:	6800      	ldr	r0, [r0, #0]
 80a10b0:	f7ff fbca 	bl	80a0848 <socket_receive>
            if (ret > 0)
 80a10b4:	2800      	cmp	r0, #0
 80a10b6:	dd0b      	ble.n	80a10d0 <_ZN9TCPClient9availableEv+0x68>
 80a10b8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a10ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a10be:	b90a      	cbnz	r2, 80a10c4 <_ZN9TCPClient9availableEv+0x5c>
 80a10c0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a10c4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a10c6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a10ca:	4418      	add	r0, r3
 80a10cc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a10d0:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a10d2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a10d6:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a10da:	1a18      	subs	r0, r3, r0
}
 80a10dc:	bd38      	pop	{r3, r4, r5, pc}
 80a10de:	bf00      	nop
 80a10e0:	080a1f3c 	.word	0x080a1f3c

080a10e4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a10e4:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a10e6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a10e8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a10ea:	6818      	ldr	r0, [r3, #0]
 80a10ec:	f7ff fb94 	bl	80a0818 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a10f0:	b118      	cbz	r0, 80a10fa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a10f2:	6963      	ldr	r3, [r4, #20]
 80a10f4:	6818      	ldr	r0, [r3, #0]
 80a10f6:	f7ff fbaf 	bl	80a0858 <socket_close>
 80a10fa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a10fc:	f7ff fbb4 	bl	80a0868 <socket_handle_invalid>
 80a1100:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1102:	6960      	ldr	r0, [r4, #20]
 80a1104:	2211      	movs	r2, #17
 80a1106:	2100      	movs	r1, #0
 80a1108:	308c      	adds	r0, #140	; 0x8c
 80a110a:	f000 fcfa 	bl	80a1b02 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a110e:	4620      	mov	r0, r4
}
 80a1110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1114:	f7ff bfa0 	b.w	80a1058 <_ZN9TCPClient12flush_bufferEv>

080a1118 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a111e:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1120:	4b17      	ldr	r3, [pc, #92]	; (80a1180 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1122:	2600      	movs	r6, #0
 80a1124:	6046      	str	r6, [r0, #4]
 80a1126:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1128:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a112a:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a112c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a112e:	20a0      	movs	r0, #160	; 0xa0
 80a1130:	460f      	mov	r7, r1
 80a1132:	f7fe ffb2 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1136:	4605      	mov	r5, r0
 80a1138:	b138      	cbz	r0, 80a114a <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a113a:	6007      	str	r7, [r0, #0]
 80a113c:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a1140:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a1144:	3088      	adds	r0, #136	; 0x88
 80a1146:	f7ff fcb7 	bl	80a0ab8 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a114a:	2014      	movs	r0, #20
 80a114c:	f7fe ffa5 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1150:	4603      	mov	r3, r0
 80a1152:	b128      	cbz	r0, 80a1160 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1154:	2201      	movs	r2, #1
 80a1156:	6042      	str	r2, [r0, #4]
 80a1158:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a115a:	4a0a      	ldr	r2, [pc, #40]	; (80a1184 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a115c:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a115e:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1160:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1162:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1164:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1166:	b128      	cbz	r0, 80a1174 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1168:	6843      	ldr	r3, [r0, #4]
 80a116a:	3b01      	subs	r3, #1
 80a116c:	6043      	str	r3, [r0, #4]
 80a116e:	b90b      	cbnz	r3, 80a1174 <_ZN9TCPClientC1Em+0x5c>
 80a1170:	f7ff feea 	bl	80a0f48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1174:	4620      	mov	r0, r4
 80a1176:	f7ff ff6f 	bl	80a1058 <_ZN9TCPClient12flush_bufferEv>
}
 80a117a:	4620      	mov	r0, r4
 80a117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a117e:	bf00      	nop
 80a1180:	080a1e48 	.word	0x080a1e48
 80a1184:	080a1e2c 	.word	0x080a1e2c

080a1188 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1188:	b510      	push	{r4, lr}
 80a118a:	4604      	mov	r4, r0
 80a118c:	f7ff fb6c 	bl	80a0868 <socket_handle_invalid>
 80a1190:	4601      	mov	r1, r0
 80a1192:	4620      	mov	r0, r4
 80a1194:	f7ff ffc0 	bl	80a1118 <_ZN9TCPClientC1Em>
{
}
 80a1198:	4620      	mov	r0, r4
 80a119a:	bd10      	pop	{r4, pc}

080a119c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11a0:	4698      	mov	r8, r3
    stop();
 80a11a2:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a11a4:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a11a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a11a8:	4606      	mov	r6, r0
 80a11aa:	460c      	mov	r4, r1
 80a11ac:	4615      	mov	r5, r2
    stop();
 80a11ae:	4798      	blx	r3
 80a11b0:	4b2f      	ldr	r3, [pc, #188]	; (80a1270 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a11b2:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a11b4:	6803      	ldr	r3, [r0, #0]
 80a11b6:	681b      	ldr	r3, [r3, #0]
 80a11b8:	4798      	blx	r3
 80a11ba:	2800      	cmp	r0, #0
 80a11bc:	d055      	beq.n	80a126a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a11be:	462b      	mov	r3, r5
 80a11c0:	2206      	movs	r2, #6
 80a11c2:	2101      	movs	r1, #1
 80a11c4:	f8cd 8000 	str.w	r8, [sp]
 80a11c8:	2002      	movs	r0, #2
 80a11ca:	6977      	ldr	r7, [r6, #20]
 80a11cc:	f7ff fb2c 	bl	80a0828 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a11d0:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a11d2:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a11d4:	9302      	str	r3, [sp, #8]
 80a11d6:	2700      	movs	r7, #0
 80a11d8:	6973      	ldr	r3, [r6, #20]
 80a11da:	9703      	str	r7, [sp, #12]
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	2001      	movs	r0, #1
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	4b24      	ldr	r3, [pc, #144]	; (80a1274 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a11e4:	aa02      	add	r2, sp, #8
 80a11e6:	9300      	str	r3, [sp, #0]
 80a11e8:	4923      	ldr	r1, [pc, #140]	; (80a1278 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a11ea:	463b      	mov	r3, r7
 80a11ec:	f7ff fbe4 	bl	80a09b8 <log_message>

          if (socket_handle_valid(d_->sock))
 80a11f0:	6973      	ldr	r3, [r6, #20]
 80a11f2:	6818      	ldr	r0, [r3, #0]
 80a11f4:	f7ff fb10 	bl	80a0818 <socket_handle_valid>
 80a11f8:	2800      	cmp	r0, #0
 80a11fa:	d036      	beq.n	80a126a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a11fc:	4630      	mov	r0, r6
 80a11fe:	f7ff ff2b 	bl	80a1058 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1202:	2302      	movs	r3, #2
 80a1204:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1208:	0a2b      	lsrs	r3, r5, #8
 80a120a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a120e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1210:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1214:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1218:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a121a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a121e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1222:	7963      	ldrb	r3, [r4, #5]
 80a1224:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1228:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a122c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1230:	f7ff fbb2 	bl	80a0998 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1234:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1236:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1238:	2210      	movs	r2, #16
 80a123a:	a902      	add	r1, sp, #8
 80a123c:	6818      	ldr	r0, [r3, #0]
 80a123e:	f7ff fafb 	bl	80a0838 <socket_connect>
 80a1242:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1244:	4628      	mov	r0, r5
 80a1246:	f7ff fba7 	bl	80a0998 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a124c:	6975      	ldr	r5, [r6, #20]
 80a124e:	358c      	adds	r5, #140	; 0x8c
 80a1250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1252:	6823      	ldr	r3, [r4, #0]
 80a1254:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1256:	f1b8 0f00 	cmp.w	r8, #0
 80a125a:	d005      	beq.n	80a1268 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a125c:	6833      	ldr	r3, [r6, #0]
 80a125e:	4630      	mov	r0, r6
 80a1260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1262:	4798      	blx	r3
 80a1264:	4638      	mov	r0, r7
 80a1266:	e000      	b.n	80a126a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1268:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a126a:	b00a      	add	sp, #40	; 0x28
 80a126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1270:	080a1f3c 	.word	0x080a1f3c
 80a1274:	080a1e93 	.word	0x080a1e93
 80a1278:	080a1e8c 	.word	0x080a1e8c

080a127c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a127c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a127e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1280:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1282:	6818      	ldr	r0, [r3, #0]
 80a1284:	f7ff fac8 	bl	80a0818 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1288:	b908      	cbnz	r0, 80a128e <_ZN9TCPClient6statusEv+0x12>
 80a128a:	2000      	movs	r0, #0
 80a128c:	bd10      	pop	{r4, pc}
 80a128e:	4b07      	ldr	r3, [pc, #28]	; (80a12ac <_ZN9TCPClient6statusEv+0x30>)
 80a1290:	6818      	ldr	r0, [r3, #0]
 80a1292:	6803      	ldr	r3, [r0, #0]
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	4798      	blx	r3
 80a1298:	2800      	cmp	r0, #0
 80a129a:	d0f6      	beq.n	80a128a <_ZN9TCPClient6statusEv+0xe>
 80a129c:	6963      	ldr	r3, [r4, #20]
 80a129e:	6818      	ldr	r0, [r3, #0]
 80a12a0:	f7ff fab2 	bl	80a0808 <socket_active_status>
 80a12a4:	fab0 f080 	clz	r0, r0
 80a12a8:	0940      	lsrs	r0, r0, #5
}
 80a12aa:	bd10      	pop	{r4, pc}
 80a12ac:	080a1f3c 	.word	0x080a1f3c

080a12b0 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a12b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a12b4:	2500      	movs	r5, #0
 80a12b6:	6045      	str	r5, [r0, #4]
 80a12b8:	4604      	mov	r4, r0
 80a12ba:	460e      	mov	r6, r1
 80a12bc:	4617      	mov	r7, r2
 80a12be:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a12c0:	f7ff ffdc 	bl	80a127c <_ZN9TCPClient6statusEv>
 80a12c4:	b160      	cbz	r0, 80a12e0 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a12c6:	6960      	ldr	r0, [r4, #20]
 80a12c8:	9501      	str	r5, [sp, #4]
 80a12ca:	f8cd 8000 	str.w	r8, [sp]
 80a12ce:	462b      	mov	r3, r5
 80a12d0:	463a      	mov	r2, r7
 80a12d2:	4631      	mov	r1, r6
 80a12d4:	6800      	ldr	r0, [r0, #0]
 80a12d6:	f7ff facf 	bl	80a0878 <socket_send_ex>
    if (ret < 0) {
 80a12da:	2800      	cmp	r0, #0
 80a12dc:	da03      	bge.n	80a12e6 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a12de:	e001      	b.n	80a12e4 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a12e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a12e4:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a12e6:	b002      	add	sp, #8
 80a12e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a12ec <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a12ec:	b538      	push	{r3, r4, r5, lr}
 80a12ee:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a12f0:	f7ff ffc4 	bl	80a127c <_ZN9TCPClient6statusEv>
 80a12f4:	bb00      	cbnz	r0, 80a1338 <_ZN9TCPClient9connectedEv+0x4c>
 80a12f6:	6963      	ldr	r3, [r4, #20]
 80a12f8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a12fc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1300:	4291      	cmp	r1, r2
 80a1302:	d119      	bne.n	80a1338 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1304:	6818      	ldr	r0, [r3, #0]
 80a1306:	f7ff fa87 	bl	80a0818 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a130a:	b128      	cbz	r0, 80a1318 <_ZN9TCPClient9connectedEv+0x2c>
 80a130c:	6963      	ldr	r3, [r4, #20]
 80a130e:	6818      	ldr	r0, [r3, #0]
 80a1310:	f7ff fa7a 	bl	80a0808 <socket_active_status>
 80a1314:	2801      	cmp	r0, #1
 80a1316:	d001      	beq.n	80a131c <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1318:	2500      	movs	r5, #0
 80a131a:	e00e      	b.n	80a133a <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a131c:	6823      	ldr	r3, [r4, #0]
 80a131e:	4620      	mov	r0, r4
 80a1320:	691b      	ldr	r3, [r3, #16]
 80a1322:	4798      	blx	r3
 80a1324:	2800      	cmp	r0, #0
 80a1326:	bf14      	ite	ne
 80a1328:	2501      	movne	r5, #1
 80a132a:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a132c:	d105      	bne.n	80a133a <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a132e:	6823      	ldr	r3, [r4, #0]
 80a1330:	4620      	mov	r0, r4
 80a1332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1334:	4798      	blx	r3
 80a1336:	e000      	b.n	80a133a <_ZN9TCPClient9connectedEv+0x4e>
 80a1338:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a133a:	4628      	mov	r0, r5
 80a133c:	bd38      	pop	{r3, r4, r5, pc}

080a133e <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a133e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1340:	f7ff ff9c 	bl	80a127c <_ZN9TCPClient6statusEv>
}
 80a1344:	3000      	adds	r0, #0
 80a1346:	bf18      	it	ne
 80a1348:	2001      	movne	r0, #1
 80a134a:	bd08      	pop	{r3, pc}

080a134c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a134c:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a134e:	681a      	ldr	r2, [r3, #0]
 80a1350:	4b02      	ldr	r3, [pc, #8]	; (80a135c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1352:	601a      	str	r2, [r3, #0]
 80a1354:	4770      	bx	lr
 80a1356:	bf00      	nop
 80a1358:	20000304 	.word	0x20000304
 80a135c:	200003e8 	.word	0x200003e8

080a1360 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1360:	4770      	bx	lr

080a1362 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1362:	7441      	strb	r1, [r0, #17]
 80a1364:	4770      	bx	lr

080a1366 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1366:	7c00      	ldrb	r0, [r0, #16]
 80a1368:	f7ff bac6 	b.w	80a08f8 <HAL_USART_Available_Data_For_Write>

080a136c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a136c:	7c00      	ldrb	r0, [r0, #16]
 80a136e:	f7ff baa3 	b.w	80a08b8 <HAL_USART_Available_Data>

080a1372 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1372:	7c00      	ldrb	r0, [r0, #16]
 80a1374:	f7ff bab0 	b.w	80a08d8 <HAL_USART_Peek_Data>

080a1378 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1378:	7c00      	ldrb	r0, [r0, #16]
 80a137a:	f7ff baa5 	b.w	80a08c8 <HAL_USART_Read_Data>

080a137e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a137e:	7c00      	ldrb	r0, [r0, #16]
 80a1380:	f7ff bab2 	b.w	80a08e8 <HAL_USART_Flush_Data>

080a1384 <_ZN11USARTSerialD0Ev>:
 80a1384:	b510      	push	{r4, lr}
 80a1386:	4604      	mov	r4, r0
 80a1388:	f7fe fe8b 	bl	80a00a2 <_ZdlPv>
 80a138c:	4620      	mov	r0, r4
 80a138e:	bd10      	pop	{r4, pc}

080a1390 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1390:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1392:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1394:	4604      	mov	r4, r0
 80a1396:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1398:	b925      	cbnz	r5, 80a13a4 <_ZN11USARTSerial5writeEh+0x14>
 80a139a:	7c00      	ldrb	r0, [r0, #16]
 80a139c:	f7ff faac 	bl	80a08f8 <HAL_USART_Available_Data_For_Write>
 80a13a0:	2800      	cmp	r0, #0
 80a13a2:	dd05      	ble.n	80a13b0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13a4:	4631      	mov	r1, r6
 80a13a6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a13a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13ac:	f7ff ba7c 	b.w	80a08a8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a13b0:	4628      	mov	r0, r5
 80a13b2:	bd70      	pop	{r4, r5, r6, pc}

080a13b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13b4:	b510      	push	{r4, lr}
 80a13b6:	4604      	mov	r4, r0
 80a13b8:	4608      	mov	r0, r1
 80a13ba:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a13bc:	2200      	movs	r2, #0
 80a13be:	6062      	str	r2, [r4, #4]
 80a13c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a13c4:	60a2      	str	r2, [r4, #8]
 80a13c6:	4a05      	ldr	r2, [pc, #20]	; (80a13dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a13c8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13ca:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a13cc:	2201      	movs	r2, #1
 80a13ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a13d0:	461a      	mov	r2, r3
 80a13d2:	f7ff fa61 	bl	80a0898 <HAL_USART_Init>
}
 80a13d6:	4620      	mov	r0, r4
 80a13d8:	bd10      	pop	{r4, pc}
 80a13da:	bf00      	nop
 80a13dc:	080a1ed8 	.word	0x080a1ed8

080a13e0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a13e0:	2300      	movs	r3, #0
 80a13e2:	7c00      	ldrb	r0, [r0, #16]
 80a13e4:	f7ff ba90 	b.w	80a0908 <HAL_USART_BeginConfig>

080a13e8 <_ZN11USARTSerialcvbEv>:
  return HAL_USART_Write_NineBitData(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 80a13e8:	2001      	movs	r0, #1
 80a13ea:	4770      	bx	lr

080a13ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a13ee:	4c19      	ldr	r4, [pc, #100]	; (80a1454 <_Z22__fetch_global_Serial1v+0x68>)
 80a13f0:	6825      	ldr	r5, [r4, #0]
 80a13f2:	b94d      	cbnz	r5, 80a1408 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a13f4:	2084      	movs	r0, #132	; 0x84
 80a13f6:	f7fe fe50 	bl	80a009a <_Znwj>
 80a13fa:	4606      	mov	r6, r0
 80a13fc:	b118      	cbz	r0, 80a1406 <_Z22__fetch_global_Serial1v+0x1a>
 80a13fe:	2284      	movs	r2, #132	; 0x84
 80a1400:	4629      	mov	r1, r5
 80a1402:	f000 fb7e 	bl	80a1b02 <memset>
 80a1406:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1408:	4d13      	ldr	r5, [pc, #76]	; (80a1458 <_Z22__fetch_global_Serial1v+0x6c>)
 80a140a:	682e      	ldr	r6, [r5, #0]
 80a140c:	b94e      	cbnz	r6, 80a1422 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a140e:	2084      	movs	r0, #132	; 0x84
 80a1410:	f7fe fe43 	bl	80a009a <_Znwj>
 80a1414:	4607      	mov	r7, r0
 80a1416:	b118      	cbz	r0, 80a1420 <_Z22__fetch_global_Serial1v+0x34>
 80a1418:	2284      	movs	r2, #132	; 0x84
 80a141a:	4631      	mov	r1, r6
 80a141c:	f000 fb71 	bl	80a1b02 <memset>
 80a1420:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1422:	4f0e      	ldr	r7, [pc, #56]	; (80a145c <_Z22__fetch_global_Serial1v+0x70>)
 80a1424:	6839      	ldr	r1, [r7, #0]
 80a1426:	f011 0601 	ands.w	r6, r1, #1
 80a142a:	d111      	bne.n	80a1450 <_Z22__fetch_global_Serial1v+0x64>
 80a142c:	4638      	mov	r0, r7
 80a142e:	f7fe fe3c 	bl	80a00aa <__cxa_guard_acquire>
 80a1432:	b168      	cbz	r0, 80a1450 <_Z22__fetch_global_Serial1v+0x64>
 80a1434:	6822      	ldr	r2, [r4, #0]
 80a1436:	4631      	mov	r1, r6
 80a1438:	682b      	ldr	r3, [r5, #0]
 80a143a:	4809      	ldr	r0, [pc, #36]	; (80a1460 <_Z22__fetch_global_Serial1v+0x74>)
 80a143c:	f7ff ffba 	bl	80a13b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1440:	4638      	mov	r0, r7
 80a1442:	f7fe fe37 	bl	80a00b4 <__cxa_guard_release>
 80a1446:	4a07      	ldr	r2, [pc, #28]	; (80a1464 <_Z22__fetch_global_Serial1v+0x78>)
 80a1448:	4907      	ldr	r1, [pc, #28]	; (80a1468 <_Z22__fetch_global_Serial1v+0x7c>)
 80a144a:	4805      	ldr	r0, [pc, #20]	; (80a1460 <_Z22__fetch_global_Serial1v+0x74>)
 80a144c:	f000 f9ee 	bl	80a182c <__aeabi_atexit>
#endif
	return serial1;
}
 80a1450:	4803      	ldr	r0, [pc, #12]	; (80a1460 <_Z22__fetch_global_Serial1v+0x74>)
 80a1452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1454:	20000408 	.word	0x20000408
 80a1458:	20000400 	.word	0x20000400
 80a145c:	20000404 	.word	0x20000404
 80a1460:	200003ec 	.word	0x200003ec
 80a1464:	20000370 	.word	0x20000370
 80a1468:	080a1361 	.word	0x080a1361

080a146c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a146c:	7441      	strb	r1, [r0, #17]
 80a146e:	4770      	bx	lr

080a1470 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1470:	4770      	bx	lr

080a1472 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1472:	2100      	movs	r1, #0
 80a1474:	7c00      	ldrb	r0, [r0, #16]
 80a1476:	f7ff ba6f 	b.w	80a0958 <HAL_USB_USART_Receive_Data>

080a147a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a147a:	2101      	movs	r1, #1
 80a147c:	7c00      	ldrb	r0, [r0, #16]
 80a147e:	f7ff ba6b 	b.w	80a0958 <HAL_USB_USART_Receive_Data>

080a1482 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1482:	7c00      	ldrb	r0, [r0, #16]
 80a1484:	f7ff ba60 	b.w	80a0948 <HAL_USB_USART_Available_Data_For_Write>

080a1488 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1488:	7c00      	ldrb	r0, [r0, #16]
 80a148a:	f7ff ba55 	b.w	80a0938 <HAL_USB_USART_Available_Data>

080a148e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a148e:	b538      	push	{r3, r4, r5, lr}
 80a1490:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1492:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1494:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1496:	f7ff fa57 	bl	80a0948 <HAL_USB_USART_Available_Data_For_Write>
 80a149a:	2800      	cmp	r0, #0
 80a149c:	dc01      	bgt.n	80a14a2 <_ZN9USBSerial5writeEh+0x14>
 80a149e:	7c60      	ldrb	r0, [r4, #17]
 80a14a0:	b120      	cbz	r0, 80a14ac <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a14a2:	4629      	mov	r1, r5
 80a14a4:	7c20      	ldrb	r0, [r4, #16]
 80a14a6:	f7ff fa5f 	bl	80a0968 <HAL_USB_USART_Send_Data>
    return 1;
 80a14aa:	2001      	movs	r0, #1
  }
  return 0;
}
 80a14ac:	bd38      	pop	{r3, r4, r5, pc}

080a14ae <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a14ae:	7c00      	ldrb	r0, [r0, #16]
 80a14b0:	f7ff ba62 	b.w	80a0978 <HAL_USB_USART_Flush_Data>

080a14b4 <_ZN9USBSerialD0Ev>:
 80a14b4:	b510      	push	{r4, lr}
 80a14b6:	4604      	mov	r4, r0
 80a14b8:	f7fe fdf3 	bl	80a00a2 <_ZdlPv>
 80a14bc:	4620      	mov	r0, r4
 80a14be:	bd10      	pop	{r4, pc}

080a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14c0:	b510      	push	{r4, lr}
 80a14c2:	4604      	mov	r4, r0
 80a14c4:	2300      	movs	r3, #0
 80a14c6:	6063      	str	r3, [r4, #4]
 80a14c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14cc:	60a3      	str	r3, [r4, #8]
 80a14ce:	4b05      	ldr	r3, [pc, #20]	; (80a14e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a14d0:	4608      	mov	r0, r1
 80a14d2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a14d4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a14d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a14d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a14da:	4611      	mov	r1, r2
 80a14dc:	f7ff fa1c 	bl	80a0918 <HAL_USB_USART_Init>
}
 80a14e0:	4620      	mov	r0, r4
 80a14e2:	bd10      	pop	{r4, pc}
 80a14e4:	080a1f08 	.word	0x080a1f08

080a14e8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a14e8:	2200      	movs	r2, #0
 80a14ea:	7c00      	ldrb	r0, [r0, #16]
 80a14ec:	f7ff ba1c 	b.w	80a0928 <HAL_USB_USART_Begin>

080a14f0 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a14f0:	7c00      	ldrb	r0, [r0, #16]
 80a14f2:	f7ff ba49 	b.w	80a0988 <HAL_USB_USART_Is_Enabled>

080a14f6 <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 80a14f6:	f7ff bffb 	b.w	80a14f0 <_ZN9USBSerial9isEnabledEv>

080a14fa <_Z19acquireSerialBufferv>:
 80a14fa:	b510      	push	{r4, lr}
 80a14fc:	4604      	mov	r4, r0
 80a14fe:	2214      	movs	r2, #20
 80a1500:	2100      	movs	r1, #0
 80a1502:	f000 fafe 	bl	80a1b02 <memset>
 80a1506:	4620      	mov	r0, r4
 80a1508:	bd10      	pop	{r4, pc}
	...

080a150c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a150c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a150e:	4d0e      	ldr	r5, [pc, #56]	; (80a1548 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1510:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1512:	a801      	add	r0, sp, #4
 80a1514:	f7ff fff1 	bl	80a14fa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1518:	6829      	ldr	r1, [r5, #0]
 80a151a:	f011 0401 	ands.w	r4, r1, #1
 80a151e:	d110      	bne.n	80a1542 <_Z16_fetch_usbserialv+0x36>
 80a1520:	4628      	mov	r0, r5
 80a1522:	f7fe fdc2 	bl	80a00aa <__cxa_guard_acquire>
 80a1526:	b160      	cbz	r0, 80a1542 <_Z16_fetch_usbserialv+0x36>
 80a1528:	aa01      	add	r2, sp, #4
 80a152a:	4621      	mov	r1, r4
 80a152c:	4807      	ldr	r0, [pc, #28]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a152e:	f7ff ffc7 	bl	80a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1532:	4628      	mov	r0, r5
 80a1534:	f7fe fdbe 	bl	80a00b4 <__cxa_guard_release>
 80a1538:	4a05      	ldr	r2, [pc, #20]	; (80a1550 <_Z16_fetch_usbserialv+0x44>)
 80a153a:	4906      	ldr	r1, [pc, #24]	; (80a1554 <_Z16_fetch_usbserialv+0x48>)
 80a153c:	4803      	ldr	r0, [pc, #12]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a153e:	f000 f975 	bl	80a182c <__aeabi_atexit>
	return _usbserial;
}
 80a1542:	4802      	ldr	r0, [pc, #8]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a1544:	b007      	add	sp, #28
 80a1546:	bd30      	pop	{r4, r5, pc}
 80a1548:	2000040c 	.word	0x2000040c
 80a154c:	20000414 	.word	0x20000414
 80a1550:	20000370 	.word	0x20000370
 80a1554:	080a1471 	.word	0x080a1471

080a1558 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a155c:	2214      	movs	r2, #20
 80a155e:	2100      	movs	r1, #0
 80a1560:	f000 facf 	bl	80a1b02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1564:	4620      	mov	r0, r4
 80a1566:	bd10      	pop	{r4, pc}

080a1568 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1568:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a156a:	4c0e      	ldr	r4, [pc, #56]	; (80a15a4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a156c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a156e:	a801      	add	r0, sp, #4
 80a1570:	f7ff fff2 	bl	80a1558 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1574:	6823      	ldr	r3, [r4, #0]
 80a1576:	07db      	lsls	r3, r3, #31
 80a1578:	d410      	bmi.n	80a159c <_Z17_fetch_usbserial1v+0x34>
 80a157a:	4620      	mov	r0, r4
 80a157c:	f7fe fd95 	bl	80a00aa <__cxa_guard_acquire>
 80a1580:	b160      	cbz	r0, 80a159c <_Z17_fetch_usbserial1v+0x34>
 80a1582:	aa01      	add	r2, sp, #4
 80a1584:	2101      	movs	r1, #1
 80a1586:	4808      	ldr	r0, [pc, #32]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a1588:	f7ff ff9a 	bl	80a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a158c:	4620      	mov	r0, r4
 80a158e:	f7fe fd91 	bl	80a00b4 <__cxa_guard_release>
 80a1592:	4a06      	ldr	r2, [pc, #24]	; (80a15ac <_Z17_fetch_usbserial1v+0x44>)
 80a1594:	4906      	ldr	r1, [pc, #24]	; (80a15b0 <_Z17_fetch_usbserial1v+0x48>)
 80a1596:	4804      	ldr	r0, [pc, #16]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a1598:	f000 f948 	bl	80a182c <__aeabi_atexit>
  return _usbserial1;
}
 80a159c:	4802      	ldr	r0, [pc, #8]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a159e:	b006      	add	sp, #24
 80a15a0:	bd10      	pop	{r4, pc}
 80a15a2:	bf00      	nop
 80a15a4:	20000410 	.word	0x20000410
 80a15a8:	20000428 	.word	0x20000428
 80a15ac:	20000370 	.word	0x20000370
 80a15b0:	080a1471 	.word	0x080a1471

080a15b4 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a15b4:	4770      	bx	lr

080a15b6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a15b6:	2200      	movs	r2, #0
 80a15b8:	4611      	mov	r1, r2
 80a15ba:	4610      	mov	r0, r2
 80a15bc:	f7ff ba30 	b.w	80a0a20 <network_ready>

080a15c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a15c0:	4803      	ldr	r0, [pc, #12]	; (80a15d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a15c2:	4b04      	ldr	r3, [pc, #16]	; (80a15d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a15c4:	4a04      	ldr	r2, [pc, #16]	; (80a15d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a15c6:	4905      	ldr	r1, [pc, #20]	; (80a15dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a15c8:	6003      	str	r3, [r0, #0]
 80a15ca:	f000 b92f 	b.w	80a182c <__aeabi_atexit>
 80a15ce:	bf00      	nop
 80a15d0:	2000043c 	.word	0x2000043c
 80a15d4:	080a1f38 	.word	0x080a1f38
 80a15d8:	20000370 	.word	0x20000370
 80a15dc:	080a15b5 	.word	0x080a15b5

080a15e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a15e0:	b510      	push	{r4, lr}
 80a15e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a15e4:	f000 fac6 	bl	80a1b74 <strlen>
 80a15e8:	3801      	subs	r0, #1
 80a15ea:	1823      	adds	r3, r4, r0
 80a15ec:	4620      	mov	r0, r4
	while(i<j){
 80a15ee:	4298      	cmp	r0, r3
 80a15f0:	d206      	bcs.n	80a1600 <_Z11str_reversePc+0x20>
		c = *i;
 80a15f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a15f4:	7819      	ldrb	r1, [r3, #0]
 80a15f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a15fa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a15fe:	e7f6      	b.n	80a15ee <_Z11str_reversePc+0xe>
 80a1600:	bd10      	pop	{r4, pc}

080a1602 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1602:	b570      	push	{r4, r5, r6, lr}
 80a1604:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1606:	1e91      	subs	r1, r2, #2
 80a1608:	2922      	cmp	r1, #34	; 0x22
 80a160a:	d820      	bhi.n	80a164e <ultoa+0x4c>
 80a160c:	4625      	mov	r5, r4
 80a160e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1610:	b910      	cbnz	r0, 80a1618 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1612:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1614:	2230      	movs	r2, #48	; 0x30
 80a1616:	e00e      	b.n	80a1636 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1618:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a161c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1620:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1622:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1624:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1628:	bf94      	ite	ls
 80a162a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a162c:	3157      	addhi	r1, #87	; 0x57
 80a162e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a1632:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1634:	e7eb      	b.n	80a160e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1636:	4299      	cmp	r1, r3
 80a1638:	d202      	bcs.n	80a1640 <ultoa+0x3e>
            *ptr++ = '0';
 80a163a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a163e:	e7fa      	b.n	80a1636 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1640:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1642:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a1644:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a1646:	f7ff ffcb 	bl	80a15e0 <_Z11str_reversePc>
	return buffer;
 80a164a:	4620      	mov	r0, r4
 80a164c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a164e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1650:	bd70      	pop	{r4, r5, r6, pc}

080a1652 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1652:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1654:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1656:	460c      	mov	r4, r1
 80a1658:	4615      	mov	r5, r2
	if(a<0){
 80a165a:	da0b      	bge.n	80a1674 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a165c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1660:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1664:	bf14      	ite	ne
 80a1666:	4258      	negne	r0, r3
 80a1668:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a166a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a166c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a166e:	462a      	mov	r2, r5
 80a1670:	4419      	add	r1, r3
 80a1672:	e000      	b.n	80a1676 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a1674:	2301      	movs	r3, #1
 80a1676:	f7ff ffc4 	bl	80a1602 <ultoa>
	}
	return buffer;
}
 80a167a:	4620      	mov	r0, r4
 80a167c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1680 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1680:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1682:	4b14      	ldr	r3, [pc, #80]	; (80a16d4 <serialEventRun+0x54>)
 80a1684:	b133      	cbz	r3, 80a1694 <serialEventRun+0x14>
 80a1686:	f7ff ff41 	bl	80a150c <_Z16_fetch_usbserialv>
 80a168a:	6803      	ldr	r3, [r0, #0]
 80a168c:	691b      	ldr	r3, [r3, #16]
 80a168e:	4798      	blx	r3
 80a1690:	2800      	cmp	r0, #0
 80a1692:	dc16      	bgt.n	80a16c2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1694:	4b10      	ldr	r3, [pc, #64]	; (80a16d8 <serialEventRun+0x58>)
 80a1696:	b133      	cbz	r3, 80a16a6 <serialEventRun+0x26>
 80a1698:	f7ff fea8 	bl	80a13ec <_Z22__fetch_global_Serial1v>
 80a169c:	6803      	ldr	r3, [r0, #0]
 80a169e:	691b      	ldr	r3, [r3, #16]
 80a16a0:	4798      	blx	r3
 80a16a2:	2800      	cmp	r0, #0
 80a16a4:	dc10      	bgt.n	80a16c8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a16a6:	4b0d      	ldr	r3, [pc, #52]	; (80a16dc <serialEventRun+0x5c>)
 80a16a8:	b10b      	cbz	r3, 80a16ae <serialEventRun+0x2e>
 80a16aa:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a16ae:	4b0c      	ldr	r3, [pc, #48]	; (80a16e0 <serialEventRun+0x60>)
 80a16b0:	b17b      	cbz	r3, 80a16d2 <serialEventRun+0x52>
 80a16b2:	f7ff ff59 	bl	80a1568 <_Z17_fetch_usbserial1v>
 80a16b6:	6803      	ldr	r3, [r0, #0]
 80a16b8:	691b      	ldr	r3, [r3, #16]
 80a16ba:	4798      	blx	r3
 80a16bc:	2800      	cmp	r0, #0
 80a16be:	dc06      	bgt.n	80a16ce <serialEventRun+0x4e>
 80a16c0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a16c2:	f3af 8000 	nop.w
 80a16c6:	e7e5      	b.n	80a1694 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a16c8:	f3af 8000 	nop.w
 80a16cc:	e7eb      	b.n	80a16a6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a16ce:	f3af 8000 	nop.w
 80a16d2:	bd08      	pop	{r3, pc}
	...

080a16e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a16e4:	b508      	push	{r3, lr}
	serialEventRun();
 80a16e6:	f7ff ffcb 	bl	80a1680 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a16ea:	f7ff f87d 	bl	80a07e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a16ee:	4b01      	ldr	r3, [pc, #4]	; (80a16f4 <_post_loop+0x10>)
 80a16f0:	6018      	str	r0, [r3, #0]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	20000448 	.word	0x20000448

080a16f8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a16f8:	4802      	ldr	r0, [pc, #8]	; (80a1704 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a16fa:	4a03      	ldr	r2, [pc, #12]	; (80a1708 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a16fc:	4903      	ldr	r1, [pc, #12]	; (80a170c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a16fe:	1a12      	subs	r2, r2, r0
 80a1700:	f000 b9f4 	b.w	80a1aec <memcpy>
 80a1704:	40024000 	.word	0x40024000
 80a1708:	40024004 	.word	0x40024004
 80a170c:	080a20e0 	.word	0x080a20e0

080a1710 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1710:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1712:	2300      	movs	r3, #0
 80a1714:	9300      	str	r3, [sp, #0]
 80a1716:	461a      	mov	r2, r3
 80a1718:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a171c:	f7ff f96e 	bl	80a09fc <system_ctrl_set_result>
}
 80a1720:	b003      	add	sp, #12
 80a1722:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1728 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1728:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a172a:	8843      	ldrh	r3, [r0, #2]
 80a172c:	2b0a      	cmp	r3, #10
 80a172e:	d008      	beq.n	80a1742 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1730:	2b50      	cmp	r3, #80	; 0x50
 80a1732:	d109      	bne.n	80a1748 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1734:	4b09      	ldr	r3, [pc, #36]	; (80a175c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1736:	681b      	ldr	r3, [r3, #0]
 80a1738:	b13b      	cbz	r3, 80a174a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a173a:	b003      	add	sp, #12
 80a173c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1740:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1742:	f7ff ffe5 	bl	80a1710 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1746:	e006      	b.n	80a1756 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1748:	2300      	movs	r3, #0
 80a174a:	9300      	str	r3, [sp, #0]
 80a174c:	461a      	mov	r2, r3
 80a174e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1752:	f7ff f953 	bl	80a09fc <system_ctrl_set_result>
        break;
    }
}
 80a1756:	b003      	add	sp, #12
 80a1758:	f85d fb04 	ldr.w	pc, [sp], #4
 80a175c:	20000440 	.word	0x20000440

080a1760 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1760:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1762:	4c10      	ldr	r4, [pc, #64]	; (80a17a4 <module_user_init_hook+0x44>)
 80a1764:	4d10      	ldr	r5, [pc, #64]	; (80a17a8 <module_user_init_hook+0x48>)
 80a1766:	6823      	ldr	r3, [r4, #0]
 80a1768:	42ab      	cmp	r3, r5
 80a176a:	4b10      	ldr	r3, [pc, #64]	; (80a17ac <module_user_init_hook+0x4c>)
 80a176c:	bf0c      	ite	eq
 80a176e:	2201      	moveq	r2, #1
 80a1770:	2200      	movne	r2, #0
 80a1772:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1774:	d002      	beq.n	80a177c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1776:	f7ff ffbf 	bl	80a16f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a177a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a177c:	f7ff f82c 	bl	80a07d8 <HAL_RNG_GetRandomNumber>
 80a1780:	f000 f9c8 	bl	80a1b14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1784:	4b0a      	ldr	r3, [pc, #40]	; (80a17b0 <module_user_init_hook+0x50>)
 80a1786:	b11b      	cbz	r3, 80a1790 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1788:	f7ff f826 	bl	80a07d8 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a178c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1790:	2100      	movs	r1, #0
 80a1792:	4807      	ldr	r0, [pc, #28]	; (80a17b0 <module_user_init_hook+0x50>)
 80a1794:	f7ff f93c 	bl	80a0a10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a179c:	2100      	movs	r1, #0
 80a179e:	4805      	ldr	r0, [pc, #20]	; (80a17b4 <module_user_init_hook+0x54>)
 80a17a0:	f7ff b922 	b.w	80a09e8 <system_ctrl_set_app_request_handler>
 80a17a4:	40024000 	.word	0x40024000
 80a17a8:	9a271c1e 	.word	0x9a271c1e
 80a17ac:	20000444 	.word	0x20000444
 80a17b0:	00000000 	.word	0x00000000
 80a17b4:	080a1729 	.word	0x080a1729

080a17b8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a17b8:	b513      	push	{r0, r1, r4, lr}
 80a17ba:	4c08      	ldr	r4, [pc, #32]	; (80a17dc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a17bc:	2300      	movs	r3, #0
 80a17be:	461a      	mov	r2, r3
 80a17c0:	4619      	mov	r1, r3
 80a17c2:	9300      	str	r3, [sp, #0]
 80a17c4:	4620      	mov	r0, r4
 80a17c6:	f7ff f993 	bl	80a0af0 <_ZN9IPAddressC1Ehhhh>
 80a17ca:	4620      	mov	r0, r4
 80a17cc:	4a04      	ldr	r2, [pc, #16]	; (80a17e0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a17ce:	4905      	ldr	r1, [pc, #20]	; (80a17e4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a17d0:	b002      	add	sp, #8
 80a17d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a17d6:	f000 b829 	b.w	80a182c <__aeabi_atexit>
 80a17da:	bf00      	nop
 80a17dc:	2000044c 	.word	0x2000044c
 80a17e0:	20000370 	.word	0x20000370
 80a17e4:	080a0a79 	.word	0x080a0a79

080a17e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17ea:	4c0c      	ldr	r4, [pc, #48]	; (80a181c <_GLOBAL__sub_I_SPI+0x34>)
 80a17ec:	4e0c      	ldr	r6, [pc, #48]	; (80a1820 <_GLOBAL__sub_I_SPI+0x38>)
 80a17ee:	4d0d      	ldr	r5, [pc, #52]	; (80a1824 <_GLOBAL__sub_I_SPI+0x3c>)
 80a17f0:	2100      	movs	r1, #0
 80a17f2:	4620      	mov	r0, r4
 80a17f4:	f7ff fa5e 	bl	80a0cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a17f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17fa:	4c0b      	ldr	r4, [pc, #44]	; (80a1828 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17fc:	4632      	mov	r2, r6
 80a17fe:	4629      	mov	r1, r5
 80a1800:	f000 f814 	bl	80a182c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1804:	2101      	movs	r1, #1
 80a1806:	4620      	mov	r0, r4
 80a1808:	f7ff fa54 	bl	80a0cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a180c:	4632      	mov	r2, r6
 80a180e:	4629      	mov	r1, r5
 80a1810:	4620      	mov	r0, r4
 80a1812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1816:	f000 b809 	b.w	80a182c <__aeabi_atexit>
 80a181a:	bf00      	nop
 80a181c:	20000464 	.word	0x20000464
 80a1820:	20000370 	.word	0x20000370
 80a1824:	080a0ca5 	.word	0x080a0ca5
 80a1828:	20000474 	.word	0x20000474

080a182c <__aeabi_atexit>:
 80a182c:	460b      	mov	r3, r1
 80a182e:	4601      	mov	r1, r0
 80a1830:	4618      	mov	r0, r3
 80a1832:	f000 b94d 	b.w	80a1ad0 <__cxa_atexit>
	...

080a1838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1838:	4b24      	ldr	r3, [pc, #144]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a183a:	681a      	ldr	r2, [r3, #0]
 80a183c:	07d0      	lsls	r0, r2, #31
 80a183e:	bf5c      	itt	pl
 80a1840:	2201      	movpl	r2, #1
 80a1842:	601a      	strpl	r2, [r3, #0]
 80a1844:	4b22      	ldr	r3, [pc, #136]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1846:	681a      	ldr	r2, [r3, #0]
 80a1848:	07d1      	lsls	r1, r2, #31
 80a184a:	bf5c      	itt	pl
 80a184c:	2201      	movpl	r2, #1
 80a184e:	601a      	strpl	r2, [r3, #0]
 80a1850:	4b20      	ldr	r3, [pc, #128]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1852:	681a      	ldr	r2, [r3, #0]
 80a1854:	07d2      	lsls	r2, r2, #31
 80a1856:	bf5c      	itt	pl
 80a1858:	2201      	movpl	r2, #1
 80a185a:	601a      	strpl	r2, [r3, #0]
 80a185c:	4b1e      	ldr	r3, [pc, #120]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a185e:	681a      	ldr	r2, [r3, #0]
 80a1860:	07d0      	lsls	r0, r2, #31
 80a1862:	bf5c      	itt	pl
 80a1864:	2201      	movpl	r2, #1
 80a1866:	601a      	strpl	r2, [r3, #0]
 80a1868:	4b1c      	ldr	r3, [pc, #112]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a186a:	681a      	ldr	r2, [r3, #0]
 80a186c:	07d1      	lsls	r1, r2, #31
 80a186e:	bf5c      	itt	pl
 80a1870:	2201      	movpl	r2, #1
 80a1872:	601a      	strpl	r2, [r3, #0]
 80a1874:	4b1a      	ldr	r3, [pc, #104]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1876:	681a      	ldr	r2, [r3, #0]
 80a1878:	07d2      	lsls	r2, r2, #31
 80a187a:	bf5c      	itt	pl
 80a187c:	2201      	movpl	r2, #1
 80a187e:	601a      	strpl	r2, [r3, #0]
 80a1880:	4b18      	ldr	r3, [pc, #96]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d0      	lsls	r0, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b16      	ldr	r3, [pc, #88]	; (80a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d1      	lsls	r1, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4b14      	ldr	r3, [pc, #80]	; (80a18ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a189a:	681a      	ldr	r2, [r3, #0]
 80a189c:	07d2      	lsls	r2, r2, #31
 80a189e:	bf5c      	itt	pl
 80a18a0:	2201      	movpl	r2, #1
 80a18a2:	601a      	strpl	r2, [r3, #0]
 80a18a4:	4b12      	ldr	r3, [pc, #72]	; (80a18f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a18a6:	681a      	ldr	r2, [r3, #0]
 80a18a8:	07d0      	lsls	r0, r2, #31
 80a18aa:	bf5c      	itt	pl
 80a18ac:	2201      	movpl	r2, #1
 80a18ae:	601a      	strpl	r2, [r3, #0]
 80a18b0:	4b10      	ldr	r3, [pc, #64]	; (80a18f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	07d1      	lsls	r1, r2, #31
 80a18b6:	bf5c      	itt	pl
 80a18b8:	2201      	movpl	r2, #1
 80a18ba:	601a      	strpl	r2, [r3, #0]
 80a18bc:	4b0e      	ldr	r3, [pc, #56]	; (80a18f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a18be:	681a      	ldr	r2, [r3, #0]
 80a18c0:	07d2      	lsls	r2, r2, #31
 80a18c2:	bf5c      	itt	pl
 80a18c4:	2201      	movpl	r2, #1
 80a18c6:	601a      	strpl	r2, [r3, #0]
 80a18c8:	4770      	bx	lr
 80a18ca:	bf00      	nop
 80a18cc:	200004b0 	.word	0x200004b0
 80a18d0:	200004ac 	.word	0x200004ac
 80a18d4:	200004a8 	.word	0x200004a8
 80a18d8:	200004a4 	.word	0x200004a4
 80a18dc:	200004a0 	.word	0x200004a0
 80a18e0:	2000049c 	.word	0x2000049c
 80a18e4:	20000498 	.word	0x20000498
 80a18e8:	20000494 	.word	0x20000494
 80a18ec:	20000490 	.word	0x20000490
 80a18f0:	2000048c 	.word	0x2000048c
 80a18f4:	20000488 	.word	0x20000488
 80a18f8:	20000484 	.word	0x20000484

080a18fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a18fc:	4b18      	ldr	r3, [pc, #96]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a18fe:	681a      	ldr	r2, [r3, #0]
 80a1900:	07d1      	lsls	r1, r2, #31
 80a1902:	bf5c      	itt	pl
 80a1904:	2201      	movpl	r2, #1
 80a1906:	601a      	strpl	r2, [r3, #0]
 80a1908:	4b16      	ldr	r3, [pc, #88]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a190a:	681a      	ldr	r2, [r3, #0]
 80a190c:	07d2      	lsls	r2, r2, #31
 80a190e:	bf5c      	itt	pl
 80a1910:	2201      	movpl	r2, #1
 80a1912:	601a      	strpl	r2, [r3, #0]
 80a1914:	4b14      	ldr	r3, [pc, #80]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1916:	681a      	ldr	r2, [r3, #0]
 80a1918:	07d0      	lsls	r0, r2, #31
 80a191a:	bf5c      	itt	pl
 80a191c:	2201      	movpl	r2, #1
 80a191e:	601a      	strpl	r2, [r3, #0]
 80a1920:	4b12      	ldr	r3, [pc, #72]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1922:	681a      	ldr	r2, [r3, #0]
 80a1924:	07d1      	lsls	r1, r2, #31
 80a1926:	bf5c      	itt	pl
 80a1928:	2201      	movpl	r2, #1
 80a192a:	601a      	strpl	r2, [r3, #0]
 80a192c:	4b10      	ldr	r3, [pc, #64]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a192e:	681a      	ldr	r2, [r3, #0]
 80a1930:	07d2      	lsls	r2, r2, #31
 80a1932:	bf5c      	itt	pl
 80a1934:	2201      	movpl	r2, #1
 80a1936:	601a      	strpl	r2, [r3, #0]
 80a1938:	4b0e      	ldr	r3, [pc, #56]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a193a:	681a      	ldr	r2, [r3, #0]
 80a193c:	07d0      	lsls	r0, r2, #31
 80a193e:	bf5c      	itt	pl
 80a1940:	2201      	movpl	r2, #1
 80a1942:	601a      	strpl	r2, [r3, #0]
 80a1944:	4b0c      	ldr	r3, [pc, #48]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1946:	681a      	ldr	r2, [r3, #0]
 80a1948:	07d1      	lsls	r1, r2, #31
 80a194a:	bf5c      	itt	pl
 80a194c:	2201      	movpl	r2, #1
 80a194e:	601a      	strpl	r2, [r3, #0]
 80a1950:	4b0a      	ldr	r3, [pc, #40]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1952:	681a      	ldr	r2, [r3, #0]
 80a1954:	07d2      	lsls	r2, r2, #31
 80a1956:	bf5c      	itt	pl
 80a1958:	2201      	movpl	r2, #1
 80a195a:	601a      	strpl	r2, [r3, #0]
 80a195c:	4770      	bx	lr
 80a195e:	bf00      	nop
 80a1960:	200004d0 	.word	0x200004d0
 80a1964:	200004cc 	.word	0x200004cc
 80a1968:	200004c8 	.word	0x200004c8
 80a196c:	200004c4 	.word	0x200004c4
 80a1970:	200004c0 	.word	0x200004c0
 80a1974:	200004bc 	.word	0x200004bc
 80a1978:	200004b8 	.word	0x200004b8
 80a197c:	200004b4 	.word	0x200004b4

080a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1980:	4b18      	ldr	r3, [pc, #96]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d1      	lsls	r1, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b16      	ldr	r3, [pc, #88]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d2      	lsls	r2, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b14      	ldr	r3, [pc, #80]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d0      	lsls	r0, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4b12      	ldr	r3, [pc, #72]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a19a6:	681a      	ldr	r2, [r3, #0]
 80a19a8:	07d1      	lsls	r1, r2, #31
 80a19aa:	bf5c      	itt	pl
 80a19ac:	2201      	movpl	r2, #1
 80a19ae:	601a      	strpl	r2, [r3, #0]
 80a19b0:	4b10      	ldr	r3, [pc, #64]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19b2:	681a      	ldr	r2, [r3, #0]
 80a19b4:	07d2      	lsls	r2, r2, #31
 80a19b6:	bf5c      	itt	pl
 80a19b8:	2201      	movpl	r2, #1
 80a19ba:	601a      	strpl	r2, [r3, #0]
 80a19bc:	4b0e      	ldr	r3, [pc, #56]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a19be:	681a      	ldr	r2, [r3, #0]
 80a19c0:	07d0      	lsls	r0, r2, #31
 80a19c2:	bf5c      	itt	pl
 80a19c4:	2201      	movpl	r2, #1
 80a19c6:	601a      	strpl	r2, [r3, #0]
 80a19c8:	4b0c      	ldr	r3, [pc, #48]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d1      	lsls	r1, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4b0a      	ldr	r3, [pc, #40]	; (80a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a19d6:	681a      	ldr	r2, [r3, #0]
 80a19d8:	07d2      	lsls	r2, r2, #31
 80a19da:	bf5c      	itt	pl
 80a19dc:	2201      	movpl	r2, #1
 80a19de:	601a      	strpl	r2, [r3, #0]
 80a19e0:	4770      	bx	lr
 80a19e2:	bf00      	nop
 80a19e4:	200004f0 	.word	0x200004f0
 80a19e8:	200004ec 	.word	0x200004ec
 80a19ec:	200004e8 	.word	0x200004e8
 80a19f0:	200004e4 	.word	0x200004e4
 80a19f4:	200004e0 	.word	0x200004e0
 80a19f8:	200004dc 	.word	0x200004dc
 80a19fc:	200004d8 	.word	0x200004d8
 80a1a00:	200004d4 	.word	0x200004d4

080a1a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a04:	4b24      	ldr	r3, [pc, #144]	; (80a1a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a06:	681a      	ldr	r2, [r3, #0]
 80a1a08:	07d0      	lsls	r0, r2, #31
 80a1a0a:	bf5c      	itt	pl
 80a1a0c:	2201      	movpl	r2, #1
 80a1a0e:	601a      	strpl	r2, [r3, #0]
 80a1a10:	4b22      	ldr	r3, [pc, #136]	; (80a1a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a12:	681a      	ldr	r2, [r3, #0]
 80a1a14:	07d1      	lsls	r1, r2, #31
 80a1a16:	bf5c      	itt	pl
 80a1a18:	2201      	movpl	r2, #1
 80a1a1a:	601a      	strpl	r2, [r3, #0]
 80a1a1c:	4b20      	ldr	r3, [pc, #128]	; (80a1aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a1e:	681a      	ldr	r2, [r3, #0]
 80a1a20:	07d2      	lsls	r2, r2, #31
 80a1a22:	bf5c      	itt	pl
 80a1a24:	2201      	movpl	r2, #1
 80a1a26:	601a      	strpl	r2, [r3, #0]
 80a1a28:	4b1e      	ldr	r3, [pc, #120]	; (80a1aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1a2a:	681a      	ldr	r2, [r3, #0]
 80a1a2c:	07d0      	lsls	r0, r2, #31
 80a1a2e:	bf5c      	itt	pl
 80a1a30:	2201      	movpl	r2, #1
 80a1a32:	601a      	strpl	r2, [r3, #0]
 80a1a34:	4b1c      	ldr	r3, [pc, #112]	; (80a1aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1a36:	681a      	ldr	r2, [r3, #0]
 80a1a38:	07d1      	lsls	r1, r2, #31
 80a1a3a:	bf5c      	itt	pl
 80a1a3c:	2201      	movpl	r2, #1
 80a1a3e:	601a      	strpl	r2, [r3, #0]
 80a1a40:	4b1a      	ldr	r3, [pc, #104]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1a42:	681a      	ldr	r2, [r3, #0]
 80a1a44:	07d2      	lsls	r2, r2, #31
 80a1a46:	bf5c      	itt	pl
 80a1a48:	2201      	movpl	r2, #1
 80a1a4a:	601a      	strpl	r2, [r3, #0]
 80a1a4c:	4b18      	ldr	r3, [pc, #96]	; (80a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1a4e:	681a      	ldr	r2, [r3, #0]
 80a1a50:	07d0      	lsls	r0, r2, #31
 80a1a52:	bf5c      	itt	pl
 80a1a54:	2201      	movpl	r2, #1
 80a1a56:	601a      	strpl	r2, [r3, #0]
 80a1a58:	4b16      	ldr	r3, [pc, #88]	; (80a1ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1a5a:	681a      	ldr	r2, [r3, #0]
 80a1a5c:	07d1      	lsls	r1, r2, #31
 80a1a5e:	bf5c      	itt	pl
 80a1a60:	2201      	movpl	r2, #1
 80a1a62:	601a      	strpl	r2, [r3, #0]
 80a1a64:	4b14      	ldr	r3, [pc, #80]	; (80a1ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1a66:	681a      	ldr	r2, [r3, #0]
 80a1a68:	07d2      	lsls	r2, r2, #31
 80a1a6a:	bf5c      	itt	pl
 80a1a6c:	2201      	movpl	r2, #1
 80a1a6e:	601a      	strpl	r2, [r3, #0]
 80a1a70:	4b12      	ldr	r3, [pc, #72]	; (80a1abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1a72:	681a      	ldr	r2, [r3, #0]
 80a1a74:	07d0      	lsls	r0, r2, #31
 80a1a76:	bf5c      	itt	pl
 80a1a78:	2201      	movpl	r2, #1
 80a1a7a:	601a      	strpl	r2, [r3, #0]
 80a1a7c:	4b10      	ldr	r3, [pc, #64]	; (80a1ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1a7e:	681a      	ldr	r2, [r3, #0]
 80a1a80:	07d1      	lsls	r1, r2, #31
 80a1a82:	bf5c      	itt	pl
 80a1a84:	2201      	movpl	r2, #1
 80a1a86:	601a      	strpl	r2, [r3, #0]
 80a1a88:	4b0e      	ldr	r3, [pc, #56]	; (80a1ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1a8a:	681a      	ldr	r2, [r3, #0]
 80a1a8c:	07d2      	lsls	r2, r2, #31
 80a1a8e:	bf5c      	itt	pl
 80a1a90:	2201      	movpl	r2, #1
 80a1a92:	601a      	strpl	r2, [r3, #0]
 80a1a94:	4770      	bx	lr
 80a1a96:	bf00      	nop
 80a1a98:	20000520 	.word	0x20000520
 80a1a9c:	2000051c 	.word	0x2000051c
 80a1aa0:	20000518 	.word	0x20000518
 80a1aa4:	20000514 	.word	0x20000514
 80a1aa8:	20000510 	.word	0x20000510
 80a1aac:	2000050c 	.word	0x2000050c
 80a1ab0:	20000508 	.word	0x20000508
 80a1ab4:	20000504 	.word	0x20000504
 80a1ab8:	20000500 	.word	0x20000500
 80a1abc:	200004fc 	.word	0x200004fc
 80a1ac0:	200004f8 	.word	0x200004f8
 80a1ac4:	200004f4 	.word	0x200004f4

080a1ac8 <atol>:
 80a1ac8:	220a      	movs	r2, #10
 80a1aca:	2100      	movs	r1, #0
 80a1acc:	f000 b8e0 	b.w	80a1c90 <strtol>

080a1ad0 <__cxa_atexit>:
 80a1ad0:	b510      	push	{r4, lr}
 80a1ad2:	4c05      	ldr	r4, [pc, #20]	; (80a1ae8 <__cxa_atexit+0x18>)
 80a1ad4:	4613      	mov	r3, r2
 80a1ad6:	b12c      	cbz	r4, 80a1ae4 <__cxa_atexit+0x14>
 80a1ad8:	460a      	mov	r2, r1
 80a1ada:	4601      	mov	r1, r0
 80a1adc:	2002      	movs	r0, #2
 80a1ade:	f3af 8000 	nop.w
 80a1ae2:	bd10      	pop	{r4, pc}
 80a1ae4:	4620      	mov	r0, r4
 80a1ae6:	bd10      	pop	{r4, pc}
 80a1ae8:	00000000 	.word	0x00000000

080a1aec <memcpy>:
 80a1aec:	b510      	push	{r4, lr}
 80a1aee:	1e43      	subs	r3, r0, #1
 80a1af0:	440a      	add	r2, r1
 80a1af2:	4291      	cmp	r1, r2
 80a1af4:	d004      	beq.n	80a1b00 <memcpy+0x14>
 80a1af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1afe:	e7f8      	b.n	80a1af2 <memcpy+0x6>
 80a1b00:	bd10      	pop	{r4, pc}

080a1b02 <memset>:
 80a1b02:	4603      	mov	r3, r0
 80a1b04:	4402      	add	r2, r0
 80a1b06:	4293      	cmp	r3, r2
 80a1b08:	d002      	beq.n	80a1b10 <memset+0xe>
 80a1b0a:	f803 1b01 	strb.w	r1, [r3], #1
 80a1b0e:	e7fa      	b.n	80a1b06 <memset+0x4>
 80a1b10:	4770      	bx	lr
	...

080a1b14 <srand>:
 80a1b14:	b538      	push	{r3, r4, r5, lr}
 80a1b16:	4b12      	ldr	r3, [pc, #72]	; (80a1b60 <srand+0x4c>)
 80a1b18:	4605      	mov	r5, r0
 80a1b1a:	681c      	ldr	r4, [r3, #0]
 80a1b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1b1e:	b9d3      	cbnz	r3, 80a1b56 <srand+0x42>
 80a1b20:	2018      	movs	r0, #24
 80a1b22:	f7fe ff85 	bl	80a0a30 <malloc>
 80a1b26:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1b2a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1b2c:	8003      	strh	r3, [r0, #0]
 80a1b2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1b32:	8043      	strh	r3, [r0, #2]
 80a1b34:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1b38:	8083      	strh	r3, [r0, #4]
 80a1b3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1b3e:	80c3      	strh	r3, [r0, #6]
 80a1b40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1b44:	8103      	strh	r3, [r0, #8]
 80a1b46:	2305      	movs	r3, #5
 80a1b48:	8143      	strh	r3, [r0, #10]
 80a1b4a:	230b      	movs	r3, #11
 80a1b4c:	8183      	strh	r3, [r0, #12]
 80a1b4e:	2201      	movs	r2, #1
 80a1b50:	2300      	movs	r3, #0
 80a1b52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1b58:	2200      	movs	r2, #0
 80a1b5a:	611d      	str	r5, [r3, #16]
 80a1b5c:	615a      	str	r2, [r3, #20]
 80a1b5e:	bd38      	pop	{r3, r4, r5, pc}
 80a1b60:	2000036c 	.word	0x2000036c

080a1b64 <strcpy>:
 80a1b64:	4603      	mov	r3, r0
 80a1b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1b6a:	f803 2b01 	strb.w	r2, [r3], #1
 80a1b6e:	2a00      	cmp	r2, #0
 80a1b70:	d1f9      	bne.n	80a1b66 <strcpy+0x2>
 80a1b72:	4770      	bx	lr

080a1b74 <strlen>:
 80a1b74:	4603      	mov	r3, r0
 80a1b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1b7a:	2a00      	cmp	r2, #0
 80a1b7c:	d1fb      	bne.n	80a1b76 <strlen+0x2>
 80a1b7e:	1a18      	subs	r0, r3, r0
 80a1b80:	3801      	subs	r0, #1
 80a1b82:	4770      	bx	lr

080a1b84 <_strtol_r>:
 80a1b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1b88:	460f      	mov	r7, r1
 80a1b8a:	4680      	mov	r8, r0
 80a1b8c:	483f      	ldr	r0, [pc, #252]	; (80a1c8c <_strtol_r+0x108>)
 80a1b8e:	f8d0 9000 	ldr.w	r9, [r0]
 80a1b92:	463d      	mov	r5, r7
 80a1b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1b98:	eb09 0004 	add.w	r0, r9, r4
 80a1b9c:	7840      	ldrb	r0, [r0, #1]
 80a1b9e:	f000 0008 	and.w	r0, r0, #8
 80a1ba2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1ba6:	b108      	cbz	r0, 80a1bac <_strtol_r+0x28>
 80a1ba8:	462f      	mov	r7, r5
 80a1baa:	e7f2      	b.n	80a1b92 <_strtol_r+0xe>
 80a1bac:	2c2d      	cmp	r4, #45	; 0x2d
 80a1bae:	d103      	bne.n	80a1bb8 <_strtol_r+0x34>
 80a1bb0:	1cbd      	adds	r5, r7, #2
 80a1bb2:	787c      	ldrb	r4, [r7, #1]
 80a1bb4:	2601      	movs	r6, #1
 80a1bb6:	e003      	b.n	80a1bc0 <_strtol_r+0x3c>
 80a1bb8:	2c2b      	cmp	r4, #43	; 0x2b
 80a1bba:	bf04      	itt	eq
 80a1bbc:	787c      	ldrbeq	r4, [r7, #1]
 80a1bbe:	1cbd      	addeq	r5, r7, #2
 80a1bc0:	b113      	cbz	r3, 80a1bc8 <_strtol_r+0x44>
 80a1bc2:	2b10      	cmp	r3, #16
 80a1bc4:	d10a      	bne.n	80a1bdc <_strtol_r+0x58>
 80a1bc6:	e05b      	b.n	80a1c80 <_strtol_r+0xfc>
 80a1bc8:	2c30      	cmp	r4, #48	; 0x30
 80a1bca:	d157      	bne.n	80a1c7c <_strtol_r+0xf8>
 80a1bcc:	7828      	ldrb	r0, [r5, #0]
 80a1bce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1bd2:	2858      	cmp	r0, #88	; 0x58
 80a1bd4:	d14d      	bne.n	80a1c72 <_strtol_r+0xee>
 80a1bd6:	786c      	ldrb	r4, [r5, #1]
 80a1bd8:	2310      	movs	r3, #16
 80a1bda:	3502      	adds	r5, #2
 80a1bdc:	2e00      	cmp	r6, #0
 80a1bde:	bf14      	ite	ne
 80a1be0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1be4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a1be8:	fbbc faf3 	udiv	sl, ip, r3
 80a1bec:	2700      	movs	r7, #0
 80a1bee:	4638      	mov	r0, r7
 80a1bf0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a1bf4:	eb09 0e04 	add.w	lr, r9, r4
 80a1bf8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1bfc:	f01e 0f04 	tst.w	lr, #4
 80a1c00:	d001      	beq.n	80a1c06 <_strtol_r+0x82>
 80a1c02:	3c30      	subs	r4, #48	; 0x30
 80a1c04:	e00b      	b.n	80a1c1e <_strtol_r+0x9a>
 80a1c06:	f01e 0e03 	ands.w	lr, lr, #3
 80a1c0a:	d01b      	beq.n	80a1c44 <_strtol_r+0xc0>
 80a1c0c:	f1be 0f01 	cmp.w	lr, #1
 80a1c10:	bf0c      	ite	eq
 80a1c12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a1c16:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a1c1a:	ebce 0404 	rsb	r4, lr, r4
 80a1c1e:	42a3      	cmp	r3, r4
 80a1c20:	dd10      	ble.n	80a1c44 <_strtol_r+0xc0>
 80a1c22:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a1c26:	d00a      	beq.n	80a1c3e <_strtol_r+0xba>
 80a1c28:	4550      	cmp	r0, sl
 80a1c2a:	d806      	bhi.n	80a1c3a <_strtol_r+0xb6>
 80a1c2c:	d101      	bne.n	80a1c32 <_strtol_r+0xae>
 80a1c2e:	4564      	cmp	r4, ip
 80a1c30:	dc03      	bgt.n	80a1c3a <_strtol_r+0xb6>
 80a1c32:	fb03 4000 	mla	r0, r3, r0, r4
 80a1c36:	2701      	movs	r7, #1
 80a1c38:	e001      	b.n	80a1c3e <_strtol_r+0xba>
 80a1c3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a1c3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1c42:	e7d7      	b.n	80a1bf4 <_strtol_r+0x70>
 80a1c44:	1c7b      	adds	r3, r7, #1
 80a1c46:	d10c      	bne.n	80a1c62 <_strtol_r+0xde>
 80a1c48:	2e00      	cmp	r6, #0
 80a1c4a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a1c4e:	bf14      	ite	ne
 80a1c50:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1c54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1c58:	f8c8 3000 	str.w	r3, [r8]
 80a1c5c:	b92a      	cbnz	r2, 80a1c6a <_strtol_r+0xe6>
 80a1c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1c62:	b106      	cbz	r6, 80a1c66 <_strtol_r+0xe2>
 80a1c64:	4240      	negs	r0, r0
 80a1c66:	b172      	cbz	r2, 80a1c86 <_strtol_r+0x102>
 80a1c68:	b107      	cbz	r7, 80a1c6c <_strtol_r+0xe8>
 80a1c6a:	1e69      	subs	r1, r5, #1
 80a1c6c:	6011      	str	r1, [r2, #0]
 80a1c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1c72:	2430      	movs	r4, #48	; 0x30
 80a1c74:	2b00      	cmp	r3, #0
 80a1c76:	d1b1      	bne.n	80a1bdc <_strtol_r+0x58>
 80a1c78:	2308      	movs	r3, #8
 80a1c7a:	e7af      	b.n	80a1bdc <_strtol_r+0x58>
 80a1c7c:	230a      	movs	r3, #10
 80a1c7e:	e7ad      	b.n	80a1bdc <_strtol_r+0x58>
 80a1c80:	2c30      	cmp	r4, #48	; 0x30
 80a1c82:	d0a3      	beq.n	80a1bcc <_strtol_r+0x48>
 80a1c84:	e7aa      	b.n	80a1bdc <_strtol_r+0x58>
 80a1c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1c8a:	bf00      	nop
 80a1c8c:	20000308 	.word	0x20000308

080a1c90 <strtol>:
 80a1c90:	4613      	mov	r3, r2
 80a1c92:	460a      	mov	r2, r1
 80a1c94:	4601      	mov	r1, r0
 80a1c96:	4802      	ldr	r0, [pc, #8]	; (80a1ca0 <strtol+0x10>)
 80a1c98:	6800      	ldr	r0, [r0, #0]
 80a1c9a:	f7ff bf73 	b.w	80a1b84 <_strtol_r>
 80a1c9e:	bf00      	nop
 80a1ca0:	2000036c 	.word	0x2000036c

080a1ca4 <dynalib_user>:
 80a1ca4:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1cb4:	00000000 69726553 6f206c61 006e6570     ....Serial open.
 80a1cc4:	736e6553 6320726f 656e6e6f 64657463     Sensor connected
 80a1cd4:	78616d00 746f6870 00356e6f 64616572     .maxphoton5.read
 80a1ce4:	3a676e69 69440020 6e617473 203a6563     ing: .Distance: 
 80a1cf4:	73696400 636e6174 6e490065 61722074     .distance.Int ra
 80a1d04:	3a65676e 04000020 5454514d 4d060004     nge: ...MQTT...M
 80a1d14:	64734951 00000370                       QIsdp...

080a1d1c <_ZTV9IPAddress>:
	...
 80a1d24:	080a0a87 080a0a79 080a0a7b 6e6c0066     ....y...{...f.ln
 80a1d34:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a1d44:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a1d54:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a1d64:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a1d74:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a1d84:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a1d94:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a1da4:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a1db4:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a1dc4:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a1dd4:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a1de4:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a1df4:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a1e04:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a1e14 <_ZTV8SPIClass>:
	...
 80a1e1c:	080a0ca5 080a0ca7                       ........

080a1e24 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a1e2c:	080a0ec5 080a0ecb 080a0feb 080a0ed7     ................
 80a1e3c:	080a0ec7                                ....

080a1e40 <_ZTV9TCPClient>:
	...
 80a1e48:	080a0241 080a0275 080a0e81 080a0e9b     A...u...........
 80a1e58:	080a1069 080a0fb7 080a0f89 080a0ec3     i...............
 80a1e68:	080a119d 080a0edd 080a1007 080a10e5     ................
 80a1e78:	080a12ed 080a133f 080a0eab 080a12b1     ....?...........
 80a1e88:	080a0f69 69726977 5400676e 6c435043     i...wiring.TCPCl
 80a1e98:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a1ea8:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a1eb8:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a1ec8:	74637361 00656d69                       asctime.

080a1ed0 <_ZTV11USARTSerial>:
	...
 80a1ed8:	080a1361 080a1385 080a1391 080a0b45     a...........E...
 80a1ee8:	080a136d 080a1379 080a1373 080a137f     m...y...s.......
 80a1ef8:	080a1363 080a1367                       c...g...

080a1f00 <_ZTV9USBSerial>:
	...
 80a1f08:	080a1471 080a14b5 080a148f 080a0b45     q...........E...
 80a1f18:	080a1489 080a1473 080a147b 080a14af     ....s...{.......
 80a1f28:	080a1483 080a146d                       ....m...

080a1f30 <_ZTVN5spark9WiFiClassE>:
	...
 80a1f38:	080a15b7                                ....

080a1f3c <_ZN5spark7NetworkE>:
 80a1f3c:	2000043c                                <.. 

080a1f40 <_ctype_>:
 80a1f40:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1f50:	20202020 20202020 20202020 20202020                     
 80a1f60:	10108820 10101010 10101010 10101010      ...............
 80a1f70:	04040410 04040404 10040404 10101010     ................
 80a1f80:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a1f90:	01010101 01010101 01010101 10101010     ................
 80a1fa0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a1fb0:	02020202 02020202 02020202 10101010     ................
 80a1fc0:	00000020 00000000 00000000 00000000      ...............
	...

080a2044 <__sf_fake_stdin>:
	...

080a2064 <__sf_fake_stdout>:
	...

080a2084 <__sf_fake_stderr>:
	...
 80a20a4:	00000043                                         C.

080a20a6 <link_const_variable_data_end>:
	...

080a20a8 <link_constructors_location>:
 80a20a8:	080a0209 	.word	0x080a0209
 80a20ac:	080a07b3 	.word	0x080a07b3
 80a20b0:	080a0b35 	.word	0x080a0b35
 80a20b4:	080a0c89 	.word	0x080a0c89
 80a20b8:	080a0e41 	.word	0x080a0e41
 80a20bc:	080a134d 	.word	0x080a134d
 80a20c0:	080a15c1 	.word	0x080a15c1
 80a20c4:	080a17b9 	.word	0x080a17b9
 80a20c8:	080a17e9 	.word	0x080a17e9
 80a20cc:	080a1839 	.word	0x080a1839
 80a20d0:	080a18fd 	.word	0x080a18fd
 80a20d4:	080a1981 	.word	0x080a1981
 80a20d8:	080a1a05 	.word	0x080a1a05

080a20dc <link_constructors_end>:
 80a20dc:	00000000 	.word	0x00000000
