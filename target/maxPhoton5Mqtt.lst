
/Users/raventt/MBP_Projects/arduino/maxPhoton5Mqtt/target/maxPhoton5Mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002148  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2160  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000070  20000300  080a2164  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000001c4  20000370  20000370  00030370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a21d4  080a21d4  000221d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a21fc  080a21fc  000221fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00097d02  00000000  00000000  00022200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000db03  00000000  00000000  000b9f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014982  00000000  00000000  000c7a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002010  00000000  00000000  000dc387  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033f0  00000000  00000000  000de397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022d0d  00000000  00000000  000e1787  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ebbe  00000000  00000000  00104494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b515  00000000  00000000  00123052  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ba00  00000000  00000000  001be568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	ec 1c 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fd81 	bl	80a1b34 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fd86 	bl	80a1b4a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2164 	.word	0x080a2164
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	20000534 	.word	0x20000534
 80a0058:	20000534 	.word	0x20000534

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fba3 	bl	80a17a8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2120 	.word	0x080a2120
 80a0084:	080a2154 	.word	0x080a2154

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b818 	b.w	80a00bc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f88d 	bl	80a01ac <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb49 	b.w	80a172c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bced 	b.w	80a0a78 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f000 bceb 	b.w	80a0a78 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bcf1 	b.w	80a0a88 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f000 bcef 	b.w	80a0a88 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z8callbackPcPhj>:
 * MQTT client("mqtt.eclipse.org", 1883, callback);
 **/

byte server1[] = {192, 168, 0, 103};

void callback(char *topic, byte *payload, unsigned int length) {}
 80a00ba:	4770      	bx	lr

080a00bc <setup>:
MQTT client(server1, 1883, callback);

// int alertLED = D7;

void setup()
{
 80a00bc:	b508      	push	{r3, lr}
  Serial.begin(57600); // Serial monitor
 80a00be:	f001 fa49 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a00c2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80a00c6:	f001 fa33 	bl	80a1530 <_ZN9USBSerial5beginEl>
  while (!Serial)
 80a00ca:	f001 fa43 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a00ce:	f001 fa36 	bl	80a153e <_ZN9USBSerialcvbEv>
 80a00d2:	2800      	cmp	r0, #0
 80a00d4:	d0f9      	beq.n	80a00ca <setup+0xe>
  {
    ; // wait for serial port to connect.
  }
  Serial.println("Serial open");
 80a00d6:	f001 fa3d 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a00da:	4914      	ldr	r1, [pc, #80]	; (80a012c <setup+0x70>)
 80a00dc:	f000 fd8f 	bl	80a0bfe <_ZN5Print7printlnEPKc>
  // set the data rate from the sensor
  Serial1.begin(9600, SERIAL_8N1); // Default but set explicitly anyway
 80a00e0:	f001 f9a8 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a00e4:	2200      	movs	r2, #0
 80a00e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ea:	f001 f99d 	bl	80a1428 <_ZN11USARTSerial5beginEmm>
  while (!Serial1)
 80a00ee:	f001 f9a1 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a00f2:	f001 f99d 	bl	80a1430 <_ZN11USARTSerialcvbEv>
 80a00f6:	2800      	cmp	r0, #0
 80a00f8:	d0f9      	beq.n	80a00ee <setup+0x32>
  {
    ; // wait for Serial1 port to connect.
  }
  Serial.println("Sensor connected");
 80a00fa:	f001 fa2b 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a00fe:	490c      	ldr	r1, [pc, #48]	; (80a0130 <setup+0x74>)
 80a0100:	f000 fd7d 	bl	80a0bfe <_ZN5Print7printlnEPKc>
 80a0104:	4b0b      	ldr	r3, [pc, #44]	; (80a0134 <setup+0x78>)
  client.connect(clientID);
 80a0106:	480c      	ldr	r0, [pc, #48]	; (80a0138 <setup+0x7c>)
 80a0108:	6819      	ldr	r1, [r3, #0]
 80a010a:	f000 facf 	bl	80a06ac <_ZN4MQTT7connectEPKc>
  if (client.isConnected()) {
 80a010e:	480a      	ldr	r0, [pc, #40]	; (80a0138 <setup+0x7c>)
 80a0110:	f000 f9e7 	bl	80a04e2 <_ZN4MQTT11isConnectedEv>
 80a0114:	b118      	cbz	r0, 80a011e <setup+0x62>
    Serial.println("Connected to broker");
 80a0116:	f001 fa1d 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a011a:	4908      	ldr	r1, [pc, #32]	; (80a013c <setup+0x80>)
 80a011c:	e002      	b.n	80a0124 <setup+0x68>
  } else {
    Serial.println("Failed to connect to broker");
 80a011e:	f001 fa19 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a0122:	4907      	ldr	r1, [pc, #28]	; (80a0140 <setup+0x84>)
  }
  // pinMode(alertLED, OUTPUT);
}
 80a0124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Sensor connected");
  client.connect(clientID);
  if (client.isConnected()) {
    Serial.println("Connected to broker");
  } else {
    Serial.println("Failed to connect to broker");
 80a0128:	f000 bd69 	b.w	80a0bfe <_ZN5Print7printlnEPKc>
 80a012c:	080a1d00 	.word	0x080a1d00
 80a0130:	080a1d0c 	.word	0x080a1d0c
 80a0134:	20000374 	.word	0x20000374
 80a0138:	20000384 	.word	0x20000384
 80a013c:	080a1d1d 	.word	0x080a1d1d
 80a0140:	080a1d31 	.word	0x080a1d31

080a0144 <_Z7maxReadv>:
  delay(5000);
}

// uint16_t maxRead() {
String maxRead()
{                           // get a data string back from reading sensor
 80a0144:	b538      	push	{r3, r4, r5, lr}
  char inChar;              // type for data read
  const uint8_t length = 3; // number of ascii numeric characters in sensor data. Adjust for sensor type
  // char charArray[length];       // array to store range data
  String reading = ""; // empty string to add data
 80a0146:	4917      	ldr	r1, [pc, #92]	; (80a01a4 <_Z7maxReadv+0x60>)
  delay(5000);
}

// uint16_t maxRead() {
String maxRead()
{                           // get a data string back from reading sensor
 80a0148:	4605      	mov	r5, r0
  char inChar;              // type for data read
  const uint8_t length = 3; // number of ascii numeric characters in sensor data. Adjust for sensor type
  // char charArray[length];       // array to store range data
  String reading = ""; // empty string to add data
 80a014a:	f000 fe32 	bl	80a0db2 <_ZN6StringC1EPK19__FlashStringHelper>
  uint8_t i = 0;       // initialize counter
 80a014e:	2400      	movs	r4, #0

  while (Serial1.available())
 80a0150:	f001 f970 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a0154:	6803      	ldr	r3, [r0, #0]
 80a0156:	691b      	ldr	r3, [r3, #16]
 80a0158:	4798      	blx	r3
 80a015a:	b300      	cbz	r0, 80a019e <_Z7maxReadv+0x5a>
  {
    inChar = Serial1.read(); // continuously read sensor input in while loop
 80a015c:	f001 f96a 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a0160:	6803      	ldr	r3, [r0, #0]
 80a0162:	695b      	ldr	r3, [r3, #20]
 80a0164:	4798      	blx	r3
    if (inChar == 'R')
 80a0166:	b2c0      	uxtb	r0, r0
 80a0168:	2852      	cmp	r0, #82	; 0x52
 80a016a:	d1f1      	bne.n	80a0150 <_Z7maxReadv+0xc>
    { // test if char == R for beginning data
      // Serial.println("Got an R");  // Debug
      while (i < length)
 80a016c:	2c03      	cmp	r4, #3
 80a016e:	d0ef      	beq.n	80a0150 <_Z7maxReadv+0xc>
      {
        // charArray[i] = Serial1.read(); // assign input char to charArray index
        reading += (Serial1.read() - '0'); // convert ASCII DEC to single numeral, add to range reading
 80a0170:	f001 f960 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a0174:	6803      	ldr	r3, [r0, #0]
                                           // Serial.print("char: ");        // debug
        Serial.print("reading: ");         // Display data accumulation
                                           // Serial.println(charArray[i]);
        Serial.println(reading);
        i++;
 80a0176:	3401      	adds	r4, #1
    { // test if char == R for beginning data
      // Serial.println("Got an R");  // Debug
      while (i < length)
      {
        // charArray[i] = Serial1.read(); // assign input char to charArray index
        reading += (Serial1.read() - '0'); // convert ASCII DEC to single numeral, add to range reading
 80a0178:	695b      	ldr	r3, [r3, #20]
 80a017a:	4798      	blx	r3
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
 80a017c:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80a0180:	4628      	mov	r0, r5
 80a0182:	f000 fe6b 	bl	80a0e5c <_ZN6String6concatEi>
                                           // Serial.print("char: ");        // debug
        Serial.print("reading: ");         // Display data accumulation
 80a0186:	f001 f9e5 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a018a:	4907      	ldr	r1, [pc, #28]	; (80a01a8 <_Z7maxReadv+0x64>)
 80a018c:	f000 fd24 	bl	80a0bd8 <_ZN5Print5printEPKc>
                                           // Serial.println(charArray[i]);
        Serial.println(reading);
 80a0190:	f001 f9e0 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a0194:	6829      	ldr	r1, [r5, #0]
 80a0196:	f000 fd32 	bl	80a0bfe <_ZN5Print7printlnEPKc>
        i++;
 80a019a:	b2e4      	uxtb	r4, r4
  {
    inChar = Serial1.read(); // continuously read sensor input in while loop
    if (inChar == 'R')
    { // test if char == R for beginning data
      // Serial.println("Got an R");  // Debug
      while (i < length)
 80a019c:	e7e6      	b.n	80a016c <_Z7maxReadv+0x28>
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
  return reading; // return range reading as a string
 80a019e:	4628      	mov	r0, r5
 80a01a0:	bd38      	pop	{r3, r4, r5, pc}
 80a01a2:	bf00      	nop
 80a01a4:	080a1dbe 	.word	0x080a1dbe
 80a01a8:	080a1d4d 	.word	0x080a1d4d

080a01ac <loop>:

}


void loop()
{
 80a01ac:	b510      	push	{r4, lr}
 80a01ae:	b088      	sub	sp, #32
  // uint16_t range = maxRead();
  String range = maxRead();
 80a01b0:	4668      	mov	r0, sp
 80a01b2:	f7ff ffc7 	bl	80a0144 <_Z7maxReadv>
  Serial.print("Distance: ");
 80a01b6:	f001 f9cd 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a01ba:	4918      	ldr	r1, [pc, #96]	; (80a021c <loop+0x70>)
 80a01bc:	f000 fd0c 	bl	80a0bd8 <_ZN5Print5printEPKc>
  Serial.println(range);
 80a01c0:	f001 f9c8 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a01c4:	9900      	ldr	r1, [sp, #0]
 80a01c6:	f000 fd1a 	bl	80a0bfe <_ZN5Print7printlnEPKc>
  String payload = range;
 80a01ca:	4669      	mov	r1, sp
 80a01cc:	a804      	add	r0, sp, #16
 80a01ce:	f000 fe12 	bl	80a0df6 <_ZN6StringC1ERKS_>
  if (client.isConnected())
 80a01d2:	4813      	ldr	r0, [pc, #76]	; (80a0220 <loop+0x74>)
 80a01d4:	f000 f985 	bl	80a04e2 <_ZN4MQTT11isConnectedEv>
 80a01d8:	b120      	cbz	r0, 80a01e4 <loop+0x38>
  {
    client.publish("distance", payload);
 80a01da:	9a04      	ldr	r2, [sp, #16]
 80a01dc:	4911      	ldr	r1, [pc, #68]	; (80a0224 <loop+0x78>)
 80a01de:	4810      	ldr	r0, [pc, #64]	; (80a0220 <loop+0x74>)
 80a01e0:	f000 fae3 	bl	80a07aa <_ZN4MQTT7publishEPKcS1_>
  }
  Serial.print("Int range: ");
 80a01e4:	f001 f9b6 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a01e8:	490f      	ldr	r1, [pc, #60]	; (80a0228 <loop+0x7c>)
 80a01ea:	f000 fcf5 	bl	80a0bd8 <_ZN5Print5printEPKc>
  Serial.println((range).toInt());
 80a01ee:	f001 f9b1 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a01f2:	4604      	mov	r4, r0
 80a01f4:	4668      	mov	r0, sp
 80a01f6:	f000 fe42 	bl	80a0e7e <_ZNK6String5toIntEv>
 80a01fa:	220a      	movs	r2, #10
 80a01fc:	4601      	mov	r1, r0
 80a01fe:	4620      	mov	r0, r4
 80a0200:	f000 fd55 	bl	80a0cae <_ZN5Print7printlnEli>

  delay(5000);
 80a0204:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0208:	f000 fc4e 	bl	80a0aa8 <delay>
{
  // uint16_t range = maxRead();
  String range = maxRead();
  Serial.print("Distance: ");
  Serial.println(range);
  String payload = range;
 80a020c:	a804      	add	r0, sp, #16
 80a020e:	f000 fd89 	bl	80a0d24 <_ZN6StringD1Ev>


void loop()
{
  // uint16_t range = maxRead();
  String range = maxRead();
 80a0212:	4668      	mov	r0, sp
 80a0214:	f000 fd86 	bl	80a0d24 <_ZN6StringD1Ev>
  }
  Serial.print("Int range: ");
  Serial.println((range).toInt());

  delay(5000);
}
 80a0218:	b008      	add	sp, #32
 80a021a:	bd10      	pop	{r4, pc}
 80a021c:	080a1d57 	.word	0x080a1d57
 80a0220:	20000384 	.word	0x20000384
 80a0224:	080a1d62 	.word	0x080a1d62
 80a0228:	080a1d6b 	.word	0x080a1d6b

080a022c <_GLOBAL__sub_I_server1>:
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
  return reading; // return range reading as a string
 80a022c:	b538      	push	{r3, r4, r5, lr}

byte server1[] = {192, 168, 0, 103};

void callback(char *topic, byte *payload, unsigned int length) {}

String clientID = "maxPhoton5";
 80a022e:	4c0e      	ldr	r4, [pc, #56]	; (80a0268 <_GLOBAL__sub_I_server1+0x3c>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0230:	f000 fb06 	bl	80a0840 <HAL_Pin_Map>
 80a0234:	4d0d      	ldr	r5, [pc, #52]	; (80a026c <_GLOBAL__sub_I_server1+0x40>)
 80a0236:	490e      	ldr	r1, [pc, #56]	; (80a0270 <_GLOBAL__sub_I_server1+0x44>)
 80a0238:	4620      	mov	r0, r4
 80a023a:	f000 fdba 	bl	80a0db2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a023e:	4620      	mov	r0, r4

MQTT client(server1, 1883, callback);
 80a0240:	4c0c      	ldr	r4, [pc, #48]	; (80a0274 <_GLOBAL__sub_I_server1+0x48>)

byte server1[] = {192, 168, 0, 103};

void callback(char *topic, byte *payload, unsigned int length) {}

String clientID = "maxPhoton5";
 80a0242:	462a      	mov	r2, r5
 80a0244:	490c      	ldr	r1, [pc, #48]	; (80a0278 <_GLOBAL__sub_I_server1+0x4c>)
 80a0246:	f001 fb15 	bl	80a1874 <__aeabi_atexit>

MQTT client(server1, 1883, callback);
 80a024a:	4b0c      	ldr	r3, [pc, #48]	; (80a027c <_GLOBAL__sub_I_server1+0x50>)
 80a024c:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0250:	490b      	ldr	r1, [pc, #44]	; (80a0280 <_GLOBAL__sub_I_server1+0x54>)
 80a0252:	4620      	mov	r0, r4
 80a0254:	f000 f85e 	bl	80a0314 <_ZN4MQTTC1EPhtPFvPcS0_jE>
 80a0258:	462a      	mov	r2, r5
 80a025a:	4620      	mov	r0, r4
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
  return reading; // return range reading as a string
 80a025c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void callback(char *topic, byte *payload, unsigned int length) {}

String clientID = "maxPhoton5";

MQTT client(server1, 1883, callback);
 80a0260:	4908      	ldr	r1, [pc, #32]	; (80a0284 <_GLOBAL__sub_I_server1+0x58>)
 80a0262:	f001 bb07 	b.w	80a1874 <__aeabi_atexit>
 80a0266:	bf00      	nop
 80a0268:	20000374 	.word	0x20000374
 80a026c:	20000370 	.word	0x20000370
 80a0270:	080a1d77 	.word	0x080a1d77
 80a0274:	20000384 	.word	0x20000384
 80a0278:	080a0d25 	.word	0x080a0d25
 80a027c:	080a00bb 	.word	0x080a00bb
 80a0280:	20000300 	.word	0x20000300
 80a0284:	080a07d1 	.word	0x080a07d1

080a0288 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0288:	b538      	push	{r3, r4, r5, lr}
 80a028a:	4b0b      	ldr	r3, [pc, #44]	; (80a02b8 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a028c:	6984      	ldr	r4, [r0, #24]
 80a028e:	4605      	mov	r5, r0
 80a0290:	6003      	str	r3, [r0, #0]
 80a0292:	b17c      	cbz	r4, 80a02b4 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0294:	6863      	ldr	r3, [r4, #4]
 80a0296:	3b01      	subs	r3, #1
 80a0298:	6063      	str	r3, [r4, #4]
 80a029a:	b95b      	cbnz	r3, 80a02b4 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a029c:	6823      	ldr	r3, [r4, #0]
 80a029e:	4620      	mov	r0, r4
 80a02a0:	689b      	ldr	r3, [r3, #8]
 80a02a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02a4:	68a3      	ldr	r3, [r4, #8]
 80a02a6:	3b01      	subs	r3, #1
 80a02a8:	60a3      	str	r3, [r4, #8]
 80a02aa:	b91b      	cbnz	r3, 80a02b4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a02ac:	6823      	ldr	r3, [r4, #0]
 80a02ae:	4620      	mov	r0, r4
 80a02b0:	68db      	ldr	r3, [r3, #12]
 80a02b2:	4798      	blx	r3
 80a02b4:	4628      	mov	r0, r5
 80a02b6:	bd38      	pop	{r3, r4, r5, pc}
 80a02b8:	080a1ec0 	.word	0x080a1ec0

080a02bc <_ZN9TCPClientD0Ev>:
 80a02bc:	b510      	push	{r4, lr}
 80a02be:	4604      	mov	r4, r0
 80a02c0:	f7ff ffe2 	bl	80a0288 <_ZN9TCPClientD1Ev>
 80a02c4:	4620      	mov	r0, r4
 80a02c6:	f7ff feec 	bl	80a00a2 <_ZdlPv>
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	bd10      	pop	{r4, pc}

080a02ce <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02ce:	b538      	push	{r3, r4, r5, lr}
 80a02d0:	461d      	mov	r5, r3
    this->callback = callback;
 80a02d2:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02d4:	4604      	mov	r4, r0
    this->callback = callback;
 80a02d6:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a02d8:	2300      	movs	r3, #0
 80a02da:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a02dc:	b102      	cbz	r2, 80a02e0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a02de:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a02e0:	b119      	cbz	r1, 80a02ea <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a02e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a02e6:	f000 fd91 	bl	80a0e0c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a02ea:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a02ec:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a02ee:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02f0:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a02f2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02f6:	2bff      	cmp	r3, #255	; 0xff
 80a02f8:	bfb8      	it	lt
 80a02fa:	23ff      	movlt	r3, #255	; 0xff
 80a02fc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0300:	b108      	cbz	r0, 80a0306 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0302:	f7ff fed0 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0306:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a030a:	f7ff fec8 	bl	80a009e <_Znaj>
 80a030e:	61e0      	str	r0, [r4, #28]
 80a0310:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0314 <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0318:	4604      	mov	r4, r0
 80a031a:	4617      	mov	r7, r2
 80a031c:	4698      	mov	r8, r3
 80a031e:	460e      	mov	r6, r1
 80a0320:	2500      	movs	r5, #0
 80a0322:	f000 ff55 	bl	80a11d0 <_ZN9TCPClientC1Ev>
 80a0326:	61e5      	str	r5, [r4, #28]
 80a0328:	490a      	ldr	r1, [pc, #40]	; (80a0354 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
 80a032a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a032e:	f000 fd40 	bl	80a0db2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0332:	23ff      	movs	r3, #255	; 0xff
 80a0334:	9302      	str	r3, [sp, #8]
 80a0336:	230f      	movs	r3, #15
 80a0338:	9300      	str	r3, [sp, #0]
 80a033a:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a033c:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a033e:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0342:	463b      	mov	r3, r7
 80a0344:	4632      	mov	r2, r6
 80a0346:	4629      	mov	r1, r5
 80a0348:	f7ff ffc1 	bl	80a02ce <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a034c:	4620      	mov	r0, r4
 80a034e:	b004      	add	sp, #16
 80a0350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0354:	080a1dbe 	.word	0x080a1dbe

080a0358 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0358:	b510      	push	{r4, lr}
 80a035a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a035c:	4620      	mov	r0, r4
 80a035e:	f000 fea7 	bl	80a10b0 <_ZN9TCPClient9availableEv>
 80a0362:	2800      	cmp	r0, #0
 80a0364:	d0fa      	beq.n	80a035c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0366:	4620      	mov	r0, r4
 80a0368:	f000 fe49 	bl	80a0ffe <_ZN9TCPClient4readEv>
}
 80a036c:	b2c0      	uxtb	r0, r0
 80a036e:	bd10      	pop	{r4, pc}

080a0370 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0374:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0376:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0378:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a037a:	f7ff ffed 	bl	80a0358 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a037e:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0382:	4646      	mov	r6, r8
 80a0384:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0386:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0388:	2700      	movs	r7, #0
 80a038a:	f893 9000 	ldrb.w	r9, [r3]
 80a038e:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0392:	4628      	mov	r0, r5
 80a0394:	f7ff ffe0 	bl	80a0358 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0398:	69eb      	ldr	r3, [r5, #28]
 80a039a:	1c74      	adds	r4, r6, #1
 80a039c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a039e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a03a2:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a03a6:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a03a8:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a03aa:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a03ac:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a03b0:	d501      	bpl.n	80a03b6 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a03b2:	4626      	mov	r6, r4
 80a03b4:	e7ed      	b.n	80a0392 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a03b6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a03b8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a03bc:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a03c0:	d113      	bne.n	80a03ea <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a03c2:	4628      	mov	r0, r5
 80a03c4:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03c8:	f7ff ffc6 	bl	80a0358 <_ZN4MQTT8readByteEv>
 80a03cc:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a03d0:	4628      	mov	r0, r5
 80a03d2:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03d6:	f7ff ffbf 	bl	80a0358 <_ZN4MQTT8readByteEv>
 80a03da:	1cf4      	adds	r4, r6, #3
 80a03dc:	3602      	adds	r6, #2
 80a03de:	b2b6      	uxth	r6, r6
 80a03e0:	b2a4      	uxth	r4, r4
 80a03e2:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a03e6:	2302      	movs	r3, #2
 80a03e8:	e000      	b.n	80a03ec <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a03ea:	2300      	movs	r3, #0
 80a03ec:	1b1b      	subs	r3, r3, r4
 80a03ee:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a03f0:	19a3      	adds	r3, r4, r6
 80a03f2:	b29b      	uxth	r3, r3
 80a03f4:	429f      	cmp	r7, r3
 80a03f6:	d90b      	bls.n	80a0410 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a03f8:	4628      	mov	r0, r5
 80a03fa:	f7ff ffad 	bl	80a0358 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a03fe:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0402:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0404:	bf84      	itt	hi
 80a0406:	69eb      	ldrhi	r3, [r5, #28]
 80a0408:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a040a:	3401      	adds	r4, #1
 80a040c:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a040e:	e7ef      	b.n	80a03f0 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0410:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0414:	42a0      	cmp	r0, r4
 80a0416:	bf2c      	ite	cs
 80a0418:	4620      	movcs	r0, r4
 80a041a:	2000      	movcc	r0, #0
 80a041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0420 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0422:	4607      	mov	r7, r0
 80a0424:	468e      	mov	lr, r1
 80a0426:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0428:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a042a:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a042c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0430:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0432:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0434:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0436:	bf18      	it	ne
 80a0438:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a043c:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a043e:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0442:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0444:	2d00      	cmp	r5, #0
 80a0446:	d1f1      	bne.n	80a042c <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0448:	f1c4 0304 	rsb	r3, r4, #4
 80a044c:	18d1      	adds	r1, r2, r3
 80a044e:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0452:	42a5      	cmp	r5, r4
 80a0454:	da06      	bge.n	80a0464 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0456:	a801      	add	r0, sp, #4
 80a0458:	1b2b      	subs	r3, r5, r4
 80a045a:	5c28      	ldrb	r0, [r5, r0]
 80a045c:	4413      	add	r3, r2
 80a045e:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0460:	3501      	adds	r5, #1
 80a0462:	e7f6      	b.n	80a0452 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0464:	1c72      	adds	r2, r6, #1
 80a0466:	4422      	add	r2, r4
 80a0468:	4638      	mov	r0, r7
 80a046a:	f000 fd3a 	bl	80a0ee2 <_ZN9TCPClient5writeEPKhj>
 80a046e:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0470:	f000 f9de 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0474:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0476:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0478:	4434      	add	r4, r6
 80a047a:	b2a8      	uxth	r0, r5
}
 80a047c:	1a23      	subs	r3, r4, r0
 80a047e:	4258      	negs	r0, r3
 80a0480:	4158      	adcs	r0, r3
 80a0482:	b003      	add	sp, #12
 80a0484:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0486 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0486:	b510      	push	{r4, lr}
 80a0488:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a048a:	69c3      	ldr	r3, [r0, #28]
 80a048c:	22e0      	movs	r2, #224	; 0xe0
 80a048e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0490:	69c3      	ldr	r3, [r0, #28]
 80a0492:	2200      	movs	r2, #0
 80a0494:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0496:	69c1      	ldr	r1, [r0, #28]
 80a0498:	2202      	movs	r2, #2
 80a049a:	f000 fd22 	bl	80a0ee2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a049e:	4620      	mov	r0, r4
 80a04a0:	f000 fe44 	bl	80a112c <_ZN9TCPClient4stopEv>
 80a04a4:	f000 f9c4 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a04a8:	6260      	str	r0, [r4, #36]	; 0x24
 80a04aa:	62a0      	str	r0, [r4, #40]	; 0x28
 80a04ac:	bd10      	pop	{r4, pc}

080a04ae <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a04ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a04b0:	460d      	mov	r5, r1
 80a04b2:	3302      	adds	r3, #2
 80a04b4:	b29b      	uxth	r3, r3
 80a04b6:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a04b8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a04bc:	b2a4      	uxth	r4, r4
 80a04be:	b13e      	cbz	r6, 80a04d0 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a04c0:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a04c4:	429f      	cmp	r7, r3
 80a04c6:	d903      	bls.n	80a04d0 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a04c8:	1c5c      	adds	r4, r3, #1
 80a04ca:	54d6      	strb	r6, [r2, r3]
 80a04cc:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a04ce:	e7f2      	b.n	80a04b6 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a04d0:	1b19      	subs	r1, r3, r4
 80a04d2:	440a      	add	r2, r1
 80a04d4:	1221      	asrs	r1, r4, #8
 80a04d6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a04da:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a04de:	4618      	mov	r0, r3
 80a04e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a04e2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a04e2:	b538      	push	{r3, r4, r5, lr}
 80a04e4:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a04e6:	f000 ff25 	bl	80a1334 <_ZN9TCPClient9connectedEv>
 80a04ea:	2800      	cmp	r0, #0
 80a04ec:	bf14      	ite	ne
 80a04ee:	2401      	movne	r4, #1
 80a04f0:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a04f2:	d102      	bne.n	80a04fa <_ZN4MQTT11isConnectedEv+0x18>
 80a04f4:	4628      	mov	r0, r5
 80a04f6:	f000 fe19 	bl	80a112c <_ZN9TCPClient4stopEv>
    return rc;
}
 80a04fa:	4620      	mov	r0, r4
 80a04fc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0500 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0504:	b087      	sub	sp, #28
 80a0506:	4604      	mov	r4, r0
 80a0508:	4689      	mov	r9, r1
 80a050a:	4617      	mov	r7, r2
 80a050c:	461e      	mov	r6, r3
 80a050e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0512:	f7ff ffe6 	bl	80a04e2 <_ZN4MQTT11isConnectedEv>
 80a0516:	4605      	mov	r5, r0
 80a0518:	2800      	cmp	r0, #0
 80a051a:	f040 80bd 	bne.w	80a0698 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a051e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0520:	b939      	cbnz	r1, 80a0532 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0522:	4603      	mov	r3, r0
 80a0524:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0528:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a052a:	4620      	mov	r0, r4
 80a052c:	f000 fcfa 	bl	80a0f24 <_ZN9TCPClient7connectEPKctm>
 80a0530:	e009      	b.n	80a0546 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0532:	4668      	mov	r0, sp
 80a0534:	f000 fb18 	bl	80a0b68 <_ZN9IPAddressC1EPKh>
 80a0538:	462b      	mov	r3, r5
 80a053a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a053e:	4669      	mov	r1, sp
 80a0540:	4620      	mov	r0, r4
 80a0542:	f000 fe4f 	bl	80a11e4 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0546:	2800      	cmp	r0, #0
 80a0548:	f000 80a2 	beq.w	80a0690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a054c:	2301      	movs	r3, #1
 80a054e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0550:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0554:	2b04      	cmp	r3, #4
 80a0556:	d115      	bne.n	80a0584 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0558:	4b52      	ldr	r3, [pc, #328]	; (80a06a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a055a:	6818      	ldr	r0, [r3, #0]
 80a055c:	889a      	ldrh	r2, [r3, #4]
 80a055e:	9000      	str	r0, [sp, #0]
 80a0560:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0564:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0566:	69e2      	ldr	r2, [r4, #28]
 80a0568:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a056a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a056e:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0572:	1d53      	adds	r3, r2, #5
 80a0574:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0578:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a057c:	8099      	strh	r1, [r3, #4]
 80a057e:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0580:	230c      	movs	r3, #12
 80a0582:	e012      	b.n	80a05aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0584:	466a      	mov	r2, sp
 80a0586:	4b48      	ldr	r3, [pc, #288]	; (80a06a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0588:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a058c:	6818      	ldr	r0, [r3, #0]
 80a058e:	6859      	ldr	r1, [r3, #4]
 80a0590:	7a1b      	ldrb	r3, [r3, #8]
 80a0592:	c203      	stmia	r2!, {r0, r1}
 80a0594:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0596:	466b      	mov	r3, sp
 80a0598:	cb03      	ldmia	r3!, {r0, r1}
 80a059a:	f8cc 0005 	str.w	r0, [ip, #5]
 80a059e:	f8cc 1009 	str.w	r1, [ip, #9]
 80a05a2:	7813      	ldrb	r3, [r2, #0]
 80a05a4:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a05a8:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a05aa:	f1b8 0f00 	cmp.w	r8, #0
 80a05ae:	d00a      	beq.n	80a05c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a05b0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a05b4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a05b8:	0152      	lsls	r2, r2, #5
 80a05ba:	f042 0206 	orr.w	r2, r2, #6
 80a05be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a05c2:	b2d2      	uxtb	r2, r2
 80a05c4:	e000      	b.n	80a05c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a05c6:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a05c8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a05cc:	b909      	cbnz	r1, 80a05d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a05ce:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a05d2:	b12f      	cbz	r7, 80a05e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a05d4:	b916      	cbnz	r6, 80a05dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a05d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a05da:	e001      	b.n	80a05e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a05dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a05e0:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a05e2:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a05e4:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a05e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a05e8:	69e1      	ldr	r1, [r4, #28]
 80a05ea:	1212      	asrs	r2, r2, #8
 80a05ec:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a05ee:	69e1      	ldr	r1, [r4, #28]
 80a05f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a05f2:	1c9a      	adds	r2, r3, #2
 80a05f4:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a05f6:	3303      	adds	r3, #3
 80a05f8:	69e2      	ldr	r2, [r4, #28]
 80a05fa:	4649      	mov	r1, r9
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	f7ff ff56 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0602:	f1b8 0f00 	cmp.w	r8, #0
 80a0606:	d00b      	beq.n	80a0620 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a0608:	4603      	mov	r3, r0
 80a060a:	69e2      	ldr	r2, [r4, #28]
 80a060c:	4641      	mov	r1, r8
 80a060e:	4620      	mov	r0, r4
 80a0610:	f7ff ff4d 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0614:	69e2      	ldr	r2, [r4, #28]
 80a0616:	4603      	mov	r3, r0
 80a0618:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a061a:	4620      	mov	r0, r4
 80a061c:	f7ff ff47 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0620:	b167      	cbz	r7, 80a063c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a0622:	4603      	mov	r3, r0
 80a0624:	69e2      	ldr	r2, [r4, #28]
 80a0626:	4639      	mov	r1, r7
 80a0628:	4620      	mov	r0, r4
 80a062a:	f7ff ff40 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a062e:	b12e      	cbz	r6, 80a063c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a0630:	4603      	mov	r3, r0
 80a0632:	69e2      	ldr	r2, [r4, #28]
 80a0634:	4631      	mov	r1, r6
 80a0636:	4620      	mov	r0, r4
 80a0638:	f7ff ff39 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a063c:	1f43      	subs	r3, r0, #5
 80a063e:	b29b      	uxth	r3, r3
 80a0640:	69e2      	ldr	r2, [r4, #28]
 80a0642:	2110      	movs	r1, #16
 80a0644:	4620      	mov	r0, r4
 80a0646:	f7ff feeb 	bl	80a0420 <_ZN4MQTT5writeEhPht>
 80a064a:	f000 f8f1 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a064e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0652:	6260      	str	r0, [r4, #36]	; 0x24
 80a0654:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0656:	4620      	mov	r0, r4
 80a0658:	f000 fd2a 	bl	80a10b0 <_ZN9TCPClient9availableEv>
 80a065c:	b940      	cbnz	r0, 80a0670 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a065e:	f000 f8e7 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0664:	1ac0      	subs	r0, r0, r3
 80a0666:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0668:	4373      	muls	r3, r6
 80a066a:	4298      	cmp	r0, r3
 80a066c:	d9f3      	bls.n	80a0656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a066e:	e00f      	b.n	80a0690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0670:	4669      	mov	r1, sp
 80a0672:	4620      	mov	r0, r4
 80a0674:	f7ff fe7c 	bl	80a0370 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0678:	2804      	cmp	r0, #4
 80a067a:	d109      	bne.n	80a0690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a067c:	69e3      	ldr	r3, [r4, #28]
 80a067e:	78de      	ldrb	r6, [r3, #3]
 80a0680:	b936      	cbnz	r6, 80a0690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a0682:	f000 f8d5 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0686:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0688:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a068a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a068e:	e004      	b.n	80a069a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0690:	4620      	mov	r0, r4
 80a0692:	f000 fd4b 	bl	80a112c <_ZN9TCPClient4stopEv>
 80a0696:	e000      	b.n	80a069a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0698:	2500      	movs	r5, #0
}
 80a069a:	4628      	mov	r0, r5
 80a069c:	b007      	add	sp, #28
 80a069e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a06a2:	bf00      	nop
 80a06a4:	080a1d82 	.word	0x080a1d82
 80a06a8:	080a1d89 	.word	0x080a1d89

080a06ac <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a06ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a06ae:	2304      	movs	r3, #4
 80a06b0:	9305      	str	r3, [sp, #20]
 80a06b2:	2301      	movs	r3, #1
 80a06b4:	9304      	str	r3, [sp, #16]
 80a06b6:	2300      	movs	r3, #0
 80a06b8:	9303      	str	r3, [sp, #12]
 80a06ba:	9302      	str	r3, [sp, #8]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	9300      	str	r3, [sp, #0]
 80a06c0:	461a      	mov	r2, r3
 80a06c2:	f7ff ff1d 	bl	80a0500 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a06c6:	b007      	add	sp, #28
 80a06c8:	f85d fb04 	ldr.w	pc, [sp], #4

080a06cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a06cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a06d2:	4604      	mov	r4, r0
 80a06d4:	468b      	mov	fp, r1
 80a06d6:	4691      	mov	r9, r2
 80a06d8:	469a      	mov	sl, r3
 80a06da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a06de:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a06e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a06e6:	f7ff fefc 	bl	80a04e2 <_ZN4MQTT11isConnectedEv>
 80a06ea:	2800      	cmp	r0, #0
 80a06ec:	d04b      	beq.n	80a0786 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a06ee:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a06f2:	2100      	movs	r1, #0
 80a06f4:	69e0      	ldr	r0, [r4, #28]
 80a06f6:	f001 fa28 	bl	80a1b4a <memset>

        length = writeString(topic, buffer, length);
 80a06fa:	2305      	movs	r3, #5
 80a06fc:	69e2      	ldr	r2, [r4, #28]
 80a06fe:	4659      	mov	r1, fp
 80a0700:	4620      	mov	r0, r4
 80a0702:	f7ff fed4 	bl	80a04ae <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0706:	1e6b      	subs	r3, r5, #1
 80a0708:	2b01      	cmp	r3, #1
 80a070a:	d812      	bhi.n	80a0732 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a070c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a070e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0710:	3301      	adds	r3, #1
 80a0712:	b29b      	uxth	r3, r3
 80a0714:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0716:	121b      	asrs	r3, r3, #8
 80a0718:	5413      	strb	r3, [r2, r0]
 80a071a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a071c:	69e3      	ldr	r3, [r4, #28]
 80a071e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0720:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0722:	3002      	adds	r0, #2
 80a0724:	b280      	uxth	r0, r0
 80a0726:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0728:	b11e      	cbz	r6, 80a0732 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a072a:	8c23      	ldrh	r3, [r4, #32]
 80a072c:	1c5a      	adds	r2, r3, #1
 80a072e:	8422      	strh	r2, [r4, #32]
 80a0730:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0732:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0734:	b291      	uxth	r1, r2
 80a0736:	1883      	adds	r3, r0, r2
 80a0738:	458a      	cmp	sl, r1
 80a073a:	b29b      	uxth	r3, r3
 80a073c:	d909      	bls.n	80a0752 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a073e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0742:	3201      	adds	r2, #1
 80a0744:	429e      	cmp	r6, r3
 80a0746:	d904      	bls.n	80a0752 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0748:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a074c:	69e1      	ldr	r1, [r4, #28]
 80a074e:	54ce      	strb	r6, [r1, r3]
 80a0750:	e7f0      	b.n	80a0734 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0752:	f1b8 0f00 	cmp.w	r8, #0
 80a0756:	bf0c      	ite	eq
 80a0758:	2130      	moveq	r1, #48	; 0x30
 80a075a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a075c:	b10f      	cbz	r7, 80a0762 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a075e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0762:	2d02      	cmp	r5, #2
 80a0764:	d102      	bne.n	80a076c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0766:	f041 0104 	orr.w	r1, r1, #4
 80a076a:	e003      	b.n	80a0774 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a076c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a076e:	bf08      	it	eq
 80a0770:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0774:	4620      	mov	r0, r4
 80a0776:	3b05      	subs	r3, #5
 80a0778:	69e2      	ldr	r2, [r4, #28]
 80a077a:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a077c:	b001      	add	sp, #4
 80a077e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0782:	f7ff be4d 	b.w	80a0420 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0786:	b001      	add	sp, #4
 80a0788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a078c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a078c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a078e:	9c08      	ldr	r4, [sp, #32]
 80a0790:	9403      	str	r4, [sp, #12]
 80a0792:	2400      	movs	r4, #0
 80a0794:	9402      	str	r4, [sp, #8]
 80a0796:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a079a:	9401      	str	r4, [sp, #4]
 80a079c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a07a0:	9400      	str	r4, [sp, #0]
 80a07a2:	f7ff ff93 	bl	80a06cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a07a6:	b004      	add	sp, #16
 80a07a8:	bd10      	pop	{r4, pc}

080a07aa <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a07aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a07ac:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a07ae:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a07b0:	460e      	mov	r6, r1
 80a07b2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a07b4:	f001 fa02 	bl	80a1bbc <strlen>
 80a07b8:	2300      	movs	r3, #0
 80a07ba:	9302      	str	r3, [sp, #8]
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	9300      	str	r3, [sp, #0]
 80a07c0:	4622      	mov	r2, r4
 80a07c2:	4603      	mov	r3, r0
 80a07c4:	4631      	mov	r1, r6
 80a07c6:	4628      	mov	r0, r5
 80a07c8:	f7ff ffe0 	bl	80a078c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a07cc:	b004      	add	sp, #16
 80a07ce:	bd70      	pop	{r4, r5, r6, pc}

080a07d0 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a07d0:	b510      	push	{r4, lr}
 80a07d2:	4604      	mov	r4, r0
    if (isConnected()) {
 80a07d4:	f7ff fe85 	bl	80a04e2 <_ZN4MQTT11isConnectedEv>
 80a07d8:	b110      	cbz	r0, 80a07e0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a07da:	4620      	mov	r0, r4
 80a07dc:	f7ff fe53 	bl	80a0486 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a07e0:	69e0      	ldr	r0, [r4, #28]
 80a07e2:	b108      	cbz	r0, 80a07e8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a07e4:	f7ff fc5f 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a07e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a07ec:	f000 fa9a 	bl	80a0d24 <_ZN6StringD1Ev>
 80a07f0:	4620      	mov	r0, r4
 80a07f2:	f7ff fd49 	bl	80a0288 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	bd10      	pop	{r4, pc}

080a07fa <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a07fa:	f000 b821 	b.w	80a0840 <HAL_Pin_Map>
	...

080a0800 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <os_mutex_create+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601d0 	.word	0x080601d0

080a0810 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601b8 	.word	0x080601b8

080a0820 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <HAL_RNG_GetRandomNumber+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	685b      	ldr	r3, [r3, #4]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	0806019c 	.word	0x0806019c

080a0830 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	695b      	ldr	r3, [r3, #20]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	0806019c 	.word	0x0806019c

080a0840 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <HAL_Pin_Map+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	681b      	ldr	r3, [r3, #0]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601b0 	.word	0x080601b0

080a0850 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <socket_active_status+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	681b      	ldr	r3, [r3, #0]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601bc 	.word	0x080601bc

080a0860 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <socket_handle_valid+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	685b      	ldr	r3, [r3, #4]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601bc 	.word	0x080601bc

080a0870 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <socket_create+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	689b      	ldr	r3, [r3, #8]
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601bc 	.word	0x080601bc

080a0880 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <socket_connect+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	68db      	ldr	r3, [r3, #12]
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601bc 	.word	0x080601bc

080a0890 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <socket_receive+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	691b      	ldr	r3, [r3, #16]
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601bc 	.word	0x080601bc

080a08a0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <socket_close+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6a1b      	ldr	r3, [r3, #32]
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601bc 	.word	0x080601bc

080a08b0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <socket_handle_invalid+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601bc 	.word	0x080601bc

080a08c0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <socket_send_ex+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601bc 	.word	0x080601bc

080a08d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <HAL_SPI_Init+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	69db      	ldr	r3, [r3, #28]
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601b4 	.word	0x080601b4

080a08e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <HAL_USART_Init+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	699b      	ldr	r3, [r3, #24]
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601c4 	.word	0x080601c4

080a08f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <HAL_USART_Write_Data+0xc>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08f8:	9301      	str	r3, [sp, #4]
 80a08fa:	bd08      	pop	{r3, pc}
 80a08fc:	080601c4 	.word	0x080601c4

080a0900 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <HAL_USART_Available_Data+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601c4 	.word	0x080601c4

080a0910 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <HAL_USART_Read_Data+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601c4 	.word	0x080601c4

080a0920 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <HAL_USART_Peek_Data+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601c4 	.word	0x080601c4

080a0930 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <HAL_USART_Flush_Data+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601c4 	.word	0x080601c4

080a0940 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601c4 	.word	0x080601c4

080a0950 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <HAL_USART_BeginConfig+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601c4 	.word	0x080601c4

080a0960 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_USB_USART_Init+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	681b      	ldr	r3, [r3, #0]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601d8 	.word	0x080601d8

080a0970 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_USB_USART_Begin+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	685b      	ldr	r3, [r3, #4]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601d8 	.word	0x080601d8

080a0980 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <HAL_USB_USART_Available_Data+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	691b      	ldr	r3, [r3, #16]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601d8 	.word	0x080601d8

080a0990 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	695b      	ldr	r3, [r3, #20]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601d8 	.word	0x080601d8

080a09a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_USB_USART_Receive_Data+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	699b      	ldr	r3, [r3, #24]
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601d8 	.word	0x080601d8

080a09b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_USB_USART_Send_Data+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	69db      	ldr	r3, [r3, #28]
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601d8 	.word	0x080601d8

080a09c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_USB_USART_Flush_Data+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6a1b      	ldr	r3, [r3, #32]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601d8 	.word	0x080601d8

080a09d0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_USB_USART_Is_Enabled+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601d8 	.word	0x080601d8

080a09e0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_NET_SetNetWatchDog+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c0 	.word	0x080601c0

080a09f0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <inet_gethostbyname+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c0 	.word	0x080601c0

080a0a00 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <log_message+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080201a8 	.word	0x080201a8

080a0a10 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <set_system_mode+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	685b      	ldr	r3, [r3, #4]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601a4 	.word	0x080601a4

080a0a20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <system_delay_ms+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	695b      	ldr	r3, [r3, #20]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601a4 	.word	0x080601a4

080a0a30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b03      	ldr	r3, [pc, #12]	; (80a0a40 <system_ctrl_set_app_request_handler+0x10>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0a3a:	9301      	str	r3, [sp, #4]
 80a0a3c:	bd08      	pop	{r3, pc}
 80a0a3e:	0000      	.short	0x0000
 80a0a40:	080601a4 	.word	0x080601a4

080a0a44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b03      	ldr	r3, [pc, #12]	; (80a0a54 <system_ctrl_set_result+0x10>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0a4e:	9301      	str	r3, [sp, #4]
 80a0a50:	bd08      	pop	{r3, pc}
 80a0a52:	0000      	.short	0x0000
 80a0a54:	080601a4 	.word	0x080601a4

080a0a58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601cc 	.word	0x080601cc

080a0a68 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <network_ready+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	691b      	ldr	r3, [r3, #16]
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601c8 	.word	0x080601c8

080a0a78 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <malloc+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	681b      	ldr	r3, [r3, #0]
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601a0 	.word	0x080601a0

080a0a88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <free+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	685b      	ldr	r3, [r3, #4]
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601a0 	.word	0x080601a0

080a0a98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <realloc+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	689b      	ldr	r3, [r3, #8]
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601a0 	.word	0x080601a0

080a0aa8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0aa8:	2100      	movs	r1, #0
 80a0aaa:	f7ff bfb9 	b.w	80a0a20 <system_delay_ms>

080a0aae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0aae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0ab0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ab2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0ab4:	b113      	cbz	r3, 80a0abc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ab6:	2203      	movs	r2, #3
 80a0ab8:	4601      	mov	r1, r0
 80a0aba:	4798      	blx	r3
    }
 80a0abc:	4620      	mov	r0, r4
 80a0abe:	bd10      	pop	{r4, pc}

080a0ac0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0ac0:	4770      	bx	lr

080a0ac2 <_ZN9IPAddressD0Ev>:
 80a0ac2:	b510      	push	{r4, lr}
 80a0ac4:	4604      	mov	r4, r0
 80a0ac6:	f7ff faec 	bl	80a00a2 <_ZdlPv>
 80a0aca:	4620      	mov	r0, r4
 80a0acc:	bd10      	pop	{r4, pc}

080a0ace <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ad0:	460f      	mov	r7, r1
 80a0ad2:	f100 0608 	add.w	r6, r0, #8
 80a0ad6:	1d05      	adds	r5, r0, #4
 80a0ad8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0ade:	220a      	movs	r2, #10
 80a0ae0:	4638      	mov	r0, r7
 80a0ae2:	f000 f8c0 	bl	80a0c66 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ae6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ae8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0aea:	d007      	beq.n	80a0afc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0aec:	2c00      	cmp	r4, #0
 80a0aee:	d0f4      	beq.n	80a0ada <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0af0:	212e      	movs	r1, #46	; 0x2e
 80a0af2:	4638      	mov	r0, r7
 80a0af4:	f000 f874 	bl	80a0be0 <_ZN5Print5printEc>
 80a0af8:	4404      	add	r4, r0
 80a0afa:	e7ee      	b.n	80a0ada <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0afc:	4620      	mov	r0, r4
 80a0afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b00 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a0b00:	b510      	push	{r4, lr}
 80a0b02:	4604      	mov	r4, r0
 80a0b04:	4b04      	ldr	r3, [pc, #16]	; (80a0b18 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b06:	2211      	movs	r2, #17
 80a0b08:	f840 3b04 	str.w	r3, [r0], #4
 80a0b0c:	2100      	movs	r1, #0
 80a0b0e:	f001 f81c 	bl	80a1b4a <memset>
{
    clear();
}
 80a0b12:	4620      	mov	r0, r4
 80a0b14:	bd10      	pop	{r4, pc}
 80a0b16:	bf00      	nop
 80a0b18:	080a1d9c 	.word	0x080a1d9c

080a0b1c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0b1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0b26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0b2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0b2e:	2304      	movs	r3, #4
 80a0b30:	6041      	str	r1, [r0, #4]
 80a0b32:	7503      	strb	r3, [r0, #20]
 80a0b34:	bd10      	pop	{r4, pc}
	...

080a0b38 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b3a:	4d04      	ldr	r5, [pc, #16]	; (80a0b4c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0b3c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0b3e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0b42:	9500      	str	r5, [sp, #0]
 80a0b44:	f7ff ffea 	bl	80a0b1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b48:	b003      	add	sp, #12
 80a0b4a:	bd30      	pop	{r4, r5, pc}
 80a0b4c:	080a1d9c 	.word	0x080a1d9c

080a0b50 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0b52:	780d      	ldrb	r5, [r1, #0]
 80a0b54:	788b      	ldrb	r3, [r1, #2]
 80a0b56:	784a      	ldrb	r2, [r1, #1]
 80a0b58:	78c9      	ldrb	r1, [r1, #3]
 80a0b5a:	9100      	str	r1, [sp, #0]
 80a0b5c:	4629      	mov	r1, r5
 80a0b5e:	f7ff ffdd 	bl	80a0b1c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0b62:	b003      	add	sp, #12
 80a0b64:	bd30      	pop	{r4, r5, pc}
	...

080a0b68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a0b68:	b510      	push	{r4, lr}
 80a0b6a:	4604      	mov	r4, r0
 80a0b6c:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <_ZN9IPAddressC1EPKh+0x10>)
 80a0b6e:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a0b70:	f7ff ffee 	bl	80a0b50 <_ZN9IPAddressaSEPKh>
}
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	bd10      	pop	{r4, pc}
 80a0b78:	080a1d9c 	.word	0x080a1d9c

080a0b7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b7c:	4a01      	ldr	r2, [pc, #4]	; (80a0b84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b80:	601a      	str	r2, [r3, #0]
 80a0b82:	4770      	bx	lr
 80a0b84:	080a1e63 	.word	0x080a1e63
 80a0b88:	200003dc 	.word	0x200003dc

080a0b8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b8e:	4606      	mov	r6, r0
 80a0b90:	460d      	mov	r5, r1
 80a0b92:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0b94:	2400      	movs	r4, #0
  while (size--) {
 80a0b96:	42bd      	cmp	r5, r7
 80a0b98:	d00c      	beq.n	80a0bb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b9a:	6833      	ldr	r3, [r6, #0]
 80a0b9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ba0:	689b      	ldr	r3, [r3, #8]
 80a0ba2:	4630      	mov	r0, r6
 80a0ba4:	4798      	blx	r3
     if (chunk>=0)
 80a0ba6:	2800      	cmp	r0, #0
 80a0ba8:	db01      	blt.n	80a0bae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0baa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0bac:	e7f3      	b.n	80a0b96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0bae:	2c00      	cmp	r4, #0
 80a0bb0:	bf08      	it	eq
 80a0bb2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0bb4:	4620      	mov	r0, r4
 80a0bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0bb8:	b570      	push	{r4, r5, r6, lr}
 80a0bba:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0bbc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0bbe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0bc0:	b149      	cbz	r1, 80a0bd6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0bc2:	f000 fffb 	bl	80a1bbc <strlen>
 80a0bc6:	682b      	ldr	r3, [r5, #0]
 80a0bc8:	4602      	mov	r2, r0
 80a0bca:	4621      	mov	r1, r4
 80a0bcc:	4628      	mov	r0, r5
    }
 80a0bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0bd2:	68db      	ldr	r3, [r3, #12]
 80a0bd4:	4718      	bx	r3
    }
 80a0bd6:	bd70      	pop	{r4, r5, r6, pc}

080a0bd8 <_ZN5Print5printEPKc>:
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	f7ff ffed 	bl	80a0bb8 <_ZN5Print5writeEPKc>
 80a0bde:	bd08      	pop	{r3, pc}

080a0be0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0be0:	6803      	ldr	r3, [r0, #0]
 80a0be2:	689b      	ldr	r3, [r3, #8]
 80a0be4:	4718      	bx	r3

080a0be6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0be6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0be8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0bea:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0bec:	f7ff fff8 	bl	80a0be0 <_ZN5Print5printEc>
  n += print('\n');
 80a0bf0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0bf2:	4604      	mov	r4, r0
  n += print('\n');
 80a0bf4:	4628      	mov	r0, r5
 80a0bf6:	f7ff fff3 	bl	80a0be0 <_ZN5Print5printEc>
  return n;
}
 80a0bfa:	4420      	add	r0, r4
 80a0bfc:	bd38      	pop	{r3, r4, r5, pc}

080a0bfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0bfe:	b538      	push	{r3, r4, r5, lr}
 80a0c00:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0c02:	f7ff ffd9 	bl	80a0bb8 <_ZN5Print5writeEPKc>
 80a0c06:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0c08:	4628      	mov	r0, r5
 80a0c0a:	f7ff ffec 	bl	80a0be6 <_ZN5Print7printlnEv>
  return n;
}
 80a0c0e:	4420      	add	r0, r4
 80a0c10:	bd38      	pop	{r3, r4, r5, pc}

080a0c12 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0c12:	2a01      	cmp	r2, #1
 80a0c14:	bf98      	it	ls
 80a0c16:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0c18:	b530      	push	{r4, r5, lr}
 80a0c1a:	460b      	mov	r3, r1
 80a0c1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0c1e:	2100      	movs	r1, #0
 80a0c20:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0c24:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0c28:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0c2c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0c30:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c32:	2b09      	cmp	r3, #9
 80a0c34:	bf94      	ite	ls
 80a0c36:	3330      	addls	r3, #48	; 0x30
 80a0c38:	3337      	addhi	r3, #55	; 0x37
 80a0c3a:	b2db      	uxtb	r3, r3
 80a0c3c:	4621      	mov	r1, r4
 80a0c3e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0c42:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0c44:	2d00      	cmp	r5, #0
 80a0c46:	d1ef      	bne.n	80a0c28 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0c48:	f7ff ffb6 	bl	80a0bb8 <_ZN5Print5writeEPKc>
}
 80a0c4c:	b00b      	add	sp, #44	; 0x2c
 80a0c4e:	bd30      	pop	{r4, r5, pc}

080a0c50 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0c50:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0c52:	b922      	cbnz	r2, 80a0c5e <_ZN5Print5printEmi+0xe>
 80a0c54:	6803      	ldr	r3, [r0, #0]
 80a0c56:	b2c9      	uxtb	r1, r1
 80a0c58:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0c5a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0c5c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0c5e:	b2d2      	uxtb	r2, r2
}
 80a0c60:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0c62:	f7ff bfd6 	b.w	80a0c12 <_ZN5Print11printNumberEmh>

080a0c66 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0c66:	f7ff bff3 	b.w	80a0c50 <_ZN5Print5printEmi>

080a0c6a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c6e:	4607      	mov	r7, r0
 80a0c70:	460e      	mov	r6, r1
  if (base == 0) {
 80a0c72:	4615      	mov	r5, r2
 80a0c74:	b92a      	cbnz	r2, 80a0c82 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0c7a:	6803      	ldr	r3, [r0, #0]
 80a0c7c:	b2c9      	uxtb	r1, r1
 80a0c7e:	689b      	ldr	r3, [r3, #8]
 80a0c80:	4718      	bx	r3
  } else if (base == 10) {
 80a0c82:	2a0a      	cmp	r2, #10
 80a0c84:	d102      	bne.n	80a0c8c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0c86:	2900      	cmp	r1, #0
 80a0c88:	da01      	bge.n	80a0c8e <_ZN5Print5printEli+0x24>
 80a0c8a:	e004      	b.n	80a0c96 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0c8c:	b2d2      	uxtb	r2, r2
  }
}
 80a0c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0c92:	f7ff bfbe 	b.w	80a0c12 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0c96:	212d      	movs	r1, #45	; 0x2d
 80a0c98:	f7ff ffa2 	bl	80a0be0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0c9c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0c9e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0ca0:	4271      	negs	r1, r6
 80a0ca2:	4638      	mov	r0, r7
 80a0ca4:	f7ff ffb5 	bl	80a0c12 <_ZN5Print11printNumberEmh>
 80a0ca8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0cae <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
 80a0cae:	b538      	push	{r3, r4, r5, lr}
 80a0cb0:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a0cb2:	f7ff ffda 	bl	80a0c6a <_ZN5Print5printEli>
 80a0cb6:	4604      	mov	r4, r0
  n += println();
 80a0cb8:	4628      	mov	r0, r5
 80a0cba:	f7ff ff94 	bl	80a0be6 <_ZN5Print7printlnEv>
  return n;
}
 80a0cbe:	4420      	add	r0, r4
 80a0cc0:	bd38      	pop	{r3, r4, r5, pc}

080a0cc2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0cc2:	b510      	push	{r4, lr}
 80a0cc4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cc6:	f7ff fef2 	bl	80a0aae <_ZNSt14_Function_baseD1Ev>
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	bd10      	pop	{r4, pc}
	...

080a0cd0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cd0:	4803      	ldr	r0, [pc, #12]	; (80a0ce0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0cd2:	2300      	movs	r3, #0
 80a0cd4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0cd6:	4a03      	ldr	r2, [pc, #12]	; (80a0ce4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0cd8:	4903      	ldr	r1, [pc, #12]	; (80a0ce8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0cda:	f000 bdcb 	b.w	80a1874 <__aeabi_atexit>
 80a0cde:	bf00      	nop
 80a0ce0:	200003e0 	.word	0x200003e0
 80a0ce4:	20000370 	.word	0x20000370
 80a0ce8:	080a0cc3 	.word	0x080a0cc3

080a0cec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0cec:	4770      	bx	lr

080a0cee <_ZN8SPIClassD0Ev>:
 80a0cee:	b510      	push	{r4, lr}
 80a0cf0:	4604      	mov	r4, r0
 80a0cf2:	f7ff f9d6 	bl	80a00a2 <_ZdlPv>
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	bd10      	pop	{r4, pc}
	...

080a0cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0cfc:	b570      	push	{r4, r5, r6, lr}
 80a0cfe:	4604      	mov	r4, r0
 80a0d00:	460e      	mov	r6, r1
 80a0d02:	4b07      	ldr	r3, [pc, #28]	; (80a0d20 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0d04:	2500      	movs	r5, #0
 80a0d06:	6003      	str	r3, [r0, #0]
 80a0d08:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0d0c:	f7ff fd78 	bl	80a0800 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0d10:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0d12:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0d14:	f7ff fddc 	bl	80a08d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0d18:	60a5      	str	r5, [r4, #8]
}
 80a0d1a:	4620      	mov	r0, r4
 80a0d1c:	bd70      	pop	{r4, r5, r6, pc}
 80a0d1e:	bf00      	nop
 80a0d20:	080a1e94 	.word	0x080a1e94

080a0d24 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0d24:	b510      	push	{r4, lr}
 80a0d26:	4604      	mov	r4, r0
{
	free(buffer);
 80a0d28:	6800      	ldr	r0, [r0, #0]
 80a0d2a:	f7ff fead 	bl	80a0a88 <free>
}
 80a0d2e:	4620      	mov	r0, r4
 80a0d30:	bd10      	pop	{r4, pc}

080a0d32 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0d32:	b510      	push	{r4, lr}
 80a0d34:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0d36:	6800      	ldr	r0, [r0, #0]
 80a0d38:	b108      	cbz	r0, 80a0d3e <_ZN6String10invalidateEv+0xc>
 80a0d3a:	f7ff fea5 	bl	80a0a88 <free>
	buffer = NULL;
 80a0d3e:	2300      	movs	r3, #0
 80a0d40:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0d42:	60a3      	str	r3, [r4, #8]
 80a0d44:	6063      	str	r3, [r4, #4]
 80a0d46:	bd10      	pop	{r4, pc}

080a0d48 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0d48:	b538      	push	{r3, r4, r5, lr}
 80a0d4a:	4604      	mov	r4, r0
 80a0d4c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0d4e:	6800      	ldr	r0, [r0, #0]
 80a0d50:	3101      	adds	r1, #1
 80a0d52:	f7ff fea1 	bl	80a0a98 <realloc>
	if (newbuffer) {
 80a0d56:	b110      	cbz	r0, 80a0d5e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0d58:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0d5c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0d5e:	bd38      	pop	{r3, r4, r5, pc}

080a0d60 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d60:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0d62:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d64:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0d66:	b113      	cbz	r3, 80a0d6e <_ZN6String7reserveEj+0xe>
 80a0d68:	6843      	ldr	r3, [r0, #4]
 80a0d6a:	428b      	cmp	r3, r1
 80a0d6c:	d207      	bcs.n	80a0d7e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0d6e:	4620      	mov	r0, r4
 80a0d70:	f7ff ffea 	bl	80a0d48 <_ZN6String12changeBufferEj>
 80a0d74:	b120      	cbz	r0, 80a0d80 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0d76:	68a3      	ldr	r3, [r4, #8]
 80a0d78:	b90b      	cbnz	r3, 80a0d7e <_ZN6String7reserveEj+0x1e>
 80a0d7a:	6822      	ldr	r2, [r4, #0]
 80a0d7c:	7013      	strb	r3, [r2, #0]
 80a0d7e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0d80:	bd10      	pop	{r4, pc}

080a0d82 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d82:	b570      	push	{r4, r5, r6, lr}
 80a0d84:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0d86:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d88:	4604      	mov	r4, r0
 80a0d8a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0d8c:	f7ff ffe8 	bl	80a0d60 <_ZN6String7reserveEj>
 80a0d90:	b918      	cbnz	r0, 80a0d9a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0d92:	4620      	mov	r0, r4
 80a0d94:	f7ff ffcd 	bl	80a0d32 <_ZN6String10invalidateEv>
		return *this;
 80a0d98:	e009      	b.n	80a0dae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0d9a:	462a      	mov	r2, r5
 80a0d9c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0d9e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0da0:	6820      	ldr	r0, [r4, #0]
 80a0da2:	f000 fec7 	bl	80a1b34 <memcpy>
	buffer[len] = 0;
 80a0da6:	6822      	ldr	r2, [r4, #0]
 80a0da8:	68a3      	ldr	r3, [r4, #8]
 80a0daa:	2100      	movs	r1, #0
 80a0dac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	bd70      	pop	{r4, r5, r6, pc}

080a0db2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0db2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0db4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0db6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0db8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0dba:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0dbc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0dbe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0dc0:	460d      	mov	r5, r1
 80a0dc2:	b139      	cbz	r1, 80a0dd4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0dc4:	4608      	mov	r0, r1
 80a0dc6:	f000 fef9 	bl	80a1bbc <strlen>
 80a0dca:	4629      	mov	r1, r5
 80a0dcc:	4602      	mov	r2, r0
 80a0dce:	4620      	mov	r0, r4
 80a0dd0:	f7ff ffd7 	bl	80a0d82 <_ZN6String4copyEPKcj>
}
 80a0dd4:	4620      	mov	r0, r4
 80a0dd6:	bd38      	pop	{r3, r4, r5, pc}

080a0dd8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0dd8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0dda:	b510      	push	{r4, lr}
 80a0ddc:	460b      	mov	r3, r1
 80a0dde:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0de0:	d007      	beq.n	80a0df2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0de2:	6809      	ldr	r1, [r1, #0]
 80a0de4:	b119      	cbz	r1, 80a0dee <_ZN6StringaSERKS_+0x16>
 80a0de6:	689a      	ldr	r2, [r3, #8]
 80a0de8:	f7ff ffcb 	bl	80a0d82 <_ZN6String4copyEPKcj>
 80a0dec:	e001      	b.n	80a0df2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0dee:	f7ff ffa0 	bl	80a0d32 <_ZN6String10invalidateEv>

	return *this;
}
 80a0df2:	4620      	mov	r0, r4
 80a0df4:	bd10      	pop	{r4, pc}

080a0df6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0df6:	b510      	push	{r4, lr}
 80a0df8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0dfa:	2300      	movs	r3, #0
 80a0dfc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0dfe:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0e00:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0e02:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0e04:	f7ff ffe8 	bl	80a0dd8 <_ZN6StringaSERKS_>
}
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	bd10      	pop	{r4, pc}

080a0e0c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0e0c:	b538      	push	{r3, r4, r5, lr}
 80a0e0e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0e10:	460c      	mov	r4, r1
 80a0e12:	b141      	cbz	r1, 80a0e26 <_ZN6StringaSEPKc+0x1a>
 80a0e14:	4608      	mov	r0, r1
 80a0e16:	f000 fed1 	bl	80a1bbc <strlen>
 80a0e1a:	4621      	mov	r1, r4
 80a0e1c:	4602      	mov	r2, r0
 80a0e1e:	4628      	mov	r0, r5
 80a0e20:	f7ff ffaf 	bl	80a0d82 <_ZN6String4copyEPKcj>
 80a0e24:	e001      	b.n	80a0e2a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0e26:	f7ff ff84 	bl	80a0d32 <_ZN6String10invalidateEv>

	return *this;
}
 80a0e2a:	4628      	mov	r0, r5
 80a0e2c:	bd38      	pop	{r3, r4, r5, pc}

080a0e2e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a0e2e:	b570      	push	{r4, r5, r6, lr}
 80a0e30:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a0e32:	460e      	mov	r6, r1
 80a0e34:	b909      	cbnz	r1, 80a0e3a <_ZN6String6concatEPKcj+0xc>
 80a0e36:	2000      	movs	r0, #0
 80a0e38:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0e3a:	b16a      	cbz	r2, 80a0e58 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a0e3c:	6883      	ldr	r3, [r0, #8]
 80a0e3e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a0e40:	4629      	mov	r1, r5
 80a0e42:	f7ff ff8d 	bl	80a0d60 <_ZN6String7reserveEj>
 80a0e46:	2800      	cmp	r0, #0
 80a0e48:	d0f5      	beq.n	80a0e36 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0e4a:	6820      	ldr	r0, [r4, #0]
 80a0e4c:	68a3      	ldr	r3, [r4, #8]
 80a0e4e:	4631      	mov	r1, r6
 80a0e50:	4418      	add	r0, r3
 80a0e52:	f000 feab 	bl	80a1bac <strcpy>
	len = newlen;
 80a0e56:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a0e58:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0e5a:	bd70      	pop	{r4, r5, r6, pc}

080a0e5c <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a0e5c:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a0e5e:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a0e60:	4604      	mov	r4, r0
 80a0e62:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 80a0e64:	4669      	mov	r1, sp
 80a0e66:	f000 fc18 	bl	80a169a <itoa>
	return concat(buf, strlen(buf));
 80a0e6a:	4668      	mov	r0, sp
 80a0e6c:	f000 fea6 	bl	80a1bbc <strlen>
 80a0e70:	4669      	mov	r1, sp
 80a0e72:	4602      	mov	r2, r0
 80a0e74:	4620      	mov	r0, r4
 80a0e76:	f7ff ffda 	bl	80a0e2e <_ZN6String6concatEPKcj>
}
 80a0e7a:	b002      	add	sp, #8
 80a0e7c:	bd10      	pop	{r4, pc}

080a0e7e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0e7e:	6800      	ldr	r0, [r0, #0]
 80a0e80:	b108      	cbz	r0, 80a0e86 <_ZNK6String5toIntEv+0x8>
 80a0e82:	f000 be45 	b.w	80a1b10 <atol>
	return 0;
}
 80a0e86:	4770      	bx	lr

080a0e88 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0e88:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e8e:	4c0d      	ldr	r4, [pc, #52]	; (80a0ec4 <_GLOBAL__sub_I_System+0x3c>)
 80a0e90:	2500      	movs	r5, #0
 80a0e92:	8063      	strh	r3, [r4, #2]
 80a0e94:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e98:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0e9a:	80a3      	strh	r3, [r4, #4]
 80a0e9c:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e9e:	f7ff fdb7 	bl	80a0a10 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0ea2:	a802      	add	r0, sp, #8
 80a0ea4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0ea8:	462a      	mov	r2, r5
 80a0eaa:	4629      	mov	r1, r5
 80a0eac:	f7ff fcb0 	bl	80a0810 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0eb0:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0eb2:	2b1e      	cmp	r3, #30
 80a0eb4:	d104      	bne.n	80a0ec0 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0eb6:	2303      	movs	r3, #3
 80a0eb8:	7023      	strb	r3, [r4, #0]
 80a0eba:	2311      	movs	r3, #17
 80a0ebc:	8065      	strh	r5, [r4, #2]
 80a0ebe:	80a3      	strh	r3, [r4, #4]
 80a0ec0:	b003      	add	sp, #12
 80a0ec2:	bd30      	pop	{r4, r5, pc}
 80a0ec4:	200003f0 	.word	0x200003f0

080a0ec8 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eca:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ecc:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0ece:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ed2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0ed4:	2201      	movs	r2, #1
 80a0ed6:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0eda:	4621      	mov	r1, r4
 80a0edc:	47a8      	blx	r5
}
 80a0ede:	b003      	add	sp, #12
 80a0ee0:	bd30      	pop	{r4, r5, pc}

080a0ee2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a0ee2:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ee4:	6803      	ldr	r3, [r0, #0]
 80a0ee6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0ee8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0eec:	46a4      	mov	ip, r4
}
 80a0eee:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ef0:	4760      	bx	ip

080a0ef2 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ef4:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a0ef6:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0ef8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a0efc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0efe:	4621      	mov	r1, r4
 80a0f00:	4613      	mov	r3, r2
 80a0f02:	2201      	movs	r2, #1
 80a0f04:	47a8      	blx	r5
}
 80a0f06:	b003      	add	sp, #12
 80a0f08:	bd30      	pop	{r4, r5, pc}

080a0f0a <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a0f0a:	4770      	bx	lr

080a0f0c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0f0c:	4770      	bx	lr

080a0f0e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a0f0e:	2000      	movs	r0, #0
 80a0f10:	4770      	bx	lr

080a0f12 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0f12:	b510      	push	{r4, lr}
 80a0f14:	4604      	mov	r4, r0
 80a0f16:	f7ff f8c4 	bl	80a00a2 <_ZdlPv>
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	bd10      	pop	{r4, pc}

080a0f1e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0f1e:	f7ff b8c0 	b.w	80a00a2 <_ZdlPv>
	...

080a0f24 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0f28:	461f      	mov	r7, r3
    stop();
 80a0f2a:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0f2c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a0f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a0f30:	4606      	mov	r6, r0
 80a0f32:	460c      	mov	r4, r1
 80a0f34:	4690      	mov	r8, r2
    stop();
 80a0f36:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a0f38:	4b13      	ldr	r3, [pc, #76]	; (80a0f88 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a0f3a:	6818      	ldr	r0, [r3, #0]
 80a0f3c:	6803      	ldr	r3, [r0, #0]
 80a0f3e:	681b      	ldr	r3, [r3, #0]
 80a0f40:	4798      	blx	r3
 80a0f42:	b1f0      	cbz	r0, 80a0f82 <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a0f44:	a802      	add	r0, sp, #8
 80a0f46:	f7ff fddb 	bl	80a0b00 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a0f4a:	4620      	mov	r0, r4
 80a0f4c:	f000 fe36 	bl	80a1bbc <strlen>
 80a0f50:	2300      	movs	r3, #0
 80a0f52:	9300      	str	r3, [sp, #0]
 80a0f54:	b281      	uxth	r1, r0
 80a0f56:	463b      	mov	r3, r7
 80a0f58:	aa03      	add	r2, sp, #12
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	f7ff fd48 	bl	80a09f0 <inet_gethostbyname>
 80a0f60:	b978      	cbnz	r0, 80a0f82 <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a0f62:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f64:	ad09      	add	r5, sp, #36	; 0x24
 80a0f66:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a0f6a:	4b08      	ldr	r3, [pc, #32]	; (80a0f8c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a0f6c:	ac03      	add	r4, sp, #12
 80a0f6e:	9308      	str	r3, [sp, #32]
 80a0f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0f74:	6823      	ldr	r3, [r4, #0]
 80a0f76:	4642      	mov	r2, r8
 80a0f78:	702b      	strb	r3, [r5, #0]
 80a0f7a:	a908      	add	r1, sp, #32
 80a0f7c:	463b      	mov	r3, r7
 80a0f7e:	4630      	mov	r0, r6
 80a0f80:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a0f82:	b00f      	add	sp, #60	; 0x3c
 80a0f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0f88:	080a1fb4 	.word	0x080a1fb4
 80a0f8c:	080a1d9c 	.word	0x080a1d9c

080a0f90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0f90:	b510      	push	{r4, lr}
 80a0f92:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0f94:	6803      	ldr	r3, [r0, #0]
 80a0f96:	689b      	ldr	r3, [r3, #8]
 80a0f98:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0f9a:	68a3      	ldr	r3, [r4, #8]
 80a0f9c:	3b01      	subs	r3, #1
 80a0f9e:	60a3      	str	r3, [r4, #8]
 80a0fa0:	b92b      	cbnz	r3, 80a0fae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a0fa2:	6823      	ldr	r3, [r4, #0]
 80a0fa4:	4620      	mov	r0, r4
        }
    }
 80a0fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0faa:	68db      	ldr	r3, [r3, #12]
 80a0fac:	4718      	bx	r3
 80a0fae:	bd10      	pop	{r4, pc}

080a0fb0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a0fb0:	b570      	push	{r4, r5, r6, lr}
 80a0fb2:	4604      	mov	r4, r0
 80a0fb4:	4606      	mov	r6, r0
 80a0fb6:	694d      	ldr	r5, [r1, #20]
 80a0fb8:	4b04      	ldr	r3, [pc, #16]	; (80a0fcc <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a0fba:	358c      	adds	r5, #140	; 0x8c
 80a0fbc:	f844 3b04 	str.w	r3, [r4], #4
 80a0fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0fc4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a0fc6:	4630      	mov	r0, r6
 80a0fc8:	7023      	strb	r3, [r4, #0]
 80a0fca:	bd70      	pop	{r4, r5, r6, pc}
 80a0fcc:	080a1d9c 	.word	0x080a1d9c

080a0fd0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a0fd0:	b510      	push	{r4, lr}
 80a0fd2:	6943      	ldr	r3, [r0, #20]
 80a0fd4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0fd6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0fda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0fde:	429a      	cmp	r2, r3
 80a0fe0:	d005      	beq.n	80a0fee <_ZN9TCPClient4peekEv+0x1e>
 80a0fe2:	6962      	ldr	r2, [r4, #20]
 80a0fe4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0fe8:	4413      	add	r3, r2
 80a0fea:	7918      	ldrb	r0, [r3, #4]
 80a0fec:	bd10      	pop	{r4, pc}
 80a0fee:	6803      	ldr	r3, [r0, #0]
 80a0ff0:	691b      	ldr	r3, [r3, #16]
 80a0ff2:	4798      	blx	r3
 80a0ff4:	2800      	cmp	r0, #0
 80a0ff6:	d1f4      	bne.n	80a0fe2 <_ZN9TCPClient4peekEv+0x12>
 80a0ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0ffc:	bd10      	pop	{r4, pc}

080a0ffe <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a0ffe:	b510      	push	{r4, lr}
 80a1000:	6943      	ldr	r3, [r0, #20]
 80a1002:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1004:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1008:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a100c:	429a      	cmp	r2, r3
 80a100e:	d008      	beq.n	80a1022 <_ZN9TCPClient4readEv+0x24>
 80a1010:	6962      	ldr	r2, [r4, #20]
 80a1012:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1016:	1c59      	adds	r1, r3, #1
 80a1018:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a101c:	4413      	add	r3, r2
 80a101e:	7918      	ldrb	r0, [r3, #4]
 80a1020:	bd10      	pop	{r4, pc}
 80a1022:	6803      	ldr	r3, [r0, #0]
 80a1024:	691b      	ldr	r3, [r3, #16]
 80a1026:	4798      	blx	r3
 80a1028:	2800      	cmp	r0, #0
 80a102a:	d1f1      	bne.n	80a1010 <_ZN9TCPClient4readEv+0x12>
 80a102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1030:	bd10      	pop	{r4, pc}

080a1032 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1032:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1034:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a1036:	6820      	ldr	r0, [r4, #0]
 80a1038:	f7ff fc12 	bl	80a0860 <socket_handle_valid>
 80a103c:	b110      	cbz	r0, 80a1044 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a103e:	6820      	ldr	r0, [r4, #0]
 80a1040:	f7ff fc2e 	bl	80a08a0 <socket_close>
 80a1044:	4620      	mov	r0, r4
 80a1046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a104a:	f7ff b82a 	b.w	80a00a2 <_ZdlPv>

080a104e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a104e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1050:	6943      	ldr	r3, [r0, #20]
 80a1052:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1054:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1058:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a105c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a105e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1060:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1062:	d106      	bne.n	80a1072 <_ZN9TCPClient4readEPhj+0x24>
 80a1064:	6803      	ldr	r3, [r0, #0]
 80a1066:	691b      	ldr	r3, [r3, #16]
 80a1068:	4798      	blx	r3
 80a106a:	b910      	cbnz	r0, 80a1072 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a106c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1070:	e014      	b.n	80a109c <_ZN9TCPClient4readEPhj+0x4e>
 80a1072:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1074:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1076:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a107a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a107e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1080:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1082:	42bc      	cmp	r4, r7
 80a1084:	bf28      	it	cs
 80a1086:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1088:	3104      	adds	r1, #4
 80a108a:	4622      	mov	r2, r4
 80a108c:	f000 fd52 	bl	80a1b34 <memcpy>
 80a1090:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1092:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1096:	4423      	add	r3, r4
 80a1098:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a109c:	4620      	mov	r0, r4
 80a109e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10a0 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a10a0:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a10a2:	2300      	movs	r3, #0
 80a10a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a10a8:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a10aa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a10ae:	4770      	bx	lr

080a10b0 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a10b0:	b538      	push	{r3, r4, r5, lr}
 80a10b2:	6942      	ldr	r2, [r0, #20]
 80a10b4:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a10b6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a10ba:	b11b      	cbz	r3, 80a10c4 <_ZN9TCPClient9availableEv+0x14>
 80a10bc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a10c0:	429a      	cmp	r2, r3
 80a10c2:	d00b      	beq.n	80a10dc <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a10c4:	4b18      	ldr	r3, [pc, #96]	; (80a1128 <_ZN9TCPClient9availableEv+0x78>)
 80a10c6:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a10c8:	6803      	ldr	r3, [r0, #0]
 80a10ca:	681b      	ldr	r3, [r3, #0]
 80a10cc:	4798      	blx	r3
 80a10ce:	b318      	cbz	r0, 80a1118 <_ZN9TCPClient9availableEv+0x68>
 80a10d0:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a10d2:	6818      	ldr	r0, [r3, #0]
 80a10d4:	f7ff fbc4 	bl	80a0860 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a10d8:	b918      	cbnz	r0, 80a10e2 <_ZN9TCPClient9availableEv+0x32>
 80a10da:	e01d      	b.n	80a1118 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a10dc:	f7ff ffe0 	bl	80a10a0 <_ZN9TCPClient12flush_bufferEv>
 80a10e0:	e7f0      	b.n	80a10c4 <_ZN9TCPClient9availableEv+0x14>
 80a10e2:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a10e4:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a10e8:	297f      	cmp	r1, #127	; 0x7f
 80a10ea:	d815      	bhi.n	80a1118 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a10ec:	1d05      	adds	r5, r0, #4
 80a10ee:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a10f2:	2300      	movs	r3, #0
 80a10f4:	4429      	add	r1, r5
 80a10f6:	6800      	ldr	r0, [r0, #0]
 80a10f8:	f7ff fbca 	bl	80a0890 <socket_receive>
            if (ret > 0)
 80a10fc:	2800      	cmp	r0, #0
 80a10fe:	dd0b      	ble.n	80a1118 <_ZN9TCPClient9availableEv+0x68>
 80a1100:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1102:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1106:	b90a      	cbnz	r2, 80a110c <_ZN9TCPClient9availableEv+0x5c>
 80a1108:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a110c:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a110e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1112:	4418      	add	r0, r3
 80a1114:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1118:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a111a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a111e:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1122:	1a18      	subs	r0, r3, r0
}
 80a1124:	bd38      	pop	{r3, r4, r5, pc}
 80a1126:	bf00      	nop
 80a1128:	080a1fb4 	.word	0x080a1fb4

080a112c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a112c:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a112e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1130:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1132:	6818      	ldr	r0, [r3, #0]
 80a1134:	f7ff fb94 	bl	80a0860 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1138:	b118      	cbz	r0, 80a1142 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a113a:	6963      	ldr	r3, [r4, #20]
 80a113c:	6818      	ldr	r0, [r3, #0]
 80a113e:	f7ff fbaf 	bl	80a08a0 <socket_close>
 80a1142:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1144:	f7ff fbb4 	bl	80a08b0 <socket_handle_invalid>
 80a1148:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a114a:	6960      	ldr	r0, [r4, #20]
 80a114c:	2211      	movs	r2, #17
 80a114e:	2100      	movs	r1, #0
 80a1150:	308c      	adds	r0, #140	; 0x8c
 80a1152:	f000 fcfa 	bl	80a1b4a <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1156:	4620      	mov	r0, r4
}
 80a1158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a115c:	f7ff bfa0 	b.w	80a10a0 <_ZN9TCPClient12flush_bufferEv>

080a1160 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1166:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1168:	4b17      	ldr	r3, [pc, #92]	; (80a11c8 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a116a:	2600      	movs	r6, #0
 80a116c:	6046      	str	r6, [r0, #4]
 80a116e:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1170:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1172:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1174:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1176:	20a0      	movs	r0, #160	; 0xa0
 80a1178:	460f      	mov	r7, r1
 80a117a:	f7fe ff8e 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a117e:	4605      	mov	r5, r0
 80a1180:	b138      	cbz	r0, 80a1192 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a1182:	6007      	str	r7, [r0, #0]
 80a1184:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a1188:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a118c:	3088      	adds	r0, #136	; 0x88
 80a118e:	f7ff fcb7 	bl	80a0b00 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1192:	2014      	movs	r0, #20
 80a1194:	f7fe ff81 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1198:	4603      	mov	r3, r0
 80a119a:	b128      	cbz	r0, 80a11a8 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a119c:	2201      	movs	r2, #1
 80a119e:	6042      	str	r2, [r0, #4]
 80a11a0:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a11a2:	4a0a      	ldr	r2, [pc, #40]	; (80a11cc <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a11a4:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a11a6:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a11a8:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a11aa:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a11ac:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a11ae:	b128      	cbz	r0, 80a11bc <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a11b0:	6843      	ldr	r3, [r0, #4]
 80a11b2:	3b01      	subs	r3, #1
 80a11b4:	6043      	str	r3, [r0, #4]
 80a11b6:	b90b      	cbnz	r3, 80a11bc <_ZN9TCPClientC1Em+0x5c>
 80a11b8:	f7ff feea 	bl	80a0f90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a11bc:	4620      	mov	r0, r4
 80a11be:	f7ff ff6f 	bl	80a10a0 <_ZN9TCPClient12flush_bufferEv>
}
 80a11c2:	4620      	mov	r0, r4
 80a11c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a11c6:	bf00      	nop
 80a11c8:	080a1ec0 	.word	0x080a1ec0
 80a11cc:	080a1ea4 	.word	0x080a1ea4

080a11d0 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a11d0:	b510      	push	{r4, lr}
 80a11d2:	4604      	mov	r4, r0
 80a11d4:	f7ff fb6c 	bl	80a08b0 <socket_handle_invalid>
 80a11d8:	4601      	mov	r1, r0
 80a11da:	4620      	mov	r0, r4
 80a11dc:	f7ff ffc0 	bl	80a1160 <_ZN9TCPClientC1Em>
{
}
 80a11e0:	4620      	mov	r0, r4
 80a11e2:	bd10      	pop	{r4, pc}

080a11e4 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a11e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11e8:	4698      	mov	r8, r3
    stop();
 80a11ea:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a11ec:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a11ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a11f0:	4606      	mov	r6, r0
 80a11f2:	460c      	mov	r4, r1
 80a11f4:	4615      	mov	r5, r2
    stop();
 80a11f6:	4798      	blx	r3
 80a11f8:	4b2f      	ldr	r3, [pc, #188]	; (80a12b8 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a11fa:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a11fc:	6803      	ldr	r3, [r0, #0]
 80a11fe:	681b      	ldr	r3, [r3, #0]
 80a1200:	4798      	blx	r3
 80a1202:	2800      	cmp	r0, #0
 80a1204:	d055      	beq.n	80a12b2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1206:	462b      	mov	r3, r5
 80a1208:	2206      	movs	r2, #6
 80a120a:	2101      	movs	r1, #1
 80a120c:	f8cd 8000 	str.w	r8, [sp]
 80a1210:	2002      	movs	r0, #2
 80a1212:	6977      	ldr	r7, [r6, #20]
 80a1214:	f7ff fb2c 	bl	80a0870 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1218:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a121a:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a121c:	9302      	str	r3, [sp, #8]
 80a121e:	2700      	movs	r7, #0
 80a1220:	6973      	ldr	r3, [r6, #20]
 80a1222:	9703      	str	r7, [sp, #12]
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	2001      	movs	r0, #1
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	4b24      	ldr	r3, [pc, #144]	; (80a12bc <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a122c:	aa02      	add	r2, sp, #8
 80a122e:	9300      	str	r3, [sp, #0]
 80a1230:	4923      	ldr	r1, [pc, #140]	; (80a12c0 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1232:	463b      	mov	r3, r7
 80a1234:	f7ff fbe4 	bl	80a0a00 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1238:	6973      	ldr	r3, [r6, #20]
 80a123a:	6818      	ldr	r0, [r3, #0]
 80a123c:	f7ff fb10 	bl	80a0860 <socket_handle_valid>
 80a1240:	2800      	cmp	r0, #0
 80a1242:	d036      	beq.n	80a12b2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a1244:	4630      	mov	r0, r6
 80a1246:	f7ff ff2b 	bl	80a10a0 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a124a:	2302      	movs	r3, #2
 80a124c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1250:	0a2b      	lsrs	r3, r5, #8
 80a1252:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1256:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1258:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a125c:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1260:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1262:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1266:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a126a:	7963      	ldrb	r3, [r4, #5]
 80a126c:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1270:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1274:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1278:	f7ff fbb2 	bl	80a09e0 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a127c:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a127e:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1280:	2210      	movs	r2, #16
 80a1282:	a902      	add	r1, sp, #8
 80a1284:	6818      	ldr	r0, [r3, #0]
 80a1286:	f7ff fafb 	bl	80a0880 <socket_connect>
 80a128a:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a128c:	4628      	mov	r0, r5
 80a128e:	f7ff fba7 	bl	80a09e0 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1294:	6975      	ldr	r5, [r6, #20]
 80a1296:	358c      	adds	r5, #140	; 0x8c
 80a1298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a129a:	6823      	ldr	r3, [r4, #0]
 80a129c:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a129e:	f1b8 0f00 	cmp.w	r8, #0
 80a12a2:	d005      	beq.n	80a12b0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a12a4:	6833      	ldr	r3, [r6, #0]
 80a12a6:	4630      	mov	r0, r6
 80a12a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12aa:	4798      	blx	r3
 80a12ac:	4638      	mov	r0, r7
 80a12ae:	e000      	b.n	80a12b2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a12b0:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a12b2:	b00a      	add	sp, #40	; 0x28
 80a12b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a12b8:	080a1fb4 	.word	0x080a1fb4
 80a12bc:	080a1f0b 	.word	0x080a1f0b
 80a12c0:	080a1f04 	.word	0x080a1f04

080a12c4 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a12c4:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a12c6:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a12c8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a12ca:	6818      	ldr	r0, [r3, #0]
 80a12cc:	f7ff fac8 	bl	80a0860 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a12d0:	b908      	cbnz	r0, 80a12d6 <_ZN9TCPClient6statusEv+0x12>
 80a12d2:	2000      	movs	r0, #0
 80a12d4:	bd10      	pop	{r4, pc}
 80a12d6:	4b07      	ldr	r3, [pc, #28]	; (80a12f4 <_ZN9TCPClient6statusEv+0x30>)
 80a12d8:	6818      	ldr	r0, [r3, #0]
 80a12da:	6803      	ldr	r3, [r0, #0]
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	4798      	blx	r3
 80a12e0:	2800      	cmp	r0, #0
 80a12e2:	d0f6      	beq.n	80a12d2 <_ZN9TCPClient6statusEv+0xe>
 80a12e4:	6963      	ldr	r3, [r4, #20]
 80a12e6:	6818      	ldr	r0, [r3, #0]
 80a12e8:	f7ff fab2 	bl	80a0850 <socket_active_status>
 80a12ec:	fab0 f080 	clz	r0, r0
 80a12f0:	0940      	lsrs	r0, r0, #5
}
 80a12f2:	bd10      	pop	{r4, pc}
 80a12f4:	080a1fb4 	.word	0x080a1fb4

080a12f8 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a12f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a12fc:	2500      	movs	r5, #0
 80a12fe:	6045      	str	r5, [r0, #4]
 80a1300:	4604      	mov	r4, r0
 80a1302:	460e      	mov	r6, r1
 80a1304:	4617      	mov	r7, r2
 80a1306:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1308:	f7ff ffdc 	bl	80a12c4 <_ZN9TCPClient6statusEv>
 80a130c:	b160      	cbz	r0, 80a1328 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a130e:	6960      	ldr	r0, [r4, #20]
 80a1310:	9501      	str	r5, [sp, #4]
 80a1312:	f8cd 8000 	str.w	r8, [sp]
 80a1316:	462b      	mov	r3, r5
 80a1318:	463a      	mov	r2, r7
 80a131a:	4631      	mov	r1, r6
 80a131c:	6800      	ldr	r0, [r0, #0]
 80a131e:	f7ff facf 	bl	80a08c0 <socket_send_ex>
    if (ret < 0) {
 80a1322:	2800      	cmp	r0, #0
 80a1324:	da03      	bge.n	80a132e <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1326:	e001      	b.n	80a132c <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a132c:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a132e:	b002      	add	sp, #8
 80a1330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1334 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1334:	b538      	push	{r3, r4, r5, lr}
 80a1336:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1338:	f7ff ffc4 	bl	80a12c4 <_ZN9TCPClient6statusEv>
 80a133c:	bb00      	cbnz	r0, 80a1380 <_ZN9TCPClient9connectedEv+0x4c>
 80a133e:	6963      	ldr	r3, [r4, #20]
 80a1340:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1344:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1348:	4291      	cmp	r1, r2
 80a134a:	d119      	bne.n	80a1380 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a134c:	6818      	ldr	r0, [r3, #0]
 80a134e:	f7ff fa87 	bl	80a0860 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1352:	b128      	cbz	r0, 80a1360 <_ZN9TCPClient9connectedEv+0x2c>
 80a1354:	6963      	ldr	r3, [r4, #20]
 80a1356:	6818      	ldr	r0, [r3, #0]
 80a1358:	f7ff fa7a 	bl	80a0850 <socket_active_status>
 80a135c:	2801      	cmp	r0, #1
 80a135e:	d001      	beq.n	80a1364 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1360:	2500      	movs	r5, #0
 80a1362:	e00e      	b.n	80a1382 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1364:	6823      	ldr	r3, [r4, #0]
 80a1366:	4620      	mov	r0, r4
 80a1368:	691b      	ldr	r3, [r3, #16]
 80a136a:	4798      	blx	r3
 80a136c:	2800      	cmp	r0, #0
 80a136e:	bf14      	ite	ne
 80a1370:	2501      	movne	r5, #1
 80a1372:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1374:	d105      	bne.n	80a1382 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a1376:	6823      	ldr	r3, [r4, #0]
 80a1378:	4620      	mov	r0, r4
 80a137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a137c:	4798      	blx	r3
 80a137e:	e000      	b.n	80a1382 <_ZN9TCPClient9connectedEv+0x4e>
 80a1380:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1382:	4628      	mov	r0, r5
 80a1384:	bd38      	pop	{r3, r4, r5, pc}

080a1386 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1386:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1388:	f7ff ff9c 	bl	80a12c4 <_ZN9TCPClient6statusEv>
}
 80a138c:	3000      	adds	r0, #0
 80a138e:	bf18      	it	ne
 80a1390:	2001      	movne	r0, #1
 80a1392:	bd08      	pop	{r3, pc}

080a1394 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1394:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1396:	681a      	ldr	r2, [r3, #0]
 80a1398:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a139a:	601a      	str	r2, [r3, #0]
 80a139c:	4770      	bx	lr
 80a139e:	bf00      	nop
 80a13a0:	20000304 	.word	0x20000304
 80a13a4:	200003f8 	.word	0x200003f8

080a13a8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a13a8:	4770      	bx	lr

080a13aa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a13aa:	7441      	strb	r1, [r0, #17]
 80a13ac:	4770      	bx	lr

080a13ae <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a13ae:	7c00      	ldrb	r0, [r0, #16]
 80a13b0:	f7ff bac6 	b.w	80a0940 <HAL_USART_Available_Data_For_Write>

080a13b4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a13b4:	7c00      	ldrb	r0, [r0, #16]
 80a13b6:	f7ff baa3 	b.w	80a0900 <HAL_USART_Available_Data>

080a13ba <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a13ba:	7c00      	ldrb	r0, [r0, #16]
 80a13bc:	f7ff bab0 	b.w	80a0920 <HAL_USART_Peek_Data>

080a13c0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a13c0:	7c00      	ldrb	r0, [r0, #16]
 80a13c2:	f7ff baa5 	b.w	80a0910 <HAL_USART_Read_Data>

080a13c6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a13c6:	7c00      	ldrb	r0, [r0, #16]
 80a13c8:	f7ff bab2 	b.w	80a0930 <HAL_USART_Flush_Data>

080a13cc <_ZN11USARTSerialD0Ev>:
 80a13cc:	b510      	push	{r4, lr}
 80a13ce:	4604      	mov	r4, r0
 80a13d0:	f7fe fe67 	bl	80a00a2 <_ZdlPv>
 80a13d4:	4620      	mov	r0, r4
 80a13d6:	bd10      	pop	{r4, pc}

080a13d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a13d8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a13da:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a13dc:	4604      	mov	r4, r0
 80a13de:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a13e0:	b925      	cbnz	r5, 80a13ec <_ZN11USARTSerial5writeEh+0x14>
 80a13e2:	7c00      	ldrb	r0, [r0, #16]
 80a13e4:	f7ff faac 	bl	80a0940 <HAL_USART_Available_Data_For_Write>
 80a13e8:	2800      	cmp	r0, #0
 80a13ea:	dd05      	ble.n	80a13f8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13ec:	4631      	mov	r1, r6
 80a13ee:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a13f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13f4:	f7ff ba7c 	b.w	80a08f0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a13f8:	4628      	mov	r0, r5
 80a13fa:	bd70      	pop	{r4, r5, r6, pc}

080a13fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13fc:	b510      	push	{r4, lr}
 80a13fe:	4604      	mov	r4, r0
 80a1400:	4608      	mov	r0, r1
 80a1402:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1404:	2200      	movs	r2, #0
 80a1406:	6062      	str	r2, [r4, #4]
 80a1408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a140c:	60a2      	str	r2, [r4, #8]
 80a140e:	4a05      	ldr	r2, [pc, #20]	; (80a1424 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1410:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1412:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1414:	2201      	movs	r2, #1
 80a1416:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1418:	461a      	mov	r2, r3
 80a141a:	f7ff fa61 	bl	80a08e0 <HAL_USART_Init>
}
 80a141e:	4620      	mov	r0, r4
 80a1420:	bd10      	pop	{r4, pc}
 80a1422:	bf00      	nop
 80a1424:	080a1f50 	.word	0x080a1f50

080a1428 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a1428:	2300      	movs	r3, #0
 80a142a:	7c00      	ldrb	r0, [r0, #16]
 80a142c:	f7ff ba90 	b.w	80a0950 <HAL_USART_BeginConfig>

080a1430 <_ZN11USARTSerialcvbEv>:
  return HAL_USART_Write_NineBitData(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 80a1430:	2001      	movs	r0, #1
 80a1432:	4770      	bx	lr

080a1434 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1436:	4c19      	ldr	r4, [pc, #100]	; (80a149c <_Z22__fetch_global_Serial1v+0x68>)
 80a1438:	6825      	ldr	r5, [r4, #0]
 80a143a:	b94d      	cbnz	r5, 80a1450 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a143c:	2084      	movs	r0, #132	; 0x84
 80a143e:	f7fe fe2c 	bl	80a009a <_Znwj>
 80a1442:	4606      	mov	r6, r0
 80a1444:	b118      	cbz	r0, 80a144e <_Z22__fetch_global_Serial1v+0x1a>
 80a1446:	2284      	movs	r2, #132	; 0x84
 80a1448:	4629      	mov	r1, r5
 80a144a:	f000 fb7e 	bl	80a1b4a <memset>
 80a144e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1450:	4d13      	ldr	r5, [pc, #76]	; (80a14a0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1452:	682e      	ldr	r6, [r5, #0]
 80a1454:	b94e      	cbnz	r6, 80a146a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a1456:	2084      	movs	r0, #132	; 0x84
 80a1458:	f7fe fe1f 	bl	80a009a <_Znwj>
 80a145c:	4607      	mov	r7, r0
 80a145e:	b118      	cbz	r0, 80a1468 <_Z22__fetch_global_Serial1v+0x34>
 80a1460:	2284      	movs	r2, #132	; 0x84
 80a1462:	4631      	mov	r1, r6
 80a1464:	f000 fb71 	bl	80a1b4a <memset>
 80a1468:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a146a:	4f0e      	ldr	r7, [pc, #56]	; (80a14a4 <_Z22__fetch_global_Serial1v+0x70>)
 80a146c:	6839      	ldr	r1, [r7, #0]
 80a146e:	f011 0601 	ands.w	r6, r1, #1
 80a1472:	d111      	bne.n	80a1498 <_Z22__fetch_global_Serial1v+0x64>
 80a1474:	4638      	mov	r0, r7
 80a1476:	f7fe fe18 	bl	80a00aa <__cxa_guard_acquire>
 80a147a:	b168      	cbz	r0, 80a1498 <_Z22__fetch_global_Serial1v+0x64>
 80a147c:	6822      	ldr	r2, [r4, #0]
 80a147e:	4631      	mov	r1, r6
 80a1480:	682b      	ldr	r3, [r5, #0]
 80a1482:	4809      	ldr	r0, [pc, #36]	; (80a14a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a1484:	f7ff ffba 	bl	80a13fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1488:	4638      	mov	r0, r7
 80a148a:	f7fe fe13 	bl	80a00b4 <__cxa_guard_release>
 80a148e:	4a07      	ldr	r2, [pc, #28]	; (80a14ac <_Z22__fetch_global_Serial1v+0x78>)
 80a1490:	4907      	ldr	r1, [pc, #28]	; (80a14b0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1492:	4805      	ldr	r0, [pc, #20]	; (80a14a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a1494:	f000 f9ee 	bl	80a1874 <__aeabi_atexit>
#endif
	return serial1;
}
 80a1498:	4803      	ldr	r0, [pc, #12]	; (80a14a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a149c:	20000418 	.word	0x20000418
 80a14a0:	20000410 	.word	0x20000410
 80a14a4:	20000414 	.word	0x20000414
 80a14a8:	200003fc 	.word	0x200003fc
 80a14ac:	20000370 	.word	0x20000370
 80a14b0:	080a13a9 	.word	0x080a13a9

080a14b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a14b4:	7441      	strb	r1, [r0, #17]
 80a14b6:	4770      	bx	lr

080a14b8 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a14b8:	4770      	bx	lr

080a14ba <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a14ba:	2100      	movs	r1, #0
 80a14bc:	7c00      	ldrb	r0, [r0, #16]
 80a14be:	f7ff ba6f 	b.w	80a09a0 <HAL_USB_USART_Receive_Data>

080a14c2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a14c2:	2101      	movs	r1, #1
 80a14c4:	7c00      	ldrb	r0, [r0, #16]
 80a14c6:	f7ff ba6b 	b.w	80a09a0 <HAL_USB_USART_Receive_Data>

080a14ca <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a14ca:	7c00      	ldrb	r0, [r0, #16]
 80a14cc:	f7ff ba60 	b.w	80a0990 <HAL_USB_USART_Available_Data_For_Write>

080a14d0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a14d0:	7c00      	ldrb	r0, [r0, #16]
 80a14d2:	f7ff ba55 	b.w	80a0980 <HAL_USB_USART_Available_Data>

080a14d6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a14d6:	b538      	push	{r3, r4, r5, lr}
 80a14d8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14da:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a14dc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14de:	f7ff fa57 	bl	80a0990 <HAL_USB_USART_Available_Data_For_Write>
 80a14e2:	2800      	cmp	r0, #0
 80a14e4:	dc01      	bgt.n	80a14ea <_ZN9USBSerial5writeEh+0x14>
 80a14e6:	7c60      	ldrb	r0, [r4, #17]
 80a14e8:	b120      	cbz	r0, 80a14f4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a14ea:	4629      	mov	r1, r5
 80a14ec:	7c20      	ldrb	r0, [r4, #16]
 80a14ee:	f7ff fa5f 	bl	80a09b0 <HAL_USB_USART_Send_Data>
    return 1;
 80a14f2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a14f4:	bd38      	pop	{r3, r4, r5, pc}

080a14f6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a14f6:	7c00      	ldrb	r0, [r0, #16]
 80a14f8:	f7ff ba62 	b.w	80a09c0 <HAL_USB_USART_Flush_Data>

080a14fc <_ZN9USBSerialD0Ev>:
 80a14fc:	b510      	push	{r4, lr}
 80a14fe:	4604      	mov	r4, r0
 80a1500:	f7fe fdcf 	bl	80a00a2 <_ZdlPv>
 80a1504:	4620      	mov	r0, r4
 80a1506:	bd10      	pop	{r4, pc}

080a1508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1508:	b510      	push	{r4, lr}
 80a150a:	4604      	mov	r4, r0
 80a150c:	2300      	movs	r3, #0
 80a150e:	6063      	str	r3, [r4, #4]
 80a1510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1514:	60a3      	str	r3, [r4, #8]
 80a1516:	4b05      	ldr	r3, [pc, #20]	; (80a152c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1518:	4608      	mov	r0, r1
 80a151a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a151c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a151e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1520:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1522:	4611      	mov	r1, r2
 80a1524:	f7ff fa1c 	bl	80a0960 <HAL_USB_USART_Init>
}
 80a1528:	4620      	mov	r0, r4
 80a152a:	bd10      	pop	{r4, pc}
 80a152c:	080a1f80 	.word	0x080a1f80

080a1530 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1530:	2200      	movs	r2, #0
 80a1532:	7c00      	ldrb	r0, [r0, #16]
 80a1534:	f7ff ba1c 	b.w	80a0970 <HAL_USB_USART_Begin>

080a1538 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a1538:	7c00      	ldrb	r0, [r0, #16]
 80a153a:	f7ff ba49 	b.w	80a09d0 <HAL_USB_USART_Is_Enabled>

080a153e <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 80a153e:	f7ff bffb 	b.w	80a1538 <_ZN9USBSerial9isEnabledEv>

080a1542 <_Z19acquireSerialBufferv>:
 80a1542:	b510      	push	{r4, lr}
 80a1544:	4604      	mov	r4, r0
 80a1546:	2214      	movs	r2, #20
 80a1548:	2100      	movs	r1, #0
 80a154a:	f000 fafe 	bl	80a1b4a <memset>
 80a154e:	4620      	mov	r0, r4
 80a1550:	bd10      	pop	{r4, pc}
	...

080a1554 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1554:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1556:	4d0e      	ldr	r5, [pc, #56]	; (80a1590 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1558:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a155a:	a801      	add	r0, sp, #4
 80a155c:	f7ff fff1 	bl	80a1542 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1560:	6829      	ldr	r1, [r5, #0]
 80a1562:	f011 0401 	ands.w	r4, r1, #1
 80a1566:	d110      	bne.n	80a158a <_Z16_fetch_usbserialv+0x36>
 80a1568:	4628      	mov	r0, r5
 80a156a:	f7fe fd9e 	bl	80a00aa <__cxa_guard_acquire>
 80a156e:	b160      	cbz	r0, 80a158a <_Z16_fetch_usbserialv+0x36>
 80a1570:	aa01      	add	r2, sp, #4
 80a1572:	4621      	mov	r1, r4
 80a1574:	4807      	ldr	r0, [pc, #28]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a1576:	f7ff ffc7 	bl	80a1508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a157a:	4628      	mov	r0, r5
 80a157c:	f7fe fd9a 	bl	80a00b4 <__cxa_guard_release>
 80a1580:	4a05      	ldr	r2, [pc, #20]	; (80a1598 <_Z16_fetch_usbserialv+0x44>)
 80a1582:	4906      	ldr	r1, [pc, #24]	; (80a159c <_Z16_fetch_usbserialv+0x48>)
 80a1584:	4803      	ldr	r0, [pc, #12]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a1586:	f000 f975 	bl	80a1874 <__aeabi_atexit>
	return _usbserial;
}
 80a158a:	4802      	ldr	r0, [pc, #8]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a158c:	b007      	add	sp, #28
 80a158e:	bd30      	pop	{r4, r5, pc}
 80a1590:	2000041c 	.word	0x2000041c
 80a1594:	20000424 	.word	0x20000424
 80a1598:	20000370 	.word	0x20000370
 80a159c:	080a14b9 	.word	0x080a14b9

080a15a0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a15a0:	b510      	push	{r4, lr}
 80a15a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15a4:	2214      	movs	r2, #20
 80a15a6:	2100      	movs	r1, #0
 80a15a8:	f000 facf 	bl	80a1b4a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	bd10      	pop	{r4, pc}

080a15b0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15b2:	4c0e      	ldr	r4, [pc, #56]	; (80a15ec <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a15b4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15b6:	a801      	add	r0, sp, #4
 80a15b8:	f7ff fff2 	bl	80a15a0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15bc:	6823      	ldr	r3, [r4, #0]
 80a15be:	07db      	lsls	r3, r3, #31
 80a15c0:	d410      	bmi.n	80a15e4 <_Z17_fetch_usbserial1v+0x34>
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	f7fe fd71 	bl	80a00aa <__cxa_guard_acquire>
 80a15c8:	b160      	cbz	r0, 80a15e4 <_Z17_fetch_usbserial1v+0x34>
 80a15ca:	aa01      	add	r2, sp, #4
 80a15cc:	2101      	movs	r1, #1
 80a15ce:	4808      	ldr	r0, [pc, #32]	; (80a15f0 <_Z17_fetch_usbserial1v+0x40>)
 80a15d0:	f7ff ff9a 	bl	80a1508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15d4:	4620      	mov	r0, r4
 80a15d6:	f7fe fd6d 	bl	80a00b4 <__cxa_guard_release>
 80a15da:	4a06      	ldr	r2, [pc, #24]	; (80a15f4 <_Z17_fetch_usbserial1v+0x44>)
 80a15dc:	4906      	ldr	r1, [pc, #24]	; (80a15f8 <_Z17_fetch_usbserial1v+0x48>)
 80a15de:	4804      	ldr	r0, [pc, #16]	; (80a15f0 <_Z17_fetch_usbserial1v+0x40>)
 80a15e0:	f000 f948 	bl	80a1874 <__aeabi_atexit>
  return _usbserial1;
}
 80a15e4:	4802      	ldr	r0, [pc, #8]	; (80a15f0 <_Z17_fetch_usbserial1v+0x40>)
 80a15e6:	b006      	add	sp, #24
 80a15e8:	bd10      	pop	{r4, pc}
 80a15ea:	bf00      	nop
 80a15ec:	20000420 	.word	0x20000420
 80a15f0:	20000438 	.word	0x20000438
 80a15f4:	20000370 	.word	0x20000370
 80a15f8:	080a14b9 	.word	0x080a14b9

080a15fc <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a15fc:	4770      	bx	lr

080a15fe <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a15fe:	2200      	movs	r2, #0
 80a1600:	4611      	mov	r1, r2
 80a1602:	4610      	mov	r0, r2
 80a1604:	f7ff ba30 	b.w	80a0a68 <network_ready>

080a1608 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1608:	4803      	ldr	r0, [pc, #12]	; (80a1618 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a160a:	4b04      	ldr	r3, [pc, #16]	; (80a161c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a160c:	4a04      	ldr	r2, [pc, #16]	; (80a1620 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a160e:	4905      	ldr	r1, [pc, #20]	; (80a1624 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1610:	6003      	str	r3, [r0, #0]
 80a1612:	f000 b92f 	b.w	80a1874 <__aeabi_atexit>
 80a1616:	bf00      	nop
 80a1618:	2000044c 	.word	0x2000044c
 80a161c:	080a1fb0 	.word	0x080a1fb0
 80a1620:	20000370 	.word	0x20000370
 80a1624:	080a15fd 	.word	0x080a15fd

080a1628 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1628:	b510      	push	{r4, lr}
 80a162a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a162c:	f000 fac6 	bl	80a1bbc <strlen>
 80a1630:	3801      	subs	r0, #1
 80a1632:	1823      	adds	r3, r4, r0
 80a1634:	4620      	mov	r0, r4
	while(i<j){
 80a1636:	4298      	cmp	r0, r3
 80a1638:	d206      	bcs.n	80a1648 <_Z11str_reversePc+0x20>
		c = *i;
 80a163a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a163c:	7819      	ldrb	r1, [r3, #0]
 80a163e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1642:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a1646:	e7f6      	b.n	80a1636 <_Z11str_reversePc+0xe>
 80a1648:	bd10      	pop	{r4, pc}

080a164a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a164a:	b570      	push	{r4, r5, r6, lr}
 80a164c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a164e:	1e91      	subs	r1, r2, #2
 80a1650:	2922      	cmp	r1, #34	; 0x22
 80a1652:	d820      	bhi.n	80a1696 <ultoa+0x4c>
 80a1654:	4625      	mov	r5, r4
 80a1656:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1658:	b910      	cbnz	r0, 80a1660 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a165a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a165c:	2230      	movs	r2, #48	; 0x30
 80a165e:	e00e      	b.n	80a167e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1660:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1664:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1668:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a166a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a166c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1670:	bf94      	ite	ls
 80a1672:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1674:	3157      	addhi	r1, #87	; 0x57
 80a1676:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a167a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a167c:	e7eb      	b.n	80a1656 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a167e:	4299      	cmp	r1, r3
 80a1680:	d202      	bcs.n	80a1688 <ultoa+0x3e>
            *ptr++ = '0';
 80a1682:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1686:	e7fa      	b.n	80a167e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1688:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a168a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a168c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a168e:	f7ff ffcb 	bl	80a1628 <_Z11str_reversePc>
	return buffer;
 80a1692:	4620      	mov	r0, r4
 80a1694:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1696:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1698:	bd70      	pop	{r4, r5, r6, pc}

080a169a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a169a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a169c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a169e:	460c      	mov	r4, r1
 80a16a0:	4615      	mov	r5, r2
	if(a<0){
 80a16a2:	da0b      	bge.n	80a16bc <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a16a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a16a8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a16ac:	bf14      	ite	ne
 80a16ae:	4258      	negne	r0, r3
 80a16b0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a16b2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a16b4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a16b6:	462a      	mov	r2, r5
 80a16b8:	4419      	add	r1, r3
 80a16ba:	e000      	b.n	80a16be <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a16bc:	2301      	movs	r3, #1
 80a16be:	f7ff ffc4 	bl	80a164a <ultoa>
	}
	return buffer;
}
 80a16c2:	4620      	mov	r0, r4
 80a16c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a16c8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a16c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a16ca:	4b14      	ldr	r3, [pc, #80]	; (80a171c <serialEventRun+0x54>)
 80a16cc:	b133      	cbz	r3, 80a16dc <serialEventRun+0x14>
 80a16ce:	f7ff ff41 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a16d2:	6803      	ldr	r3, [r0, #0]
 80a16d4:	691b      	ldr	r3, [r3, #16]
 80a16d6:	4798      	blx	r3
 80a16d8:	2800      	cmp	r0, #0
 80a16da:	dc16      	bgt.n	80a170a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a16dc:	4b10      	ldr	r3, [pc, #64]	; (80a1720 <serialEventRun+0x58>)
 80a16de:	b133      	cbz	r3, 80a16ee <serialEventRun+0x26>
 80a16e0:	f7ff fea8 	bl	80a1434 <_Z22__fetch_global_Serial1v>
 80a16e4:	6803      	ldr	r3, [r0, #0]
 80a16e6:	691b      	ldr	r3, [r3, #16]
 80a16e8:	4798      	blx	r3
 80a16ea:	2800      	cmp	r0, #0
 80a16ec:	dc10      	bgt.n	80a1710 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a16ee:	4b0d      	ldr	r3, [pc, #52]	; (80a1724 <serialEventRun+0x5c>)
 80a16f0:	b10b      	cbz	r3, 80a16f6 <serialEventRun+0x2e>
 80a16f2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a16f6:	4b0c      	ldr	r3, [pc, #48]	; (80a1728 <serialEventRun+0x60>)
 80a16f8:	b17b      	cbz	r3, 80a171a <serialEventRun+0x52>
 80a16fa:	f7ff ff59 	bl	80a15b0 <_Z17_fetch_usbserial1v>
 80a16fe:	6803      	ldr	r3, [r0, #0]
 80a1700:	691b      	ldr	r3, [r3, #16]
 80a1702:	4798      	blx	r3
 80a1704:	2800      	cmp	r0, #0
 80a1706:	dc06      	bgt.n	80a1716 <serialEventRun+0x4e>
 80a1708:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a170a:	f3af 8000 	nop.w
 80a170e:	e7e5      	b.n	80a16dc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1710:	f3af 8000 	nop.w
 80a1714:	e7eb      	b.n	80a16ee <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1716:	f3af 8000 	nop.w
 80a171a:	bd08      	pop	{r3, pc}
	...

080a172c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a172c:	b508      	push	{r3, lr}
	serialEventRun();
 80a172e:	f7ff ffcb 	bl	80a16c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1732:	f7ff f87d 	bl	80a0830 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1736:	4b01      	ldr	r3, [pc, #4]	; (80a173c <_post_loop+0x10>)
 80a1738:	6018      	str	r0, [r3, #0]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	20000458 	.word	0x20000458

080a1740 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1740:	4802      	ldr	r0, [pc, #8]	; (80a174c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1742:	4a03      	ldr	r2, [pc, #12]	; (80a1750 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1744:	4903      	ldr	r1, [pc, #12]	; (80a1754 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1746:	1a12      	subs	r2, r2, r0
 80a1748:	f000 b9f4 	b.w	80a1b34 <memcpy>
 80a174c:	40024000 	.word	0x40024000
 80a1750:	40024004 	.word	0x40024004
 80a1754:	080a2160 	.word	0x080a2160

080a1758 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1758:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a175a:	2300      	movs	r3, #0
 80a175c:	9300      	str	r3, [sp, #0]
 80a175e:	461a      	mov	r2, r3
 80a1760:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1764:	f7ff f96e 	bl	80a0a44 <system_ctrl_set_result>
}
 80a1768:	b003      	add	sp, #12
 80a176a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1770 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1770:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1772:	8843      	ldrh	r3, [r0, #2]
 80a1774:	2b0a      	cmp	r3, #10
 80a1776:	d008      	beq.n	80a178a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1778:	2b50      	cmp	r3, #80	; 0x50
 80a177a:	d109      	bne.n	80a1790 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a177c:	4b09      	ldr	r3, [pc, #36]	; (80a17a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a177e:	681b      	ldr	r3, [r3, #0]
 80a1780:	b13b      	cbz	r3, 80a1792 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1782:	b003      	add	sp, #12
 80a1784:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1788:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a178a:	f7ff ffe5 	bl	80a1758 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a178e:	e006      	b.n	80a179e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1790:	2300      	movs	r3, #0
 80a1792:	9300      	str	r3, [sp, #0]
 80a1794:	461a      	mov	r2, r3
 80a1796:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a179a:	f7ff f953 	bl	80a0a44 <system_ctrl_set_result>
        break;
    }
}
 80a179e:	b003      	add	sp, #12
 80a17a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a17a4:	20000450 	.word	0x20000450

080a17a8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a17a8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a17aa:	4c10      	ldr	r4, [pc, #64]	; (80a17ec <module_user_init_hook+0x44>)
 80a17ac:	4d10      	ldr	r5, [pc, #64]	; (80a17f0 <module_user_init_hook+0x48>)
 80a17ae:	6823      	ldr	r3, [r4, #0]
 80a17b0:	42ab      	cmp	r3, r5
 80a17b2:	4b10      	ldr	r3, [pc, #64]	; (80a17f4 <module_user_init_hook+0x4c>)
 80a17b4:	bf0c      	ite	eq
 80a17b6:	2201      	moveq	r2, #1
 80a17b8:	2200      	movne	r2, #0
 80a17ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a17bc:	d002      	beq.n	80a17c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a17be:	f7ff ffbf 	bl	80a1740 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a17c2:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a17c4:	f7ff f82c 	bl	80a0820 <HAL_RNG_GetRandomNumber>
 80a17c8:	f000 f9c8 	bl	80a1b5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a17cc:	4b0a      	ldr	r3, [pc, #40]	; (80a17f8 <module_user_init_hook+0x50>)
 80a17ce:	b11b      	cbz	r3, 80a17d8 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17d0:	f7ff f826 	bl	80a0820 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a17d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a17d8:	2100      	movs	r1, #0
 80a17da:	4807      	ldr	r0, [pc, #28]	; (80a17f8 <module_user_init_hook+0x50>)
 80a17dc:	f7ff f93c 	bl	80a0a58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a17e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a17e4:	2100      	movs	r1, #0
 80a17e6:	4805      	ldr	r0, [pc, #20]	; (80a17fc <module_user_init_hook+0x54>)
 80a17e8:	f7ff b922 	b.w	80a0a30 <system_ctrl_set_app_request_handler>
 80a17ec:	40024000 	.word	0x40024000
 80a17f0:	9a271c1e 	.word	0x9a271c1e
 80a17f4:	20000454 	.word	0x20000454
 80a17f8:	00000000 	.word	0x00000000
 80a17fc:	080a1771 	.word	0x080a1771

080a1800 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1800:	b513      	push	{r0, r1, r4, lr}
 80a1802:	4c08      	ldr	r4, [pc, #32]	; (80a1824 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1804:	2300      	movs	r3, #0
 80a1806:	461a      	mov	r2, r3
 80a1808:	4619      	mov	r1, r3
 80a180a:	9300      	str	r3, [sp, #0]
 80a180c:	4620      	mov	r0, r4
 80a180e:	f7ff f993 	bl	80a0b38 <_ZN9IPAddressC1Ehhhh>
 80a1812:	4620      	mov	r0, r4
 80a1814:	4a04      	ldr	r2, [pc, #16]	; (80a1828 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1816:	4905      	ldr	r1, [pc, #20]	; (80a182c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1818:	b002      	add	sp, #8
 80a181a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a181e:	f000 b829 	b.w	80a1874 <__aeabi_atexit>
 80a1822:	bf00      	nop
 80a1824:	2000045c 	.word	0x2000045c
 80a1828:	20000370 	.word	0x20000370
 80a182c:	080a0ac1 	.word	0x080a0ac1

080a1830 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1830:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1832:	4c0c      	ldr	r4, [pc, #48]	; (80a1864 <_GLOBAL__sub_I_SPI+0x34>)
 80a1834:	4e0c      	ldr	r6, [pc, #48]	; (80a1868 <_GLOBAL__sub_I_SPI+0x38>)
 80a1836:	4d0d      	ldr	r5, [pc, #52]	; (80a186c <_GLOBAL__sub_I_SPI+0x3c>)
 80a1838:	2100      	movs	r1, #0
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7ff fa5e 	bl	80a0cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1840:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1842:	4c0b      	ldr	r4, [pc, #44]	; (80a1870 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1844:	4632      	mov	r2, r6
 80a1846:	4629      	mov	r1, r5
 80a1848:	f000 f814 	bl	80a1874 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a184c:	2101      	movs	r1, #1
 80a184e:	4620      	mov	r0, r4
 80a1850:	f7ff fa54 	bl	80a0cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1854:	4632      	mov	r2, r6
 80a1856:	4629      	mov	r1, r5
 80a1858:	4620      	mov	r0, r4
 80a185a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a185e:	f000 b809 	b.w	80a1874 <__aeabi_atexit>
 80a1862:	bf00      	nop
 80a1864:	20000474 	.word	0x20000474
 80a1868:	20000370 	.word	0x20000370
 80a186c:	080a0ced 	.word	0x080a0ced
 80a1870:	20000484 	.word	0x20000484

080a1874 <__aeabi_atexit>:
 80a1874:	460b      	mov	r3, r1
 80a1876:	4601      	mov	r1, r0
 80a1878:	4618      	mov	r0, r3
 80a187a:	f000 b94d 	b.w	80a1b18 <__cxa_atexit>
	...

080a1880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1880:	4b24      	ldr	r3, [pc, #144]	; (80a1914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d0      	lsls	r0, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b22      	ldr	r3, [pc, #136]	; (80a1918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d1      	lsls	r1, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4b20      	ldr	r3, [pc, #128]	; (80a191c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a189a:	681a      	ldr	r2, [r3, #0]
 80a189c:	07d2      	lsls	r2, r2, #31
 80a189e:	bf5c      	itt	pl
 80a18a0:	2201      	movpl	r2, #1
 80a18a2:	601a      	strpl	r2, [r3, #0]
 80a18a4:	4b1e      	ldr	r3, [pc, #120]	; (80a1920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a18a6:	681a      	ldr	r2, [r3, #0]
 80a18a8:	07d0      	lsls	r0, r2, #31
 80a18aa:	bf5c      	itt	pl
 80a18ac:	2201      	movpl	r2, #1
 80a18ae:	601a      	strpl	r2, [r3, #0]
 80a18b0:	4b1c      	ldr	r3, [pc, #112]	; (80a1924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	07d1      	lsls	r1, r2, #31
 80a18b6:	bf5c      	itt	pl
 80a18b8:	2201      	movpl	r2, #1
 80a18ba:	601a      	strpl	r2, [r3, #0]
 80a18bc:	4b1a      	ldr	r3, [pc, #104]	; (80a1928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a18be:	681a      	ldr	r2, [r3, #0]
 80a18c0:	07d2      	lsls	r2, r2, #31
 80a18c2:	bf5c      	itt	pl
 80a18c4:	2201      	movpl	r2, #1
 80a18c6:	601a      	strpl	r2, [r3, #0]
 80a18c8:	4b18      	ldr	r3, [pc, #96]	; (80a192c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a18ca:	681a      	ldr	r2, [r3, #0]
 80a18cc:	07d0      	lsls	r0, r2, #31
 80a18ce:	bf5c      	itt	pl
 80a18d0:	2201      	movpl	r2, #1
 80a18d2:	601a      	strpl	r2, [r3, #0]
 80a18d4:	4b16      	ldr	r3, [pc, #88]	; (80a1930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a18d6:	681a      	ldr	r2, [r3, #0]
 80a18d8:	07d1      	lsls	r1, r2, #31
 80a18da:	bf5c      	itt	pl
 80a18dc:	2201      	movpl	r2, #1
 80a18de:	601a      	strpl	r2, [r3, #0]
 80a18e0:	4b14      	ldr	r3, [pc, #80]	; (80a1934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a18e2:	681a      	ldr	r2, [r3, #0]
 80a18e4:	07d2      	lsls	r2, r2, #31
 80a18e6:	bf5c      	itt	pl
 80a18e8:	2201      	movpl	r2, #1
 80a18ea:	601a      	strpl	r2, [r3, #0]
 80a18ec:	4b12      	ldr	r3, [pc, #72]	; (80a1938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a18ee:	681a      	ldr	r2, [r3, #0]
 80a18f0:	07d0      	lsls	r0, r2, #31
 80a18f2:	bf5c      	itt	pl
 80a18f4:	2201      	movpl	r2, #1
 80a18f6:	601a      	strpl	r2, [r3, #0]
 80a18f8:	4b10      	ldr	r3, [pc, #64]	; (80a193c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a18fa:	681a      	ldr	r2, [r3, #0]
 80a18fc:	07d1      	lsls	r1, r2, #31
 80a18fe:	bf5c      	itt	pl
 80a1900:	2201      	movpl	r2, #1
 80a1902:	601a      	strpl	r2, [r3, #0]
 80a1904:	4b0e      	ldr	r3, [pc, #56]	; (80a1940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d2      	lsls	r2, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4770      	bx	lr
 80a1912:	bf00      	nop
 80a1914:	200004c0 	.word	0x200004c0
 80a1918:	200004bc 	.word	0x200004bc
 80a191c:	200004b8 	.word	0x200004b8
 80a1920:	200004b4 	.word	0x200004b4
 80a1924:	200004b0 	.word	0x200004b0
 80a1928:	200004ac 	.word	0x200004ac
 80a192c:	200004a8 	.word	0x200004a8
 80a1930:	200004a4 	.word	0x200004a4
 80a1934:	200004a0 	.word	0x200004a0
 80a1938:	2000049c 	.word	0x2000049c
 80a193c:	20000498 	.word	0x20000498
 80a1940:	20000494 	.word	0x20000494

080a1944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1944:	4b18      	ldr	r3, [pc, #96]	; (80a19a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1946:	681a      	ldr	r2, [r3, #0]
 80a1948:	07d1      	lsls	r1, r2, #31
 80a194a:	bf5c      	itt	pl
 80a194c:	2201      	movpl	r2, #1
 80a194e:	601a      	strpl	r2, [r3, #0]
 80a1950:	4b16      	ldr	r3, [pc, #88]	; (80a19ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1952:	681a      	ldr	r2, [r3, #0]
 80a1954:	07d2      	lsls	r2, r2, #31
 80a1956:	bf5c      	itt	pl
 80a1958:	2201      	movpl	r2, #1
 80a195a:	601a      	strpl	r2, [r3, #0]
 80a195c:	4b14      	ldr	r3, [pc, #80]	; (80a19b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a195e:	681a      	ldr	r2, [r3, #0]
 80a1960:	07d0      	lsls	r0, r2, #31
 80a1962:	bf5c      	itt	pl
 80a1964:	2201      	movpl	r2, #1
 80a1966:	601a      	strpl	r2, [r3, #0]
 80a1968:	4b12      	ldr	r3, [pc, #72]	; (80a19b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a196a:	681a      	ldr	r2, [r3, #0]
 80a196c:	07d1      	lsls	r1, r2, #31
 80a196e:	bf5c      	itt	pl
 80a1970:	2201      	movpl	r2, #1
 80a1972:	601a      	strpl	r2, [r3, #0]
 80a1974:	4b10      	ldr	r3, [pc, #64]	; (80a19b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d2      	lsls	r2, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4b0e      	ldr	r3, [pc, #56]	; (80a19bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d0      	lsls	r0, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b0c      	ldr	r3, [pc, #48]	; (80a19c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d1      	lsls	r1, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b0a      	ldr	r3, [pc, #40]	; (80a19c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d2      	lsls	r2, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4770      	bx	lr
 80a19a6:	bf00      	nop
 80a19a8:	200004e0 	.word	0x200004e0
 80a19ac:	200004dc 	.word	0x200004dc
 80a19b0:	200004d8 	.word	0x200004d8
 80a19b4:	200004d4 	.word	0x200004d4
 80a19b8:	200004d0 	.word	0x200004d0
 80a19bc:	200004cc 	.word	0x200004cc
 80a19c0:	200004c8 	.word	0x200004c8
 80a19c4:	200004c4 	.word	0x200004c4

080a19c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19c8:	4b18      	ldr	r3, [pc, #96]	; (80a1a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d1      	lsls	r1, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4b16      	ldr	r3, [pc, #88]	; (80a1a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a19d6:	681a      	ldr	r2, [r3, #0]
 80a19d8:	07d2      	lsls	r2, r2, #31
 80a19da:	bf5c      	itt	pl
 80a19dc:	2201      	movpl	r2, #1
 80a19de:	601a      	strpl	r2, [r3, #0]
 80a19e0:	4b14      	ldr	r3, [pc, #80]	; (80a1a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a19e2:	681a      	ldr	r2, [r3, #0]
 80a19e4:	07d0      	lsls	r0, r2, #31
 80a19e6:	bf5c      	itt	pl
 80a19e8:	2201      	movpl	r2, #1
 80a19ea:	601a      	strpl	r2, [r3, #0]
 80a19ec:	4b12      	ldr	r3, [pc, #72]	; (80a1a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a19ee:	681a      	ldr	r2, [r3, #0]
 80a19f0:	07d1      	lsls	r1, r2, #31
 80a19f2:	bf5c      	itt	pl
 80a19f4:	2201      	movpl	r2, #1
 80a19f6:	601a      	strpl	r2, [r3, #0]
 80a19f8:	4b10      	ldr	r3, [pc, #64]	; (80a1a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19fa:	681a      	ldr	r2, [r3, #0]
 80a19fc:	07d2      	lsls	r2, r2, #31
 80a19fe:	bf5c      	itt	pl
 80a1a00:	2201      	movpl	r2, #1
 80a1a02:	601a      	strpl	r2, [r3, #0]
 80a1a04:	4b0e      	ldr	r3, [pc, #56]	; (80a1a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a06:	681a      	ldr	r2, [r3, #0]
 80a1a08:	07d0      	lsls	r0, r2, #31
 80a1a0a:	bf5c      	itt	pl
 80a1a0c:	2201      	movpl	r2, #1
 80a1a0e:	601a      	strpl	r2, [r3, #0]
 80a1a10:	4b0c      	ldr	r3, [pc, #48]	; (80a1a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a12:	681a      	ldr	r2, [r3, #0]
 80a1a14:	07d1      	lsls	r1, r2, #31
 80a1a16:	bf5c      	itt	pl
 80a1a18:	2201      	movpl	r2, #1
 80a1a1a:	601a      	strpl	r2, [r3, #0]
 80a1a1c:	4b0a      	ldr	r3, [pc, #40]	; (80a1a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a1e:	681a      	ldr	r2, [r3, #0]
 80a1a20:	07d2      	lsls	r2, r2, #31
 80a1a22:	bf5c      	itt	pl
 80a1a24:	2201      	movpl	r2, #1
 80a1a26:	601a      	strpl	r2, [r3, #0]
 80a1a28:	4770      	bx	lr
 80a1a2a:	bf00      	nop
 80a1a2c:	20000500 	.word	0x20000500
 80a1a30:	200004fc 	.word	0x200004fc
 80a1a34:	200004f8 	.word	0x200004f8
 80a1a38:	200004f4 	.word	0x200004f4
 80a1a3c:	200004f0 	.word	0x200004f0
 80a1a40:	200004ec 	.word	0x200004ec
 80a1a44:	200004e8 	.word	0x200004e8
 80a1a48:	200004e4 	.word	0x200004e4

080a1a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a4c:	4b24      	ldr	r3, [pc, #144]	; (80a1ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a4e:	681a      	ldr	r2, [r3, #0]
 80a1a50:	07d0      	lsls	r0, r2, #31
 80a1a52:	bf5c      	itt	pl
 80a1a54:	2201      	movpl	r2, #1
 80a1a56:	601a      	strpl	r2, [r3, #0]
 80a1a58:	4b22      	ldr	r3, [pc, #136]	; (80a1ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a5a:	681a      	ldr	r2, [r3, #0]
 80a1a5c:	07d1      	lsls	r1, r2, #31
 80a1a5e:	bf5c      	itt	pl
 80a1a60:	2201      	movpl	r2, #1
 80a1a62:	601a      	strpl	r2, [r3, #0]
 80a1a64:	4b20      	ldr	r3, [pc, #128]	; (80a1ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a66:	681a      	ldr	r2, [r3, #0]
 80a1a68:	07d2      	lsls	r2, r2, #31
 80a1a6a:	bf5c      	itt	pl
 80a1a6c:	2201      	movpl	r2, #1
 80a1a6e:	601a      	strpl	r2, [r3, #0]
 80a1a70:	4b1e      	ldr	r3, [pc, #120]	; (80a1aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1a72:	681a      	ldr	r2, [r3, #0]
 80a1a74:	07d0      	lsls	r0, r2, #31
 80a1a76:	bf5c      	itt	pl
 80a1a78:	2201      	movpl	r2, #1
 80a1a7a:	601a      	strpl	r2, [r3, #0]
 80a1a7c:	4b1c      	ldr	r3, [pc, #112]	; (80a1af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1a7e:	681a      	ldr	r2, [r3, #0]
 80a1a80:	07d1      	lsls	r1, r2, #31
 80a1a82:	bf5c      	itt	pl
 80a1a84:	2201      	movpl	r2, #1
 80a1a86:	601a      	strpl	r2, [r3, #0]
 80a1a88:	4b1a      	ldr	r3, [pc, #104]	; (80a1af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1a8a:	681a      	ldr	r2, [r3, #0]
 80a1a8c:	07d2      	lsls	r2, r2, #31
 80a1a8e:	bf5c      	itt	pl
 80a1a90:	2201      	movpl	r2, #1
 80a1a92:	601a      	strpl	r2, [r3, #0]
 80a1a94:	4b18      	ldr	r3, [pc, #96]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1a96:	681a      	ldr	r2, [r3, #0]
 80a1a98:	07d0      	lsls	r0, r2, #31
 80a1a9a:	bf5c      	itt	pl
 80a1a9c:	2201      	movpl	r2, #1
 80a1a9e:	601a      	strpl	r2, [r3, #0]
 80a1aa0:	4b16      	ldr	r3, [pc, #88]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1aa2:	681a      	ldr	r2, [r3, #0]
 80a1aa4:	07d1      	lsls	r1, r2, #31
 80a1aa6:	bf5c      	itt	pl
 80a1aa8:	2201      	movpl	r2, #1
 80a1aaa:	601a      	strpl	r2, [r3, #0]
 80a1aac:	4b14      	ldr	r3, [pc, #80]	; (80a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1aae:	681a      	ldr	r2, [r3, #0]
 80a1ab0:	07d2      	lsls	r2, r2, #31
 80a1ab2:	bf5c      	itt	pl
 80a1ab4:	2201      	movpl	r2, #1
 80a1ab6:	601a      	strpl	r2, [r3, #0]
 80a1ab8:	4b12      	ldr	r3, [pc, #72]	; (80a1b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	07d0      	lsls	r0, r2, #31
 80a1abe:	bf5c      	itt	pl
 80a1ac0:	2201      	movpl	r2, #1
 80a1ac2:	601a      	strpl	r2, [r3, #0]
 80a1ac4:	4b10      	ldr	r3, [pc, #64]	; (80a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1ac6:	681a      	ldr	r2, [r3, #0]
 80a1ac8:	07d1      	lsls	r1, r2, #31
 80a1aca:	bf5c      	itt	pl
 80a1acc:	2201      	movpl	r2, #1
 80a1ace:	601a      	strpl	r2, [r3, #0]
 80a1ad0:	4b0e      	ldr	r3, [pc, #56]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1ad2:	681a      	ldr	r2, [r3, #0]
 80a1ad4:	07d2      	lsls	r2, r2, #31
 80a1ad6:	bf5c      	itt	pl
 80a1ad8:	2201      	movpl	r2, #1
 80a1ada:	601a      	strpl	r2, [r3, #0]
 80a1adc:	4770      	bx	lr
 80a1ade:	bf00      	nop
 80a1ae0:	20000530 	.word	0x20000530
 80a1ae4:	2000052c 	.word	0x2000052c
 80a1ae8:	20000528 	.word	0x20000528
 80a1aec:	20000524 	.word	0x20000524
 80a1af0:	20000520 	.word	0x20000520
 80a1af4:	2000051c 	.word	0x2000051c
 80a1af8:	20000518 	.word	0x20000518
 80a1afc:	20000514 	.word	0x20000514
 80a1b00:	20000510 	.word	0x20000510
 80a1b04:	2000050c 	.word	0x2000050c
 80a1b08:	20000508 	.word	0x20000508
 80a1b0c:	20000504 	.word	0x20000504

080a1b10 <atol>:
 80a1b10:	220a      	movs	r2, #10
 80a1b12:	2100      	movs	r1, #0
 80a1b14:	f000 b8e0 	b.w	80a1cd8 <strtol>

080a1b18 <__cxa_atexit>:
 80a1b18:	b510      	push	{r4, lr}
 80a1b1a:	4c05      	ldr	r4, [pc, #20]	; (80a1b30 <__cxa_atexit+0x18>)
 80a1b1c:	4613      	mov	r3, r2
 80a1b1e:	b12c      	cbz	r4, 80a1b2c <__cxa_atexit+0x14>
 80a1b20:	460a      	mov	r2, r1
 80a1b22:	4601      	mov	r1, r0
 80a1b24:	2002      	movs	r0, #2
 80a1b26:	f3af 8000 	nop.w
 80a1b2a:	bd10      	pop	{r4, pc}
 80a1b2c:	4620      	mov	r0, r4
 80a1b2e:	bd10      	pop	{r4, pc}
 80a1b30:	00000000 	.word	0x00000000

080a1b34 <memcpy>:
 80a1b34:	b510      	push	{r4, lr}
 80a1b36:	1e43      	subs	r3, r0, #1
 80a1b38:	440a      	add	r2, r1
 80a1b3a:	4291      	cmp	r1, r2
 80a1b3c:	d004      	beq.n	80a1b48 <memcpy+0x14>
 80a1b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1b46:	e7f8      	b.n	80a1b3a <memcpy+0x6>
 80a1b48:	bd10      	pop	{r4, pc}

080a1b4a <memset>:
 80a1b4a:	4603      	mov	r3, r0
 80a1b4c:	4402      	add	r2, r0
 80a1b4e:	4293      	cmp	r3, r2
 80a1b50:	d002      	beq.n	80a1b58 <memset+0xe>
 80a1b52:	f803 1b01 	strb.w	r1, [r3], #1
 80a1b56:	e7fa      	b.n	80a1b4e <memset+0x4>
 80a1b58:	4770      	bx	lr
	...

080a1b5c <srand>:
 80a1b5c:	b538      	push	{r3, r4, r5, lr}
 80a1b5e:	4b12      	ldr	r3, [pc, #72]	; (80a1ba8 <srand+0x4c>)
 80a1b60:	4605      	mov	r5, r0
 80a1b62:	681c      	ldr	r4, [r3, #0]
 80a1b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1b66:	b9d3      	cbnz	r3, 80a1b9e <srand+0x42>
 80a1b68:	2018      	movs	r0, #24
 80a1b6a:	f7fe ff85 	bl	80a0a78 <malloc>
 80a1b6e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1b72:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1b74:	8003      	strh	r3, [r0, #0]
 80a1b76:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1b7a:	8043      	strh	r3, [r0, #2]
 80a1b7c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1b80:	8083      	strh	r3, [r0, #4]
 80a1b82:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1b86:	80c3      	strh	r3, [r0, #6]
 80a1b88:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1b8c:	8103      	strh	r3, [r0, #8]
 80a1b8e:	2305      	movs	r3, #5
 80a1b90:	8143      	strh	r3, [r0, #10]
 80a1b92:	230b      	movs	r3, #11
 80a1b94:	8183      	strh	r3, [r0, #12]
 80a1b96:	2201      	movs	r2, #1
 80a1b98:	2300      	movs	r3, #0
 80a1b9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1ba0:	2200      	movs	r2, #0
 80a1ba2:	611d      	str	r5, [r3, #16]
 80a1ba4:	615a      	str	r2, [r3, #20]
 80a1ba6:	bd38      	pop	{r3, r4, r5, pc}
 80a1ba8:	2000036c 	.word	0x2000036c

080a1bac <strcpy>:
 80a1bac:	4603      	mov	r3, r0
 80a1bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1bb2:	f803 2b01 	strb.w	r2, [r3], #1
 80a1bb6:	2a00      	cmp	r2, #0
 80a1bb8:	d1f9      	bne.n	80a1bae <strcpy+0x2>
 80a1bba:	4770      	bx	lr

080a1bbc <strlen>:
 80a1bbc:	4603      	mov	r3, r0
 80a1bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1bc2:	2a00      	cmp	r2, #0
 80a1bc4:	d1fb      	bne.n	80a1bbe <strlen+0x2>
 80a1bc6:	1a18      	subs	r0, r3, r0
 80a1bc8:	3801      	subs	r0, #1
 80a1bca:	4770      	bx	lr

080a1bcc <_strtol_r>:
 80a1bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1bd0:	460f      	mov	r7, r1
 80a1bd2:	4680      	mov	r8, r0
 80a1bd4:	483f      	ldr	r0, [pc, #252]	; (80a1cd4 <_strtol_r+0x108>)
 80a1bd6:	f8d0 9000 	ldr.w	r9, [r0]
 80a1bda:	463d      	mov	r5, r7
 80a1bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1be0:	eb09 0004 	add.w	r0, r9, r4
 80a1be4:	7840      	ldrb	r0, [r0, #1]
 80a1be6:	f000 0008 	and.w	r0, r0, #8
 80a1bea:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1bee:	b108      	cbz	r0, 80a1bf4 <_strtol_r+0x28>
 80a1bf0:	462f      	mov	r7, r5
 80a1bf2:	e7f2      	b.n	80a1bda <_strtol_r+0xe>
 80a1bf4:	2c2d      	cmp	r4, #45	; 0x2d
 80a1bf6:	d103      	bne.n	80a1c00 <_strtol_r+0x34>
 80a1bf8:	1cbd      	adds	r5, r7, #2
 80a1bfa:	787c      	ldrb	r4, [r7, #1]
 80a1bfc:	2601      	movs	r6, #1
 80a1bfe:	e003      	b.n	80a1c08 <_strtol_r+0x3c>
 80a1c00:	2c2b      	cmp	r4, #43	; 0x2b
 80a1c02:	bf04      	itt	eq
 80a1c04:	787c      	ldrbeq	r4, [r7, #1]
 80a1c06:	1cbd      	addeq	r5, r7, #2
 80a1c08:	b113      	cbz	r3, 80a1c10 <_strtol_r+0x44>
 80a1c0a:	2b10      	cmp	r3, #16
 80a1c0c:	d10a      	bne.n	80a1c24 <_strtol_r+0x58>
 80a1c0e:	e05b      	b.n	80a1cc8 <_strtol_r+0xfc>
 80a1c10:	2c30      	cmp	r4, #48	; 0x30
 80a1c12:	d157      	bne.n	80a1cc4 <_strtol_r+0xf8>
 80a1c14:	7828      	ldrb	r0, [r5, #0]
 80a1c16:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1c1a:	2858      	cmp	r0, #88	; 0x58
 80a1c1c:	d14d      	bne.n	80a1cba <_strtol_r+0xee>
 80a1c1e:	786c      	ldrb	r4, [r5, #1]
 80a1c20:	2310      	movs	r3, #16
 80a1c22:	3502      	adds	r5, #2
 80a1c24:	2e00      	cmp	r6, #0
 80a1c26:	bf14      	ite	ne
 80a1c28:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1c2c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a1c30:	fbbc faf3 	udiv	sl, ip, r3
 80a1c34:	2700      	movs	r7, #0
 80a1c36:	4638      	mov	r0, r7
 80a1c38:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a1c3c:	eb09 0e04 	add.w	lr, r9, r4
 80a1c40:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1c44:	f01e 0f04 	tst.w	lr, #4
 80a1c48:	d001      	beq.n	80a1c4e <_strtol_r+0x82>
 80a1c4a:	3c30      	subs	r4, #48	; 0x30
 80a1c4c:	e00b      	b.n	80a1c66 <_strtol_r+0x9a>
 80a1c4e:	f01e 0e03 	ands.w	lr, lr, #3
 80a1c52:	d01b      	beq.n	80a1c8c <_strtol_r+0xc0>
 80a1c54:	f1be 0f01 	cmp.w	lr, #1
 80a1c58:	bf0c      	ite	eq
 80a1c5a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a1c5e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a1c62:	ebce 0404 	rsb	r4, lr, r4
 80a1c66:	42a3      	cmp	r3, r4
 80a1c68:	dd10      	ble.n	80a1c8c <_strtol_r+0xc0>
 80a1c6a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a1c6e:	d00a      	beq.n	80a1c86 <_strtol_r+0xba>
 80a1c70:	4550      	cmp	r0, sl
 80a1c72:	d806      	bhi.n	80a1c82 <_strtol_r+0xb6>
 80a1c74:	d101      	bne.n	80a1c7a <_strtol_r+0xae>
 80a1c76:	4564      	cmp	r4, ip
 80a1c78:	dc03      	bgt.n	80a1c82 <_strtol_r+0xb6>
 80a1c7a:	fb03 4000 	mla	r0, r3, r0, r4
 80a1c7e:	2701      	movs	r7, #1
 80a1c80:	e001      	b.n	80a1c86 <_strtol_r+0xba>
 80a1c82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a1c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1c8a:	e7d7      	b.n	80a1c3c <_strtol_r+0x70>
 80a1c8c:	1c7b      	adds	r3, r7, #1
 80a1c8e:	d10c      	bne.n	80a1caa <_strtol_r+0xde>
 80a1c90:	2e00      	cmp	r6, #0
 80a1c92:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a1c96:	bf14      	ite	ne
 80a1c98:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1c9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1ca0:	f8c8 3000 	str.w	r3, [r8]
 80a1ca4:	b92a      	cbnz	r2, 80a1cb2 <_strtol_r+0xe6>
 80a1ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1caa:	b106      	cbz	r6, 80a1cae <_strtol_r+0xe2>
 80a1cac:	4240      	negs	r0, r0
 80a1cae:	b172      	cbz	r2, 80a1cce <_strtol_r+0x102>
 80a1cb0:	b107      	cbz	r7, 80a1cb4 <_strtol_r+0xe8>
 80a1cb2:	1e69      	subs	r1, r5, #1
 80a1cb4:	6011      	str	r1, [r2, #0]
 80a1cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1cba:	2430      	movs	r4, #48	; 0x30
 80a1cbc:	2b00      	cmp	r3, #0
 80a1cbe:	d1b1      	bne.n	80a1c24 <_strtol_r+0x58>
 80a1cc0:	2308      	movs	r3, #8
 80a1cc2:	e7af      	b.n	80a1c24 <_strtol_r+0x58>
 80a1cc4:	230a      	movs	r3, #10
 80a1cc6:	e7ad      	b.n	80a1c24 <_strtol_r+0x58>
 80a1cc8:	2c30      	cmp	r4, #48	; 0x30
 80a1cca:	d0a3      	beq.n	80a1c14 <_strtol_r+0x48>
 80a1ccc:	e7aa      	b.n	80a1c24 <_strtol_r+0x58>
 80a1cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1cd2:	bf00      	nop
 80a1cd4:	20000308 	.word	0x20000308

080a1cd8 <strtol>:
 80a1cd8:	4613      	mov	r3, r2
 80a1cda:	460a      	mov	r2, r1
 80a1cdc:	4601      	mov	r1, r0
 80a1cde:	4802      	ldr	r0, [pc, #8]	; (80a1ce8 <strtol+0x10>)
 80a1ce0:	6800      	ldr	r0, [r0, #0]
 80a1ce2:	f7ff bf73 	b.w	80a1bcc <_strtol_r>
 80a1ce6:	bf00      	nop
 80a1ce8:	2000036c 	.word	0x2000036c

080a1cec <dynalib_user>:
 80a1cec:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1cfc:	00000000 69726553 6f206c61 006e6570     ....Serial open.
 80a1d0c:	736e6553 6320726f 656e6e6f 64657463     Sensor connected
 80a1d1c:	6e6f4300 7463656e 74206465 7262206f     .Connected to br
 80a1d2c:	72656b6f 69614600 2064656c 63206f74     oker.Failed to c
 80a1d3c:	656e6e6f 74207463 7262206f 72656b6f     onnect to broker
 80a1d4c:	61657200 676e6964 4400203a 61747369     .reading: .Dista
 80a1d5c:	3a65636e 69640020 6e617473 49006563     nce: .distance.I
 80a1d6c:	7220746e 65676e61 6d00203a 68507861     nt range: .maxPh
 80a1d7c:	6e6f746f 04000035 5454514d 4d060004     oton5...MQTT...M
 80a1d8c:	64734951 00000370                       QIsdp...

080a1d94 <_ZTV9IPAddress>:
	...
 80a1d9c:	080a0acf 080a0ac1 080a0ac3 6e6c0066     ............f.ln
 80a1dac:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a1dbc:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a1dcc:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a1ddc:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a1dec:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a1dfc:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a1e0c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a1e1c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a1e2c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a1e3c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a1e4c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a1e5c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a1e6c:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a1e7c:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a1e8c <_ZTV8SPIClass>:
	...
 80a1e94:	080a0ced 080a0cef                       ........

080a1e9c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a1ea4:	080a0f0d 080a0f13 080a1033 080a0f1f     ........3.......
 80a1eb4:	080a0f0f                                ....

080a1eb8 <_ZTV9TCPClient>:
	...
 80a1ec0:	080a0289 080a02bd 080a0ec9 080a0ee3     ................
 80a1ed0:	080a10b1 080a0fff 080a0fd1 080a0f0b     ................
 80a1ee0:	080a11e5 080a0f25 080a104f 080a112d     ....%...O...-...
 80a1ef0:	080a1335 080a1387 080a0ef3 080a12f9     5...............
 80a1f00:	080a0fb1 69726977 5400676e 6c435043     ....wiring.TCPCl
 80a1f10:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a1f20:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a1f30:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a1f40:	74637361 00656d69                       asctime.

080a1f48 <_ZTV11USARTSerial>:
	...
 80a1f50:	080a13a9 080a13cd 080a13d9 080a0b8d     ................
 80a1f60:	080a13b5 080a13c1 080a13bb 080a13c7     ................
 80a1f70:	080a13ab 080a13af                       ........

080a1f78 <_ZTV9USBSerial>:
	...
 80a1f80:	080a14b9 080a14fd 080a14d7 080a0b8d     ................
 80a1f90:	080a14d1 080a14bb 080a14c3 080a14f7     ................
 80a1fa0:	080a14cb 080a14b5                       ........

080a1fa8 <_ZTVN5spark9WiFiClassE>:
	...
 80a1fb0:	080a15ff                                ....

080a1fb4 <_ZN5spark7NetworkE>:
 80a1fb4:	2000044c                                L.. 

080a1fb8 <_ctype_>:
 80a1fb8:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1fc8:	20202020 20202020 20202020 20202020                     
 80a1fd8:	10108820 10101010 10101010 10101010      ...............
 80a1fe8:	04040410 04040404 10040404 10101010     ................
 80a1ff8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a2008:	01010101 01010101 01010101 10101010     ................
 80a2018:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2028:	02020202 02020202 02020202 10101010     ................
 80a2038:	00000020 00000000 00000000 00000000      ...............
	...

080a20bc <__sf_fake_stdin>:
	...

080a20dc <__sf_fake_stdout>:
	...

080a20fc <__sf_fake_stderr>:
	...
 80a211c:	00000043                                         C.

080a211e <link_const_variable_data_end>:
	...

080a2120 <link_constructors_location>:
 80a2120:	080a022d 	.word	0x080a022d
 80a2124:	080a07fb 	.word	0x080a07fb
 80a2128:	080a0b7d 	.word	0x080a0b7d
 80a212c:	080a0cd1 	.word	0x080a0cd1
 80a2130:	080a0e89 	.word	0x080a0e89
 80a2134:	080a1395 	.word	0x080a1395
 80a2138:	080a1609 	.word	0x080a1609
 80a213c:	080a1801 	.word	0x080a1801
 80a2140:	080a1831 	.word	0x080a1831
 80a2144:	080a1881 	.word	0x080a1881
 80a2148:	080a1945 	.word	0x080a1945
 80a214c:	080a19c9 	.word	0x080a19c9
 80a2150:	080a1a4d 	.word	0x080a1a4d

080a2154 <link_constructors_end>:
	...
